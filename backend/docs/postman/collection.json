{
  "variables": [],
  "info": {
    "name": "Collection",
    "description": "",
    "schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
  },
  "item": [
    {
      "name": "authors",
      "description": "Author resource",
      "item": [
        {
          "name": "Authors listing",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
				"exec": [
					"/* Get response body and content type */",
					"var body = JSON.parse(responseBody);",
					"var contentType = postman.getResponseHeader(\"Content-Type\");",
					"",
					"/* Valid status codes for this resource */",
					"var statusCodes = [200, 400, 401, 403, 404, 422];",
					"",
					"/* JSON error response schema */",
					"var errorSchema = {",
					"    type: 'object',",
					"    required: ['error'],",
					"    properties: {",
					"        'error' : {",
					"            type: 'object',",
					"            required: [\"code\", \"message\"],",
					"            properties: {",
					"                'error': { type: 'integer' },",
					"                'message': { type: 'string' }",
					"            }",
					"        }",
					"    }",
					"};",
					"",
					"/* Success JSON message schema */",
					"var successSchema = {",
					"    type: 'object',",
					"    required: ['id'],",
					"    properties: {",
					"        'id' : { type: 'integer' }",
					"    }",
					"};",
					"",
					"",
					"/*",
					" * Basic tests",
					" */",
					"",
					"tests[\"Response time is less than 300ms\"] = (",
					"    responseTime < 300);",
					"",
					"tests[\"Content-Type is 'application/json'\"] = (",
					"    !!contentType && contentType.has(\"application/json\"));",
					"",
					"tests[\"Status code is valid\"] = (",
					"    statusCodes.indexOf(responseCode.code) >= 0);",
					"",
					"",
					"/*",
					" * Validate JSON responses",
					" */",
					"",
					"tests[\"Response is a JSON object\"] = tv4.validate(",
					"    body, {type: 'object'});",
					"",
					"if (responseCode.code >= 400 && responseCode.code < 422) {",
					"    tests[\"Response is a valid error object\"] = tv4.validate(",
					"        body, errorSchema);",
					"}",
					"",
					"if (responseCode.code === 200 && request.method !== 'GET') {",
					"    tests[\"Response is a valid success object\"] = tv4.validate(",
					"        body, successSchema);",
					"}"
				]
              }                                     
            }
          ],
          "request": {
            "url": "http://{{host}}/api/authors?limit={{limit}}&page={{page}}&sort[]={{sort}}&with[]={{with}}&search={{search}}",
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "description": ""
              }
            ],
            "body": {},
            "description": "Obtain a list of authors.\n\nParameters:\n\n    limit     Maximum number of results to fetch\n    page      Page of results to fetch\n    search    Restrict the results to the given search string\n    sort[]    Results order array\n    with[]    Array of related objects to fetch\n\nRelated objects that can be fetched:\n\n    municipalityMunicipality object\n    project   Project object\n    school    School object\n    synapse   Synapse object\n    territory Territory object\n    user      User object\n"
          },
          "response": []
        },
        {
          "name": "Retrieve a author",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
				"exec": [        
					"/* Get response body and content type */",
					"var body = JSON.parse(responseBody);",
					"var contentType = postman.getResponseHeader(\"Content-Type\");",
					"",
					"/* Valid status codes for this resource */",
					"var statusCodes = [200, 400, 401, 403, 404, 422];",
					"",
					"/* JSON error response schema */",
					"var errorSchema = {",
					"    type: 'object',",
					"    required: ['error'],",
					"    properties: {",
					"        'error' : {",
					"            type: 'object',",
					"            required: [\"code\", \"message\"],",
					"            properties: {",
					"                'error': { type: 'integer' },",
					"                'message': { type: 'string' }",
					"            }",
					"        }",
					"    }",
					"};",
					"",
					"/* Success JSON message schema */",
					"var successSchema = {",
					"    type: 'object',",
					"    required: ['id'],",
					"    properties: {",
					"        'id' : { type: 'integer' }",
					"    }",
					"};",
					"",
					"",
					"/*",
					" * Basic tests",
					" */",
					"",
					"tests[\"Response time is less than 300ms\"] = (",
					"    responseTime < 300);",
					"",
					"tests[\"Content-Type is 'application/json'\"] = (",
					"    !!contentType && contentType.has(\"application/json\"));",
					"",
					"tests[\"Status code is valid\"] = (",
					"    statusCodes.indexOf(responseCode.code) >= 0);",
					"",
					"",
					"/*",
					" * Validate JSON responses",
					" */",
					"",
					"tests[\"Response is a JSON object\"] = tv4.validate(",
					"    body, {type: 'object'});",
					"",
					"if (responseCode.code >= 400 && responseCode.code < 422) {",
					"    tests[\"Response is a valid error object\"] = tv4.validate(",
					"        body, errorSchema);",
					"}",
					"",
					"if (responseCode.code === 200 && request.method !== 'GET') {",
					"    tests[\"Response is a valid success object\"] = tv4.validate(",
					"        body, successSchema);",
					"}"
				]
              }
            }
          ],
          "request": {
            "url": {
              "raw": "http://{{host}}/api/authors/:id",
              "protocol": "http",
              "auth": {},
              "host": [
                "{{host}}"
              ],
              "path": [
                "api",
                "authors",
                ":id"
              ],
              "variable": [
                {
                  "id": "{{id}}",
                  "id": "id"
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "description": ""
              }
            ],
            "body": {},
            "description": "Retrieve a single author object."
          },
          "response": []
        },
        {
          "name": "Store a new author",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [       
					"/* Get response body and content type */",
					"var body = JSON.parse(responseBody);",
					"var contentType = postman.getResponseHeader(\"Content-Type\");",
					"",
					"/* Valid status codes for this resource */",
					"var statusCodes = [200, 400, 401, 403, 404, 422];",
					"",
					"/* JSON error response schema */",
					"var errorSchema = {",
					"    type: 'object',",
					"    required: ['error'],",
					"    properties: {",
					"        'error' : {",
					"            type: 'object',",
					"            required: [\"code\", \"message\"],",
					"            properties: {",
					"                'error': { type: 'integer' },",
					"                'message': { type: 'string' }",
					"            }",
					"        }",
					"    }",
					"};",
					"",
					"/* Success JSON message schema */",
					"var successSchema = {",
					"    type: 'object',",
					"    required: ['id'],",
					"    properties: {",
					"        'id' : { type: 'integer' }",
					"    }",
					"};",
					"",
					"",
					"/*",
					" * Basic tests",
					" */",
					"",
					"tests[\"Response time is less than 300ms\"] = (",
					"    responseTime < 300);",
					"",
					"tests[\"Content-Type is 'application/json'\"] = (",
					"    !!contentType && contentType.has(\"application/json\"));",
					"",
					"tests[\"Status code is valid\"] = (",
					"    statusCodes.indexOf(responseCode.code) >= 0);",
					"",
					"",
					"/*",
					" * Validate JSON responses",
					" */",
					"",
					"tests[\"Response is a JSON object\"] = tv4.validate(",
					"    body, {type: 'object'});",
					"",
					"if (responseCode.code >= 400 && responseCode.code < 422) {",
					"    tests[\"Response is a valid error object\"] = tv4.validate(",
					"        body, errorSchema);",
					"}",
					"",
					"if (responseCode.code === 200 && request.method !== 'GET') {",
					"    tests[\"Response is a valid success object\"] = tv4.validate(",
					"        body, successSchema);",
					"}"
				]
              }
            }
          ],
          "request": {
            "url": "http://{{host}}/api/authors",
            "method": "POST",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "description": ""
              }
            ],
            "body": {},
            "description": "Create a new author object."
          },
          "response": []
        },
        {
          "name": "Update a author",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
					"/* Get response body and content type */",
					"var body = JSON.parse(responseBody);",
					"var contentType = postman.getResponseHeader(\"Content-Type\");",
					"",
					"/* Valid status codes for this resource */",
					"var statusCodes = [200, 400, 401, 403, 404, 422];",
					"",
					"/* JSON error response schema */",
					"var errorSchema = {",
					"    type: 'object',",
					"    required: ['error'],",
					"    properties: {",
					"        'error' : {",
					"            type: 'object',",
					"            required: [\"code\", \"message\"],",
					"            properties: {",
					"                'error': { type: 'integer' },",
					"                'message': { type: 'string' }",
					"            }",
					"        }",
					"    }",
					"};",
					"",
					"/* Success JSON message schema */",
					"var successSchema = {",
					"    type: 'object',",
					"    required: ['id'],",
					"    properties: {",
					"        'id' : { type: 'integer' }",
					"    }",
					"};",
					"",
					"",
					"/*",
					" * Basic tests",
					" */",
					"",
					"tests[\"Response time is less than 300ms\"] = (",
					"    responseTime < 300);",
					"",
					"tests[\"Content-Type is 'application/json'\"] = (",
					"    !!contentType && contentType.has(\"application/json\"));",
					"",
					"tests[\"Status code is valid\"] = (",
					"    statusCodes.indexOf(responseCode.code) >= 0);",
					"",
					"",
					"/*",
					" * Validate JSON responses",
					" */",
					"",
					"tests[\"Response is a JSON object\"] = tv4.validate(",
					"    body, {type: 'object'});",
					"",
					"if (responseCode.code >= 400 && responseCode.code < 422) {",
					"    tests[\"Response is a valid error object\"] = tv4.validate(",
					"        body, errorSchema);",
					"}",
					"",
					"if (responseCode.code === 200 && request.method !== 'GET') {",
					"    tests[\"Response is a valid success object\"] = tv4.validate(",
					"        body, successSchema);",
					"}"
				]
              }
            }
          ],
          "request": {
            "url": {
              "raw": "http://{{host}}/api/authors/:id",
              "protocol": "http",
              "auth": {},
              "host": [
                "{{host}}"
              ],
              "path": [
                "api",
                "authors",
                ":id"
              ],
              "query": [
              ],
              "variable": [
                {
                  "id": "{{id}}",
                  "id": "id"
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
              ]
            },
            "description": "Update an existing author object."
          },
          "response": []
        },
        {
          "name": "Remove a author",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                ]
              }
            }
          ],
          "request": {
            "url": {
              "raw": "http://{{host}}/api/authors/:id",
              "protocol": "http",
              "auth": {},
              "host": [
                "{{host}}"
              ],
              "path": [
                "api",
                "authors",
                ":id"
              ],
              "variable": [
                {
                  "value": "{{id}}",
                  "id": "id"
                }
              ]
            },
            "method": "DELETE",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "description": ""
              }
            ],
            "body": {},
            "description": "Remove a single author."
          },
          "response": []
        }
      ]
    },
    {
      "name": "blocks",
      "description": "Block resource",
      "item": [
        {
          "name": "Blocks listing",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
				"exec": [
					"/* Get response body and content type */",
					"var body = JSON.parse(responseBody);",
					"var contentType = postman.getResponseHeader(\"Content-Type\");",
					"",
					"/* Valid status codes for this resource */",
					"var statusCodes = [200, 400, 401, 403, 404, 422];",
					"",
					"/* JSON error response schema */",
					"var errorSchema = {",
					"    type: 'object',",
					"    required: ['error'],",
					"    properties: {",
					"        'error' : {",
					"            type: 'object',",
					"            required: [\"code\", \"message\"],",
					"            properties: {",
					"                'error': { type: 'integer' },",
					"                'message': { type: 'string' }",
					"            }",
					"        }",
					"    }",
					"};",
					"",
					"/* Success JSON message schema */",
					"var successSchema = {",
					"    type: 'object',",
					"    required: ['id'],",
					"    properties: {",
					"        'id' : { type: 'integer' }",
					"    }",
					"};",
					"",
					"",
					"/*",
					" * Basic tests",
					" */",
					"",
					"tests[\"Response time is less than 300ms\"] = (",
					"    responseTime < 300);",
					"",
					"tests[\"Content-Type is 'application/json'\"] = (",
					"    !!contentType && contentType.has(\"application/json\"));",
					"",
					"tests[\"Status code is valid\"] = (",
					"    statusCodes.indexOf(responseCode.code) >= 0);",
					"",
					"",
					"/*",
					" * Validate JSON responses",
					" */",
					"",
					"tests[\"Response is a JSON object\"] = tv4.validate(",
					"    body, {type: 'object'});",
					"",
					"if (responseCode.code >= 400 && responseCode.code < 422) {",
					"    tests[\"Response is a valid error object\"] = tv4.validate(",
					"        body, errorSchema);",
					"}",
					"",
					"if (responseCode.code === 200 && request.method !== 'GET') {",
					"    tests[\"Response is a valid success object\"] = tv4.validate(",
					"        body, successSchema);",
					"}"
				]
              }                                     
            }
          ],
          "request": {
            "url": "http://{{host}}/api/blocks?limit={{limit}}&page={{page}}&sort[]={{sort}}&with[]={{with}}&search={{search}}",
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "description": ""
              }
            ],
            "body": {},
            "description": "Obtain a list of blocks.\n\nParameters:\n\n    limit     Maximum number of results to fetch\n    page      Page of results to fetch\n    search    Restrict the results to the given search string\n    sort[]    Results order array\n    with[]    Array of related objects to fetch\n\nRelated objects that can be fetched:\n\n    synapse   Synapse object\n"
          },
          "response": []
        },
        {
          "name": "Retrieve a block",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
				"exec": [        
					"/* Get response body and content type */",
					"var body = JSON.parse(responseBody);",
					"var contentType = postman.getResponseHeader(\"Content-Type\");",
					"",
					"/* Valid status codes for this resource */",
					"var statusCodes = [200, 400, 401, 403, 404, 422];",
					"",
					"/* JSON error response schema */",
					"var errorSchema = {",
					"    type: 'object',",
					"    required: ['error'],",
					"    properties: {",
					"        'error' : {",
					"            type: 'object',",
					"            required: [\"code\", \"message\"],",
					"            properties: {",
					"                'error': { type: 'integer' },",
					"                'message': { type: 'string' }",
					"            }",
					"        }",
					"    }",
					"};",
					"",
					"/* Success JSON message schema */",
					"var successSchema = {",
					"    type: 'object',",
					"    required: ['id'],",
					"    properties: {",
					"        'id' : { type: 'integer' }",
					"    }",
					"};",
					"",
					"",
					"/*",
					" * Basic tests",
					" */",
					"",
					"tests[\"Response time is less than 300ms\"] = (",
					"    responseTime < 300);",
					"",
					"tests[\"Content-Type is 'application/json'\"] = (",
					"    !!contentType && contentType.has(\"application/json\"));",
					"",
					"tests[\"Status code is valid\"] = (",
					"    statusCodes.indexOf(responseCode.code) >= 0);",
					"",
					"",
					"/*",
					" * Validate JSON responses",
					" */",
					"",
					"tests[\"Response is a JSON object\"] = tv4.validate(",
					"    body, {type: 'object'});",
					"",
					"if (responseCode.code >= 400 && responseCode.code < 422) {",
					"    tests[\"Response is a valid error object\"] = tv4.validate(",
					"        body, errorSchema);",
					"}",
					"",
					"if (responseCode.code === 200 && request.method !== 'GET') {",
					"    tests[\"Response is a valid success object\"] = tv4.validate(",
					"        body, successSchema);",
					"}"
				]
              }
            }
          ],
          "request": {
            "url": {
              "raw": "http://{{host}}/api/blocks/:id",
              "protocol": "http",
              "auth": {},
              "host": [
                "{{host}}"
              ],
              "path": [
                "api",
                "blocks",
                ":id"
              ],
              "variable": [
                {
                  "id": "{{id}}",
                  "id": "id"
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "description": ""
              }
            ],
            "body": {},
            "description": "Retrieve a single block object."
          },
          "response": []
        },
        {
          "name": "Store a new block",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [       
					"/* Get response body and content type */",
					"var body = JSON.parse(responseBody);",
					"var contentType = postman.getResponseHeader(\"Content-Type\");",
					"",
					"/* Valid status codes for this resource */",
					"var statusCodes = [200, 400, 401, 403, 404, 422];",
					"",
					"/* JSON error response schema */",
					"var errorSchema = {",
					"    type: 'object',",
					"    required: ['error'],",
					"    properties: {",
					"        'error' : {",
					"            type: 'object',",
					"            required: [\"code\", \"message\"],",
					"            properties: {",
					"                'error': { type: 'integer' },",
					"                'message': { type: 'string' }",
					"            }",
					"        }",
					"    }",
					"};",
					"",
					"/* Success JSON message schema */",
					"var successSchema = {",
					"    type: 'object',",
					"    required: ['id'],",
					"    properties: {",
					"        'id' : { type: 'integer' }",
					"    }",
					"};",
					"",
					"",
					"/*",
					" * Basic tests",
					" */",
					"",
					"tests[\"Response time is less than 300ms\"] = (",
					"    responseTime < 300);",
					"",
					"tests[\"Content-Type is 'application/json'\"] = (",
					"    !!contentType && contentType.has(\"application/json\"));",
					"",
					"tests[\"Status code is valid\"] = (",
					"    statusCodes.indexOf(responseCode.code) >= 0);",
					"",
					"",
					"/*",
					" * Validate JSON responses",
					" */",
					"",
					"tests[\"Response is a JSON object\"] = tv4.validate(",
					"    body, {type: 'object'});",
					"",
					"if (responseCode.code >= 400 && responseCode.code < 422) {",
					"    tests[\"Response is a valid error object\"] = tv4.validate(",
					"        body, errorSchema);",
					"}",
					"",
					"if (responseCode.code === 200 && request.method !== 'GET') {",
					"    tests[\"Response is a valid success object\"] = tv4.validate(",
					"        body, successSchema);",
					"}"
				]
              }
            }
          ],
          "request": {
            "url": "http://{{host}}/api/blocks",
            "method": "POST",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "description": ""
              }
            ],
            "body": {},
            "description": "Create a new block object."
          },
          "response": []
        },
        {
          "name": "Update a block",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
					"/* Get response body and content type */",
					"var body = JSON.parse(responseBody);",
					"var contentType = postman.getResponseHeader(\"Content-Type\");",
					"",
					"/* Valid status codes for this resource */",
					"var statusCodes = [200, 400, 401, 403, 404, 422];",
					"",
					"/* JSON error response schema */",
					"var errorSchema = {",
					"    type: 'object',",
					"    required: ['error'],",
					"    properties: {",
					"        'error' : {",
					"            type: 'object',",
					"            required: [\"code\", \"message\"],",
					"            properties: {",
					"                'error': { type: 'integer' },",
					"                'message': { type: 'string' }",
					"            }",
					"        }",
					"    }",
					"};",
					"",
					"/* Success JSON message schema */",
					"var successSchema = {",
					"    type: 'object',",
					"    required: ['id'],",
					"    properties: {",
					"        'id' : { type: 'integer' }",
					"    }",
					"};",
					"",
					"",
					"/*",
					" * Basic tests",
					" */",
					"",
					"tests[\"Response time is less than 300ms\"] = (",
					"    responseTime < 300);",
					"",
					"tests[\"Content-Type is 'application/json'\"] = (",
					"    !!contentType && contentType.has(\"application/json\"));",
					"",
					"tests[\"Status code is valid\"] = (",
					"    statusCodes.indexOf(responseCode.code) >= 0);",
					"",
					"",
					"/*",
					" * Validate JSON responses",
					" */",
					"",
					"tests[\"Response is a JSON object\"] = tv4.validate(",
					"    body, {type: 'object'});",
					"",
					"if (responseCode.code >= 400 && responseCode.code < 422) {",
					"    tests[\"Response is a valid error object\"] = tv4.validate(",
					"        body, errorSchema);",
					"}",
					"",
					"if (responseCode.code === 200 && request.method !== 'GET') {",
					"    tests[\"Response is a valid success object\"] = tv4.validate(",
					"        body, successSchema);",
					"}"
				]
              }
            }
          ],
          "request": {
            "url": {
              "raw": "http://{{host}}/api/blocks/:id",
              "protocol": "http",
              "auth": {},
              "host": [
                "{{host}}"
              ],
              "path": [
                "api",
                "blocks",
                ":id"
              ],
              "query": [
              ],
              "variable": [
                {
                  "id": "{{id}}",
                  "id": "id"
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
              ]
            },
            "description": "Update an existing block object."
          },
          "response": []
        },
        {
          "name": "Remove a block",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                ]
              }
            }
          ],
          "request": {
            "url": {
              "raw": "http://{{host}}/api/blocks/:id",
              "protocol": "http",
              "auth": {},
              "host": [
                "{{host}}"
              ],
              "path": [
                "api",
                "blocks",
                ":id"
              ],
              "variable": [
                {
                  "value": "{{id}}",
                  "id": "id"
                }
              ]
            },
            "method": "DELETE",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "description": ""
              }
            ],
            "body": {},
            "description": "Remove a single block."
          },
          "response": []
        }
      ]
    },
    {
      "name": "comments",
      "description": "Comment resource",
      "item": [
        {
          "name": "Comments listing",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
				"exec": [
					"/* Get response body and content type */",
					"var body = JSON.parse(responseBody);",
					"var contentType = postman.getResponseHeader(\"Content-Type\");",
					"",
					"/* Valid status codes for this resource */",
					"var statusCodes = [200, 400, 401, 403, 404, 422];",
					"",
					"/* JSON error response schema */",
					"var errorSchema = {",
					"    type: 'object',",
					"    required: ['error'],",
					"    properties: {",
					"        'error' : {",
					"            type: 'object',",
					"            required: [\"code\", \"message\"],",
					"            properties: {",
					"                'error': { type: 'integer' },",
					"                'message': { type: 'string' }",
					"            }",
					"        }",
					"    }",
					"};",
					"",
					"/* Success JSON message schema */",
					"var successSchema = {",
					"    type: 'object',",
					"    required: ['id'],",
					"    properties: {",
					"        'id' : { type: 'integer' }",
					"    }",
					"};",
					"",
					"",
					"/*",
					" * Basic tests",
					" */",
					"",
					"tests[\"Response time is less than 300ms\"] = (",
					"    responseTime < 300);",
					"",
					"tests[\"Content-Type is 'application/json'\"] = (",
					"    !!contentType && contentType.has(\"application/json\"));",
					"",
					"tests[\"Status code is valid\"] = (",
					"    statusCodes.indexOf(responseCode.code) >= 0);",
					"",
					"",
					"/*",
					" * Validate JSON responses",
					" */",
					"",
					"tests[\"Response is a JSON object\"] = tv4.validate(",
					"    body, {type: 'object'});",
					"",
					"if (responseCode.code >= 400 && responseCode.code < 422) {",
					"    tests[\"Response is a valid error object\"] = tv4.validate(",
					"        body, errorSchema);",
					"}",
					"",
					"if (responseCode.code === 200 && request.method !== 'GET') {",
					"    tests[\"Response is a valid success object\"] = tv4.validate(",
					"        body, successSchema);",
					"}"
				]
              }                                     
            }
          ],
          "request": {
            "url": "http://{{host}}/api/comments?limit={{limit}}&page={{page}}&sort[]={{sort}}&with[]={{with}}&search={{search}}",
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "description": ""
              }
            ],
            "body": {},
            "description": "Obtain a list of comments.\n\nParameters:\n\n    limit     Maximum number of results to fetch\n    page      Page of results to fetch\n    search    Restrict the results to the given search string\n    sort[]    Results order array\n    with[]    Array of related objects to fetch\n\nRelated objects that can be fetched:\n\n    post      Post object\n    user      User object\n"
          },
          "response": []
        },
        {
          "name": "Retrieve a comment",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
				"exec": [        
					"/* Get response body and content type */",
					"var body = JSON.parse(responseBody);",
					"var contentType = postman.getResponseHeader(\"Content-Type\");",
					"",
					"/* Valid status codes for this resource */",
					"var statusCodes = [200, 400, 401, 403, 404, 422];",
					"",
					"/* JSON error response schema */",
					"var errorSchema = {",
					"    type: 'object',",
					"    required: ['error'],",
					"    properties: {",
					"        'error' : {",
					"            type: 'object',",
					"            required: [\"code\", \"message\"],",
					"            properties: {",
					"                'error': { type: 'integer' },",
					"                'message': { type: 'string' }",
					"            }",
					"        }",
					"    }",
					"};",
					"",
					"/* Success JSON message schema */",
					"var successSchema = {",
					"    type: 'object',",
					"    required: ['id'],",
					"    properties: {",
					"        'id' : { type: 'integer' }",
					"    }",
					"};",
					"",
					"",
					"/*",
					" * Basic tests",
					" */",
					"",
					"tests[\"Response time is less than 300ms\"] = (",
					"    responseTime < 300);",
					"",
					"tests[\"Content-Type is 'application/json'\"] = (",
					"    !!contentType && contentType.has(\"application/json\"));",
					"",
					"tests[\"Status code is valid\"] = (",
					"    statusCodes.indexOf(responseCode.code) >= 0);",
					"",
					"",
					"/*",
					" * Validate JSON responses",
					" */",
					"",
					"tests[\"Response is a JSON object\"] = tv4.validate(",
					"    body, {type: 'object'});",
					"",
					"if (responseCode.code >= 400 && responseCode.code < 422) {",
					"    tests[\"Response is a valid error object\"] = tv4.validate(",
					"        body, errorSchema);",
					"}",
					"",
					"if (responseCode.code === 200 && request.method !== 'GET') {",
					"    tests[\"Response is a valid success object\"] = tv4.validate(",
					"        body, successSchema);",
					"}"
				]
              }
            }
          ],
          "request": {
            "url": {
              "raw": "http://{{host}}/api/comments/:id",
              "protocol": "http",
              "auth": {},
              "host": [
                "{{host}}"
              ],
              "path": [
                "api",
                "comments",
                ":id"
              ],
              "variable": [
                {
                  "id": "{{id}}",
                  "id": "id"
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "description": ""
              }
            ],
            "body": {},
            "description": "Retrieve a single comment object."
          },
          "response": []
        },
        {
          "name": "Store a new comment",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [       
					"/* Get response body and content type */",
					"var body = JSON.parse(responseBody);",
					"var contentType = postman.getResponseHeader(\"Content-Type\");",
					"",
					"/* Valid status codes for this resource */",
					"var statusCodes = [200, 400, 401, 403, 404, 422];",
					"",
					"/* JSON error response schema */",
					"var errorSchema = {",
					"    type: 'object',",
					"    required: ['error'],",
					"    properties: {",
					"        'error' : {",
					"            type: 'object',",
					"            required: [\"code\", \"message\"],",
					"            properties: {",
					"                'error': { type: 'integer' },",
					"                'message': { type: 'string' }",
					"            }",
					"        }",
					"    }",
					"};",
					"",
					"/* Success JSON message schema */",
					"var successSchema = {",
					"    type: 'object',",
					"    required: ['id'],",
					"    properties: {",
					"        'id' : { type: 'integer' }",
					"    }",
					"};",
					"",
					"",
					"/*",
					" * Basic tests",
					" */",
					"",
					"tests[\"Response time is less than 300ms\"] = (",
					"    responseTime < 300);",
					"",
					"tests[\"Content-Type is 'application/json'\"] = (",
					"    !!contentType && contentType.has(\"application/json\"));",
					"",
					"tests[\"Status code is valid\"] = (",
					"    statusCodes.indexOf(responseCode.code) >= 0);",
					"",
					"",
					"/*",
					" * Validate JSON responses",
					" */",
					"",
					"tests[\"Response is a JSON object\"] = tv4.validate(",
					"    body, {type: 'object'});",
					"",
					"if (responseCode.code >= 400 && responseCode.code < 422) {",
					"    tests[\"Response is a valid error object\"] = tv4.validate(",
					"        body, errorSchema);",
					"}",
					"",
					"if (responseCode.code === 200 && request.method !== 'GET') {",
					"    tests[\"Response is a valid success object\"] = tv4.validate(",
					"        body, successSchema);",
					"}"
				]
              }
            }
          ],
          "request": {
            "url": "http://{{host}}/api/comments",
            "method": "POST",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "description": ""
              }
            ],
            "body": {},
            "description": "Create a new comment object."
          },
          "response": []
        },
        {
          "name": "Update a comment",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
					"/* Get response body and content type */",
					"var body = JSON.parse(responseBody);",
					"var contentType = postman.getResponseHeader(\"Content-Type\");",
					"",
					"/* Valid status codes for this resource */",
					"var statusCodes = [200, 400, 401, 403, 404, 422];",
					"",
					"/* JSON error response schema */",
					"var errorSchema = {",
					"    type: 'object',",
					"    required: ['error'],",
					"    properties: {",
					"        'error' : {",
					"            type: 'object',",
					"            required: [\"code\", \"message\"],",
					"            properties: {",
					"                'error': { type: 'integer' },",
					"                'message': { type: 'string' }",
					"            }",
					"        }",
					"    }",
					"};",
					"",
					"/* Success JSON message schema */",
					"var successSchema = {",
					"    type: 'object',",
					"    required: ['id'],",
					"    properties: {",
					"        'id' : { type: 'integer' }",
					"    }",
					"};",
					"",
					"",
					"/*",
					" * Basic tests",
					" */",
					"",
					"tests[\"Response time is less than 300ms\"] = (",
					"    responseTime < 300);",
					"",
					"tests[\"Content-Type is 'application/json'\"] = (",
					"    !!contentType && contentType.has(\"application/json\"));",
					"",
					"tests[\"Status code is valid\"] = (",
					"    statusCodes.indexOf(responseCode.code) >= 0);",
					"",
					"",
					"/*",
					" * Validate JSON responses",
					" */",
					"",
					"tests[\"Response is a JSON object\"] = tv4.validate(",
					"    body, {type: 'object'});",
					"",
					"if (responseCode.code >= 400 && responseCode.code < 422) {",
					"    tests[\"Response is a valid error object\"] = tv4.validate(",
					"        body, errorSchema);",
					"}",
					"",
					"if (responseCode.code === 200 && request.method !== 'GET') {",
					"    tests[\"Response is a valid success object\"] = tv4.validate(",
					"        body, successSchema);",
					"}"
				]
              }
            }
          ],
          "request": {
            "url": {
              "raw": "http://{{host}}/api/comments/:id",
              "protocol": "http",
              "auth": {},
              "host": [
                "{{host}}"
              ],
              "path": [
                "api",
                "comments",
                ":id"
              ],
              "query": [
              ],
              "variable": [
                {
                  "id": "{{id}}",
                  "id": "id"
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
              ]
            },
            "description": "Update an existing comment object."
          },
          "response": []
        },
        {
          "name": "Remove a comment",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                ]
              }
            }
          ],
          "request": {
            "url": {
              "raw": "http://{{host}}/api/comments/:id",
              "protocol": "http",
              "auth": {},
              "host": [
                "{{host}}"
              ],
              "path": [
                "api",
                "comments",
                ":id"
              ],
              "variable": [
                {
                  "value": "{{id}}",
                  "id": "id"
                }
              ]
            },
            "method": "DELETE",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "description": ""
              }
            ],
            "body": {},
            "description": "Remove a single comment."
          },
          "response": []
        }
      ]
    },
    {
      "name": "failed_jobs",
      "description": "FailedJob resource",
      "item": [
        {
          "name": "Failed_jobs listing",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
				"exec": [
					"/* Get response body and content type */",
					"var body = JSON.parse(responseBody);",
					"var contentType = postman.getResponseHeader(\"Content-Type\");",
					"",
					"/* Valid status codes for this resource */",
					"var statusCodes = [200, 400, 401, 403, 404, 422];",
					"",
					"/* JSON error response schema */",
					"var errorSchema = {",
					"    type: 'object',",
					"    required: ['error'],",
					"    properties: {",
					"        'error' : {",
					"            type: 'object',",
					"            required: [\"code\", \"message\"],",
					"            properties: {",
					"                'error': { type: 'integer' },",
					"                'message': { type: 'string' }",
					"            }",
					"        }",
					"    }",
					"};",
					"",
					"/* Success JSON message schema */",
					"var successSchema = {",
					"    type: 'object',",
					"    required: ['id'],",
					"    properties: {",
					"        'id' : { type: 'integer' }",
					"    }",
					"};",
					"",
					"",
					"/*",
					" * Basic tests",
					" */",
					"",
					"tests[\"Response time is less than 300ms\"] = (",
					"    responseTime < 300);",
					"",
					"tests[\"Content-Type is 'application/json'\"] = (",
					"    !!contentType && contentType.has(\"application/json\"));",
					"",
					"tests[\"Status code is valid\"] = (",
					"    statusCodes.indexOf(responseCode.code) >= 0);",
					"",
					"",
					"/*",
					" * Validate JSON responses",
					" */",
					"",
					"tests[\"Response is a JSON object\"] = tv4.validate(",
					"    body, {type: 'object'});",
					"",
					"if (responseCode.code >= 400 && responseCode.code < 422) {",
					"    tests[\"Response is a valid error object\"] = tv4.validate(",
					"        body, errorSchema);",
					"}",
					"",
					"if (responseCode.code === 200 && request.method !== 'GET') {",
					"    tests[\"Response is a valid success object\"] = tv4.validate(",
					"        body, successSchema);",
					"}"
				]
              }                                     
            }
          ],
          "request": {
            "url": "http://{{host}}/api/failed_jobs?limit={{limit}}&page={{page}}&sort[]={{sort}}&with[]={{with}}&search={{search}}",
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "description": ""
              }
            ],
            "body": {},
            "description": "Obtain a list of failed_jobs.\n\nParameters:\n\n    limit     Maximum number of results to fetch\n    page      Page of results to fetch\n    search    Restrict the results to the given search string\n    sort[]    Results order array\n    with[]    Array of related objects to fetch\n\nRelated objects that can be fetched:\n\n"
          },
          "response": []
        },
        {
          "name": "Retrieve a failed_job",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
				"exec": [        
					"/* Get response body and content type */",
					"var body = JSON.parse(responseBody);",
					"var contentType = postman.getResponseHeader(\"Content-Type\");",
					"",
					"/* Valid status codes for this resource */",
					"var statusCodes = [200, 400, 401, 403, 404, 422];",
					"",
					"/* JSON error response schema */",
					"var errorSchema = {",
					"    type: 'object',",
					"    required: ['error'],",
					"    properties: {",
					"        'error' : {",
					"            type: 'object',",
					"            required: [\"code\", \"message\"],",
					"            properties: {",
					"                'error': { type: 'integer' },",
					"                'message': { type: 'string' }",
					"            }",
					"        }",
					"    }",
					"};",
					"",
					"/* Success JSON message schema */",
					"var successSchema = {",
					"    type: 'object',",
					"    required: ['id'],",
					"    properties: {",
					"        'id' : { type: 'integer' }",
					"    }",
					"};",
					"",
					"",
					"/*",
					" * Basic tests",
					" */",
					"",
					"tests[\"Response time is less than 300ms\"] = (",
					"    responseTime < 300);",
					"",
					"tests[\"Content-Type is 'application/json'\"] = (",
					"    !!contentType && contentType.has(\"application/json\"));",
					"",
					"tests[\"Status code is valid\"] = (",
					"    statusCodes.indexOf(responseCode.code) >= 0);",
					"",
					"",
					"/*",
					" * Validate JSON responses",
					" */",
					"",
					"tests[\"Response is a JSON object\"] = tv4.validate(",
					"    body, {type: 'object'});",
					"",
					"if (responseCode.code >= 400 && responseCode.code < 422) {",
					"    tests[\"Response is a valid error object\"] = tv4.validate(",
					"        body, errorSchema);",
					"}",
					"",
					"if (responseCode.code === 200 && request.method !== 'GET') {",
					"    tests[\"Response is a valid success object\"] = tv4.validate(",
					"        body, successSchema);",
					"}"
				]
              }
            }
          ],
          "request": {
            "url": {
              "raw": "http://{{host}}/api/failed_jobs/:id",
              "protocol": "http",
              "auth": {},
              "host": [
                "{{host}}"
              ],
              "path": [
                "api",
                "failed_jobs",
                ":id"
              ],
              "variable": [
                {
                  "id": "{{id}}",
                  "id": "id"
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "description": ""
              }
            ],
            "body": {},
            "description": "Retrieve a single failed_job object."
          },
          "response": []
        },
        {
          "name": "Store a new failed_job",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [       
					"/* Get response body and content type */",
					"var body = JSON.parse(responseBody);",
					"var contentType = postman.getResponseHeader(\"Content-Type\");",
					"",
					"/* Valid status codes for this resource */",
					"var statusCodes = [200, 400, 401, 403, 404, 422];",
					"",
					"/* JSON error response schema */",
					"var errorSchema = {",
					"    type: 'object',",
					"    required: ['error'],",
					"    properties: {",
					"        'error' : {",
					"            type: 'object',",
					"            required: [\"code\", \"message\"],",
					"            properties: {",
					"                'error': { type: 'integer' },",
					"                'message': { type: 'string' }",
					"            }",
					"        }",
					"    }",
					"};",
					"",
					"/* Success JSON message schema */",
					"var successSchema = {",
					"    type: 'object',",
					"    required: ['id'],",
					"    properties: {",
					"        'id' : { type: 'integer' }",
					"    }",
					"};",
					"",
					"",
					"/*",
					" * Basic tests",
					" */",
					"",
					"tests[\"Response time is less than 300ms\"] = (",
					"    responseTime < 300);",
					"",
					"tests[\"Content-Type is 'application/json'\"] = (",
					"    !!contentType && contentType.has(\"application/json\"));",
					"",
					"tests[\"Status code is valid\"] = (",
					"    statusCodes.indexOf(responseCode.code) >= 0);",
					"",
					"",
					"/*",
					" * Validate JSON responses",
					" */",
					"",
					"tests[\"Response is a JSON object\"] = tv4.validate(",
					"    body, {type: 'object'});",
					"",
					"if (responseCode.code >= 400 && responseCode.code < 422) {",
					"    tests[\"Response is a valid error object\"] = tv4.validate(",
					"        body, errorSchema);",
					"}",
					"",
					"if (responseCode.code === 200 && request.method !== 'GET') {",
					"    tests[\"Response is a valid success object\"] = tv4.validate(",
					"        body, successSchema);",
					"}"
				]
              }
            }
          ],
          "request": {
            "url": "http://{{host}}/api/failed_jobs",
            "method": "POST",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "description": ""
              }
            ],
            "body": {},
            "description": "Create a new failed_job object."
          },
          "response": []
        },
        {
          "name": "Update a failed_job",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
					"/* Get response body and content type */",
					"var body = JSON.parse(responseBody);",
					"var contentType = postman.getResponseHeader(\"Content-Type\");",
					"",
					"/* Valid status codes for this resource */",
					"var statusCodes = [200, 400, 401, 403, 404, 422];",
					"",
					"/* JSON error response schema */",
					"var errorSchema = {",
					"    type: 'object',",
					"    required: ['error'],",
					"    properties: {",
					"        'error' : {",
					"            type: 'object',",
					"            required: [\"code\", \"message\"],",
					"            properties: {",
					"                'error': { type: 'integer' },",
					"                'message': { type: 'string' }",
					"            }",
					"        }",
					"    }",
					"};",
					"",
					"/* Success JSON message schema */",
					"var successSchema = {",
					"    type: 'object',",
					"    required: ['id'],",
					"    properties: {",
					"        'id' : { type: 'integer' }",
					"    }",
					"};",
					"",
					"",
					"/*",
					" * Basic tests",
					" */",
					"",
					"tests[\"Response time is less than 300ms\"] = (",
					"    responseTime < 300);",
					"",
					"tests[\"Content-Type is 'application/json'\"] = (",
					"    !!contentType && contentType.has(\"application/json\"));",
					"",
					"tests[\"Status code is valid\"] = (",
					"    statusCodes.indexOf(responseCode.code) >= 0);",
					"",
					"",
					"/*",
					" * Validate JSON responses",
					" */",
					"",
					"tests[\"Response is a JSON object\"] = tv4.validate(",
					"    body, {type: 'object'});",
					"",
					"if (responseCode.code >= 400 && responseCode.code < 422) {",
					"    tests[\"Response is a valid error object\"] = tv4.validate(",
					"        body, errorSchema);",
					"}",
					"",
					"if (responseCode.code === 200 && request.method !== 'GET') {",
					"    tests[\"Response is a valid success object\"] = tv4.validate(",
					"        body, successSchema);",
					"}"
				]
              }
            }
          ],
          "request": {
            "url": {
              "raw": "http://{{host}}/api/failed_jobs/:id",
              "protocol": "http",
              "auth": {},
              "host": [
                "{{host}}"
              ],
              "path": [
                "api",
                "failed_jobs",
                ":id"
              ],
              "query": [
              ],
              "variable": [
                {
                  "id": "{{id}}",
                  "id": "id"
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
              ]
            },
            "description": "Update an existing failed_job object."
          },
          "response": []
        },
        {
          "name": "Remove a failed_job",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                ]
              }
            }
          ],
          "request": {
            "url": {
              "raw": "http://{{host}}/api/failed_jobs/:id",
              "protocol": "http",
              "auth": {},
              "host": [
                "{{host}}"
              ],
              "path": [
                "api",
                "failed_jobs",
                ":id"
              ],
              "variable": [
                {
                  "value": "{{id}}",
                  "id": "id"
                }
              ]
            },
            "method": "DELETE",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "description": ""
              }
            ],
            "body": {},
            "description": "Remove a single failed_job."
          },
          "response": []
        }
      ]
    },
    {
      "name": "feeds",
      "description": "Feed resource",
      "item": [
        {
          "name": "Feeds listing",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
				"exec": [
					"/* Get response body and content type */",
					"var body = JSON.parse(responseBody);",
					"var contentType = postman.getResponseHeader(\"Content-Type\");",
					"",
					"/* Valid status codes for this resource */",
					"var statusCodes = [200, 400, 401, 403, 404, 422];",
					"",
					"/* JSON error response schema */",
					"var errorSchema = {",
					"    type: 'object',",
					"    required: ['error'],",
					"    properties: {",
					"        'error' : {",
					"            type: 'object',",
					"            required: [\"code\", \"message\"],",
					"            properties: {",
					"                'error': { type: 'integer' },",
					"                'message': { type: 'string' }",
					"            }",
					"        }",
					"    }",
					"};",
					"",
					"/* Success JSON message schema */",
					"var successSchema = {",
					"    type: 'object',",
					"    required: ['id'],",
					"    properties: {",
					"        'id' : { type: 'integer' }",
					"    }",
					"};",
					"",
					"",
					"/*",
					" * Basic tests",
					" */",
					"",
					"tests[\"Response time is less than 300ms\"] = (",
					"    responseTime < 300);",
					"",
					"tests[\"Content-Type is 'application/json'\"] = (",
					"    !!contentType && contentType.has(\"application/json\"));",
					"",
					"tests[\"Status code is valid\"] = (",
					"    statusCodes.indexOf(responseCode.code) >= 0);",
					"",
					"",
					"/*",
					" * Validate JSON responses",
					" */",
					"",
					"tests[\"Response is a JSON object\"] = tv4.validate(",
					"    body, {type: 'object'});",
					"",
					"if (responseCode.code >= 400 && responseCode.code < 422) {",
					"    tests[\"Response is a valid error object\"] = tv4.validate(",
					"        body, errorSchema);",
					"}",
					"",
					"if (responseCode.code === 200 && request.method !== 'GET') {",
					"    tests[\"Response is a valid success object\"] = tv4.validate(",
					"        body, successSchema);",
					"}"
				]
              }                                     
            }
          ],
          "request": {
            "url": "http://{{host}}/api/feeds?limit={{limit}}&page={{page}}&sort[]={{sort}}&with[]={{with}}&search={{search}}",
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "description": ""
              }
            ],
            "body": {},
            "description": "Obtain a list of feeds.\n\nParameters:\n\n    limit     Maximum number of results to fetch\n    page      Page of results to fetch\n    search    Restrict the results to the given search string\n    sort[]    Results order array\n    with[]    Array of related objects to fetch\n\nRelated objects that can be fetched:\n\n    author    Author object\n"
          },
          "response": []
        },
        {
          "name": "Retrieve a feed",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
				"exec": [        
					"/* Get response body and content type */",
					"var body = JSON.parse(responseBody);",
					"var contentType = postman.getResponseHeader(\"Content-Type\");",
					"",
					"/* Valid status codes for this resource */",
					"var statusCodes = [200, 400, 401, 403, 404, 422];",
					"",
					"/* JSON error response schema */",
					"var errorSchema = {",
					"    type: 'object',",
					"    required: ['error'],",
					"    properties: {",
					"        'error' : {",
					"            type: 'object',",
					"            required: [\"code\", \"message\"],",
					"            properties: {",
					"                'error': { type: 'integer' },",
					"                'message': { type: 'string' }",
					"            }",
					"        }",
					"    }",
					"};",
					"",
					"/* Success JSON message schema */",
					"var successSchema = {",
					"    type: 'object',",
					"    required: ['id'],",
					"    properties: {",
					"        'id' : { type: 'integer' }",
					"    }",
					"};",
					"",
					"",
					"/*",
					" * Basic tests",
					" */",
					"",
					"tests[\"Response time is less than 300ms\"] = (",
					"    responseTime < 300);",
					"",
					"tests[\"Content-Type is 'application/json'\"] = (",
					"    !!contentType && contentType.has(\"application/json\"));",
					"",
					"tests[\"Status code is valid\"] = (",
					"    statusCodes.indexOf(responseCode.code) >= 0);",
					"",
					"",
					"/*",
					" * Validate JSON responses",
					" */",
					"",
					"tests[\"Response is a JSON object\"] = tv4.validate(",
					"    body, {type: 'object'});",
					"",
					"if (responseCode.code >= 400 && responseCode.code < 422) {",
					"    tests[\"Response is a valid error object\"] = tv4.validate(",
					"        body, errorSchema);",
					"}",
					"",
					"if (responseCode.code === 200 && request.method !== 'GET') {",
					"    tests[\"Response is a valid success object\"] = tv4.validate(",
					"        body, successSchema);",
					"}"
				]
              }
            }
          ],
          "request": {
            "url": {
              "raw": "http://{{host}}/api/feeds/:id",
              "protocol": "http",
              "auth": {},
              "host": [
                "{{host}}"
              ],
              "path": [
                "api",
                "feeds",
                ":id"
              ],
              "variable": [
                {
                  "id": "{{id}}",
                  "id": "id"
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "description": ""
              }
            ],
            "body": {},
            "description": "Retrieve a single feed object."
          },
          "response": []
        },
        {
          "name": "Store a new feed",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [       
					"/* Get response body and content type */",
					"var body = JSON.parse(responseBody);",
					"var contentType = postman.getResponseHeader(\"Content-Type\");",
					"",
					"/* Valid status codes for this resource */",
					"var statusCodes = [200, 400, 401, 403, 404, 422];",
					"",
					"/* JSON error response schema */",
					"var errorSchema = {",
					"    type: 'object',",
					"    required: ['error'],",
					"    properties: {",
					"        'error' : {",
					"            type: 'object',",
					"            required: [\"code\", \"message\"],",
					"            properties: {",
					"                'error': { type: 'integer' },",
					"                'message': { type: 'string' }",
					"            }",
					"        }",
					"    }",
					"};",
					"",
					"/* Success JSON message schema */",
					"var successSchema = {",
					"    type: 'object',",
					"    required: ['id'],",
					"    properties: {",
					"        'id' : { type: 'integer' }",
					"    }",
					"};",
					"",
					"",
					"/*",
					" * Basic tests",
					" */",
					"",
					"tests[\"Response time is less than 300ms\"] = (",
					"    responseTime < 300);",
					"",
					"tests[\"Content-Type is 'application/json'\"] = (",
					"    !!contentType && contentType.has(\"application/json\"));",
					"",
					"tests[\"Status code is valid\"] = (",
					"    statusCodes.indexOf(responseCode.code) >= 0);",
					"",
					"",
					"/*",
					" * Validate JSON responses",
					" */",
					"",
					"tests[\"Response is a JSON object\"] = tv4.validate(",
					"    body, {type: 'object'});",
					"",
					"if (responseCode.code >= 400 && responseCode.code < 422) {",
					"    tests[\"Response is a valid error object\"] = tv4.validate(",
					"        body, errorSchema);",
					"}",
					"",
					"if (responseCode.code === 200 && request.method !== 'GET') {",
					"    tests[\"Response is a valid success object\"] = tv4.validate(",
					"        body, successSchema);",
					"}"
				]
              }
            }
          ],
          "request": {
            "url": "http://{{host}}/api/feeds",
            "method": "POST",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "description": ""
              }
            ],
            "body": {},
            "description": "Create a new feed object."
          },
          "response": []
        },
        {
          "name": "Restore a feed",
          "request": {
            "url": {
              "raw": "http://{{host}}/api/feeds/:id",
              "protocol": "http",
              "auth": {},
              "host": [
                "{{host}}"
              ],
              "path": [
                "api",
                "feeds",
                ":id"
              ],
              "variable": [
                {
                  "value": "{{id}}",
                  "id": "id"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "description": ""
              }
            ],
            "body": {},
            "description": "Restore a soft-deleted feed object."
          },
          "response": []
        },
        {
          "name": "Update a feed",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
					"/* Get response body and content type */",
					"var body = JSON.parse(responseBody);",
					"var contentType = postman.getResponseHeader(\"Content-Type\");",
					"",
					"/* Valid status codes for this resource */",
					"var statusCodes = [200, 400, 401, 403, 404, 422];",
					"",
					"/* JSON error response schema */",
					"var errorSchema = {",
					"    type: 'object',",
					"    required: ['error'],",
					"    properties: {",
					"        'error' : {",
					"            type: 'object',",
					"            required: [\"code\", \"message\"],",
					"            properties: {",
					"                'error': { type: 'integer' },",
					"                'message': { type: 'string' }",
					"            }",
					"        }",
					"    }",
					"};",
					"",
					"/* Success JSON message schema */",
					"var successSchema = {",
					"    type: 'object',",
					"    required: ['id'],",
					"    properties: {",
					"        'id' : { type: 'integer' }",
					"    }",
					"};",
					"",
					"",
					"/*",
					" * Basic tests",
					" */",
					"",
					"tests[\"Response time is less than 300ms\"] = (",
					"    responseTime < 300);",
					"",
					"tests[\"Content-Type is 'application/json'\"] = (",
					"    !!contentType && contentType.has(\"application/json\"));",
					"",
					"tests[\"Status code is valid\"] = (",
					"    statusCodes.indexOf(responseCode.code) >= 0);",
					"",
					"",
					"/*",
					" * Validate JSON responses",
					" */",
					"",
					"tests[\"Response is a JSON object\"] = tv4.validate(",
					"    body, {type: 'object'});",
					"",
					"if (responseCode.code >= 400 && responseCode.code < 422) {",
					"    tests[\"Response is a valid error object\"] = tv4.validate(",
					"        body, errorSchema);",
					"}",
					"",
					"if (responseCode.code === 200 && request.method !== 'GET') {",
					"    tests[\"Response is a valid success object\"] = tv4.validate(",
					"        body, successSchema);",
					"}"
				]
              }
            }
          ],
          "request": {
            "url": {
              "raw": "http://{{host}}/api/feeds/:id",
              "protocol": "http",
              "auth": {},
              "host": [
                "{{host}}"
              ],
              "path": [
                "api",
                "feeds",
                ":id"
              ],
              "query": [
              ],
              "variable": [
                {
                  "id": "{{id}}",
                  "id": "id"
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
              ]
            },
            "description": "Update an existing feed object."
          },
          "response": []
        },
        {
          "name": "Remove a feed",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                ]
              }
            }
          ],
          "request": {
            "url": {
              "raw": "http://{{host}}/api/feeds/:id",
              "protocol": "http",
              "auth": {},
              "host": [
                "{{host}}"
              ],
              "path": [
                "api",
                "feeds",
                ":id"
              ],
              "variable": [
                {
                  "value": "{{id}}",
                  "id": "id"
                }
              ]
            },
            "method": "DELETE",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "description": ""
              }
            ],
            "body": {},
            "description": "Remove a single feed."
          },
          "response": []
        }
      ]
    },
    {
      "name": "jobs",
      "description": "Job resource",
      "item": [
        {
          "name": "Jobs listing",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
				"exec": [
					"/* Get response body and content type */",
					"var body = JSON.parse(responseBody);",
					"var contentType = postman.getResponseHeader(\"Content-Type\");",
					"",
					"/* Valid status codes for this resource */",
					"var statusCodes = [200, 400, 401, 403, 404, 422];",
					"",
					"/* JSON error response schema */",
					"var errorSchema = {",
					"    type: 'object',",
					"    required: ['error'],",
					"    properties: {",
					"        'error' : {",
					"            type: 'object',",
					"            required: [\"code\", \"message\"],",
					"            properties: {",
					"                'error': { type: 'integer' },",
					"                'message': { type: 'string' }",
					"            }",
					"        }",
					"    }",
					"};",
					"",
					"/* Success JSON message schema */",
					"var successSchema = {",
					"    type: 'object',",
					"    required: ['id'],",
					"    properties: {",
					"        'id' : { type: 'integer' }",
					"    }",
					"};",
					"",
					"",
					"/*",
					" * Basic tests",
					" */",
					"",
					"tests[\"Response time is less than 300ms\"] = (",
					"    responseTime < 300);",
					"",
					"tests[\"Content-Type is 'application/json'\"] = (",
					"    !!contentType && contentType.has(\"application/json\"));",
					"",
					"tests[\"Status code is valid\"] = (",
					"    statusCodes.indexOf(responseCode.code) >= 0);",
					"",
					"",
					"/*",
					" * Validate JSON responses",
					" */",
					"",
					"tests[\"Response is a JSON object\"] = tv4.validate(",
					"    body, {type: 'object'});",
					"",
					"if (responseCode.code >= 400 && responseCode.code < 422) {",
					"    tests[\"Response is a valid error object\"] = tv4.validate(",
					"        body, errorSchema);",
					"}",
					"",
					"if (responseCode.code === 200 && request.method !== 'GET') {",
					"    tests[\"Response is a valid success object\"] = tv4.validate(",
					"        body, successSchema);",
					"}"
				]
              }                                     
            }
          ],
          "request": {
            "url": "http://{{host}}/api/jobs?limit={{limit}}&page={{page}}&sort[]={{sort}}&with[]={{with}}&search={{search}}",
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "description": ""
              }
            ],
            "body": {},
            "description": "Obtain a list of jobs.\n\nParameters:\n\n    limit     Maximum number of results to fetch\n    page      Page of results to fetch\n    search    Restrict the results to the given search string\n    sort[]    Results order array\n    with[]    Array of related objects to fetch\n\nRelated objects that can be fetched:\n\n"
          },
          "response": []
        },
        {
          "name": "Retrieve a job",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
				"exec": [        
					"/* Get response body and content type */",
					"var body = JSON.parse(responseBody);",
					"var contentType = postman.getResponseHeader(\"Content-Type\");",
					"",
					"/* Valid status codes for this resource */",
					"var statusCodes = [200, 400, 401, 403, 404, 422];",
					"",
					"/* JSON error response schema */",
					"var errorSchema = {",
					"    type: 'object',",
					"    required: ['error'],",
					"    properties: {",
					"        'error' : {",
					"            type: 'object',",
					"            required: [\"code\", \"message\"],",
					"            properties: {",
					"                'error': { type: 'integer' },",
					"                'message': { type: 'string' }",
					"            }",
					"        }",
					"    }",
					"};",
					"",
					"/* Success JSON message schema */",
					"var successSchema = {",
					"    type: 'object',",
					"    required: ['id'],",
					"    properties: {",
					"        'id' : { type: 'integer' }",
					"    }",
					"};",
					"",
					"",
					"/*",
					" * Basic tests",
					" */",
					"",
					"tests[\"Response time is less than 300ms\"] = (",
					"    responseTime < 300);",
					"",
					"tests[\"Content-Type is 'application/json'\"] = (",
					"    !!contentType && contentType.has(\"application/json\"));",
					"",
					"tests[\"Status code is valid\"] = (",
					"    statusCodes.indexOf(responseCode.code) >= 0);",
					"",
					"",
					"/*",
					" * Validate JSON responses",
					" */",
					"",
					"tests[\"Response is a JSON object\"] = tv4.validate(",
					"    body, {type: 'object'});",
					"",
					"if (responseCode.code >= 400 && responseCode.code < 422) {",
					"    tests[\"Response is a valid error object\"] = tv4.validate(",
					"        body, errorSchema);",
					"}",
					"",
					"if (responseCode.code === 200 && request.method !== 'GET') {",
					"    tests[\"Response is a valid success object\"] = tv4.validate(",
					"        body, successSchema);",
					"}"
				]
              }
            }
          ],
          "request": {
            "url": {
              "raw": "http://{{host}}/api/jobs/:id",
              "protocol": "http",
              "auth": {},
              "host": [
                "{{host}}"
              ],
              "path": [
                "api",
                "jobs",
                ":id"
              ],
              "variable": [
                {
                  "id": "{{id}}",
                  "id": "id"
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "description": ""
              }
            ],
            "body": {},
            "description": "Retrieve a single job object."
          },
          "response": []
        },
        {
          "name": "Store a new job",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [       
					"/* Get response body and content type */",
					"var body = JSON.parse(responseBody);",
					"var contentType = postman.getResponseHeader(\"Content-Type\");",
					"",
					"/* Valid status codes for this resource */",
					"var statusCodes = [200, 400, 401, 403, 404, 422];",
					"",
					"/* JSON error response schema */",
					"var errorSchema = {",
					"    type: 'object',",
					"    required: ['error'],",
					"    properties: {",
					"        'error' : {",
					"            type: 'object',",
					"            required: [\"code\", \"message\"],",
					"            properties: {",
					"                'error': { type: 'integer' },",
					"                'message': { type: 'string' }",
					"            }",
					"        }",
					"    }",
					"};",
					"",
					"/* Success JSON message schema */",
					"var successSchema = {",
					"    type: 'object',",
					"    required: ['id'],",
					"    properties: {",
					"        'id' : { type: 'integer' }",
					"    }",
					"};",
					"",
					"",
					"/*",
					" * Basic tests",
					" */",
					"",
					"tests[\"Response time is less than 300ms\"] = (",
					"    responseTime < 300);",
					"",
					"tests[\"Content-Type is 'application/json'\"] = (",
					"    !!contentType && contentType.has(\"application/json\"));",
					"",
					"tests[\"Status code is valid\"] = (",
					"    statusCodes.indexOf(responseCode.code) >= 0);",
					"",
					"",
					"/*",
					" * Validate JSON responses",
					" */",
					"",
					"tests[\"Response is a JSON object\"] = tv4.validate(",
					"    body, {type: 'object'});",
					"",
					"if (responseCode.code >= 400 && responseCode.code < 422) {",
					"    tests[\"Response is a valid error object\"] = tv4.validate(",
					"        body, errorSchema);",
					"}",
					"",
					"if (responseCode.code === 200 && request.method !== 'GET') {",
					"    tests[\"Response is a valid success object\"] = tv4.validate(",
					"        body, successSchema);",
					"}"
				]
              }
            }
          ],
          "request": {
            "url": "http://{{host}}/api/jobs",
            "method": "POST",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "description": ""
              }
            ],
            "body": {},
            "description": "Create a new job object."
          },
          "response": []
        },
        {
          "name": "Update a job",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
					"/* Get response body and content type */",
					"var body = JSON.parse(responseBody);",
					"var contentType = postman.getResponseHeader(\"Content-Type\");",
					"",
					"/* Valid status codes for this resource */",
					"var statusCodes = [200, 400, 401, 403, 404, 422];",
					"",
					"/* JSON error response schema */",
					"var errorSchema = {",
					"    type: 'object',",
					"    required: ['error'],",
					"    properties: {",
					"        'error' : {",
					"            type: 'object',",
					"            required: [\"code\", \"message\"],",
					"            properties: {",
					"                'error': { type: 'integer' },",
					"                'message': { type: 'string' }",
					"            }",
					"        }",
					"    }",
					"};",
					"",
					"/* Success JSON message schema */",
					"var successSchema = {",
					"    type: 'object',",
					"    required: ['id'],",
					"    properties: {",
					"        'id' : { type: 'integer' }",
					"    }",
					"};",
					"",
					"",
					"/*",
					" * Basic tests",
					" */",
					"",
					"tests[\"Response time is less than 300ms\"] = (",
					"    responseTime < 300);",
					"",
					"tests[\"Content-Type is 'application/json'\"] = (",
					"    !!contentType && contentType.has(\"application/json\"));",
					"",
					"tests[\"Status code is valid\"] = (",
					"    statusCodes.indexOf(responseCode.code) >= 0);",
					"",
					"",
					"/*",
					" * Validate JSON responses",
					" */",
					"",
					"tests[\"Response is a JSON object\"] = tv4.validate(",
					"    body, {type: 'object'});",
					"",
					"if (responseCode.code >= 400 && responseCode.code < 422) {",
					"    tests[\"Response is a valid error object\"] = tv4.validate(",
					"        body, errorSchema);",
					"}",
					"",
					"if (responseCode.code === 200 && request.method !== 'GET') {",
					"    tests[\"Response is a valid success object\"] = tv4.validate(",
					"        body, successSchema);",
					"}"
				]
              }
            }
          ],
          "request": {
            "url": {
              "raw": "http://{{host}}/api/jobs/:id",
              "protocol": "http",
              "auth": {},
              "host": [
                "{{host}}"
              ],
              "path": [
                "api",
                "jobs",
                ":id"
              ],
              "query": [
              ],
              "variable": [
                {
                  "id": "{{id}}",
                  "id": "id"
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
              ]
            },
            "description": "Update an existing job object."
          },
          "response": []
        },
        {
          "name": "Remove a job",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                ]
              }
            }
          ],
          "request": {
            "url": {
              "raw": "http://{{host}}/api/jobs/:id",
              "protocol": "http",
              "auth": {},
              "host": [
                "{{host}}"
              ],
              "path": [
                "api",
                "jobs",
                ":id"
              ],
              "variable": [
                {
                  "value": "{{id}}",
                  "id": "id"
                }
              ]
            },
            "method": "DELETE",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "description": ""
              }
            ],
            "body": {},
            "description": "Remove a single job."
          },
          "response": []
        }
      ]
    },
    {
      "name": "municipalities",
      "description": "Municipality resource",
      "item": [
        {
          "name": "Municipalities listing",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
				"exec": [
					"/* Get response body and content type */",
					"var body = JSON.parse(responseBody);",
					"var contentType = postman.getResponseHeader(\"Content-Type\");",
					"",
					"/* Valid status codes for this resource */",
					"var statusCodes = [200, 400, 401, 403, 404, 422];",
					"",
					"/* JSON error response schema */",
					"var errorSchema = {",
					"    type: 'object',",
					"    required: ['error'],",
					"    properties: {",
					"        'error' : {",
					"            type: 'object',",
					"            required: [\"code\", \"message\"],",
					"            properties: {",
					"                'error': { type: 'integer' },",
					"                'message': { type: 'string' }",
					"            }",
					"        }",
					"    }",
					"};",
					"",
					"/* Success JSON message schema */",
					"var successSchema = {",
					"    type: 'object',",
					"    required: ['id'],",
					"    properties: {",
					"        'id' : { type: 'integer' }",
					"    }",
					"};",
					"",
					"",
					"/*",
					" * Basic tests",
					" */",
					"",
					"tests[\"Response time is less than 300ms\"] = (",
					"    responseTime < 300);",
					"",
					"tests[\"Content-Type is 'application/json'\"] = (",
					"    !!contentType && contentType.has(\"application/json\"));",
					"",
					"tests[\"Status code is valid\"] = (",
					"    statusCodes.indexOf(responseCode.code) >= 0);",
					"",
					"",
					"/*",
					" * Validate JSON responses",
					" */",
					"",
					"tests[\"Response is a JSON object\"] = tv4.validate(",
					"    body, {type: 'object'});",
					"",
					"if (responseCode.code >= 400 && responseCode.code < 422) {",
					"    tests[\"Response is a valid error object\"] = tv4.validate(",
					"        body, errorSchema);",
					"}",
					"",
					"if (responseCode.code === 200 && request.method !== 'GET') {",
					"    tests[\"Response is a valid success object\"] = tv4.validate(",
					"        body, successSchema);",
					"}"
				]
              }                                     
            }
          ],
          "request": {
            "url": "http://{{host}}/api/municipalities?limit={{limit}}&page={{page}}&sort[]={{sort}}&with[]={{with}}&search={{search}}",
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "description": ""
              }
            ],
            "body": {},
            "description": "Obtain a list of municipalities.\n\nParameters:\n\n    limit     Maximum number of results to fetch\n    page      Page of results to fetch\n    search    Restrict the results to the given search string\n    sort[]    Results order array\n    with[]    Array of related objects to fetch\n\nRelated objects that can be fetched:\n\n"
          },
          "response": []
        },
        {
          "name": "Retrieve a municipality",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
				"exec": [        
					"/* Get response body and content type */",
					"var body = JSON.parse(responseBody);",
					"var contentType = postman.getResponseHeader(\"Content-Type\");",
					"",
					"/* Valid status codes for this resource */",
					"var statusCodes = [200, 400, 401, 403, 404, 422];",
					"",
					"/* JSON error response schema */",
					"var errorSchema = {",
					"    type: 'object',",
					"    required: ['error'],",
					"    properties: {",
					"        'error' : {",
					"            type: 'object',",
					"            required: [\"code\", \"message\"],",
					"            properties: {",
					"                'error': { type: 'integer' },",
					"                'message': { type: 'string' }",
					"            }",
					"        }",
					"    }",
					"};",
					"",
					"/* Success JSON message schema */",
					"var successSchema = {",
					"    type: 'object',",
					"    required: ['id'],",
					"    properties: {",
					"        'id' : { type: 'integer' }",
					"    }",
					"};",
					"",
					"",
					"/*",
					" * Basic tests",
					" */",
					"",
					"tests[\"Response time is less than 300ms\"] = (",
					"    responseTime < 300);",
					"",
					"tests[\"Content-Type is 'application/json'\"] = (",
					"    !!contentType && contentType.has(\"application/json\"));",
					"",
					"tests[\"Status code is valid\"] = (",
					"    statusCodes.indexOf(responseCode.code) >= 0);",
					"",
					"",
					"/*",
					" * Validate JSON responses",
					" */",
					"",
					"tests[\"Response is a JSON object\"] = tv4.validate(",
					"    body, {type: 'object'});",
					"",
					"if (responseCode.code >= 400 && responseCode.code < 422) {",
					"    tests[\"Response is a valid error object\"] = tv4.validate(",
					"        body, errorSchema);",
					"}",
					"",
					"if (responseCode.code === 200 && request.method !== 'GET') {",
					"    tests[\"Response is a valid success object\"] = tv4.validate(",
					"        body, successSchema);",
					"}"
				]
              }
            }
          ],
          "request": {
            "url": {
              "raw": "http://{{host}}/api/municipalities/:id",
              "protocol": "http",
              "auth": {},
              "host": [
                "{{host}}"
              ],
              "path": [
                "api",
                "municipalities",
                ":id"
              ],
              "variable": [
                {
                  "id": "{{id}}",
                  "id": "id"
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "description": ""
              }
            ],
            "body": {},
            "description": "Retrieve a single municipality object."
          },
          "response": []
        },
        {
          "name": "Store a new municipality",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [       
					"/* Get response body and content type */",
					"var body = JSON.parse(responseBody);",
					"var contentType = postman.getResponseHeader(\"Content-Type\");",
					"",
					"/* Valid status codes for this resource */",
					"var statusCodes = [200, 400, 401, 403, 404, 422];",
					"",
					"/* JSON error response schema */",
					"var errorSchema = {",
					"    type: 'object',",
					"    required: ['error'],",
					"    properties: {",
					"        'error' : {",
					"            type: 'object',",
					"            required: [\"code\", \"message\"],",
					"            properties: {",
					"                'error': { type: 'integer' },",
					"                'message': { type: 'string' }",
					"            }",
					"        }",
					"    }",
					"};",
					"",
					"/* Success JSON message schema */",
					"var successSchema = {",
					"    type: 'object',",
					"    required: ['id'],",
					"    properties: {",
					"        'id' : { type: 'integer' }",
					"    }",
					"};",
					"",
					"",
					"/*",
					" * Basic tests",
					" */",
					"",
					"tests[\"Response time is less than 300ms\"] = (",
					"    responseTime < 300);",
					"",
					"tests[\"Content-Type is 'application/json'\"] = (",
					"    !!contentType && contentType.has(\"application/json\"));",
					"",
					"tests[\"Status code is valid\"] = (",
					"    statusCodes.indexOf(responseCode.code) >= 0);",
					"",
					"",
					"/*",
					" * Validate JSON responses",
					" */",
					"",
					"tests[\"Response is a JSON object\"] = tv4.validate(",
					"    body, {type: 'object'});",
					"",
					"if (responseCode.code >= 400 && responseCode.code < 422) {",
					"    tests[\"Response is a valid error object\"] = tv4.validate(",
					"        body, errorSchema);",
					"}",
					"",
					"if (responseCode.code === 200 && request.method !== 'GET') {",
					"    tests[\"Response is a valid success object\"] = tv4.validate(",
					"        body, successSchema);",
					"}"
				]
              }
            }
          ],
          "request": {
            "url": "http://{{host}}/api/municipalities",
            "method": "POST",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "description": ""
              }
            ],
            "body": {},
            "description": "Create a new municipality object."
          },
          "response": []
        },
        {
          "name": "Update a municipality",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
					"/* Get response body and content type */",
					"var body = JSON.parse(responseBody);",
					"var contentType = postman.getResponseHeader(\"Content-Type\");",
					"",
					"/* Valid status codes for this resource */",
					"var statusCodes = [200, 400, 401, 403, 404, 422];",
					"",
					"/* JSON error response schema */",
					"var errorSchema = {",
					"    type: 'object',",
					"    required: ['error'],",
					"    properties: {",
					"        'error' : {",
					"            type: 'object',",
					"            required: [\"code\", \"message\"],",
					"            properties: {",
					"                'error': { type: 'integer' },",
					"                'message': { type: 'string' }",
					"            }",
					"        }",
					"    }",
					"};",
					"",
					"/* Success JSON message schema */",
					"var successSchema = {",
					"    type: 'object',",
					"    required: ['id'],",
					"    properties: {",
					"        'id' : { type: 'integer' }",
					"    }",
					"};",
					"",
					"",
					"/*",
					" * Basic tests",
					" */",
					"",
					"tests[\"Response time is less than 300ms\"] = (",
					"    responseTime < 300);",
					"",
					"tests[\"Content-Type is 'application/json'\"] = (",
					"    !!contentType && contentType.has(\"application/json\"));",
					"",
					"tests[\"Status code is valid\"] = (",
					"    statusCodes.indexOf(responseCode.code) >= 0);",
					"",
					"",
					"/*",
					" * Validate JSON responses",
					" */",
					"",
					"tests[\"Response is a JSON object\"] = tv4.validate(",
					"    body, {type: 'object'});",
					"",
					"if (responseCode.code >= 400 && responseCode.code < 422) {",
					"    tests[\"Response is a valid error object\"] = tv4.validate(",
					"        body, errorSchema);",
					"}",
					"",
					"if (responseCode.code === 200 && request.method !== 'GET') {",
					"    tests[\"Response is a valid success object\"] = tv4.validate(",
					"        body, successSchema);",
					"}"
				]
              }
            }
          ],
          "request": {
            "url": {
              "raw": "http://{{host}}/api/municipalities/:id",
              "protocol": "http",
              "auth": {},
              "host": [
                "{{host}}"
              ],
              "path": [
                "api",
                "municipalities",
                ":id"
              ],
              "query": [
              ],
              "variable": [
                {
                  "id": "{{id}}",
                  "id": "id"
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
              ]
            },
            "description": "Update an existing municipality object."
          },
          "response": []
        },
        {
          "name": "Remove a municipality",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                ]
              }
            }
          ],
          "request": {
            "url": {
              "raw": "http://{{host}}/api/municipalities/:id",
              "protocol": "http",
              "auth": {},
              "host": [
                "{{host}}"
              ],
              "path": [
                "api",
                "municipalities",
                ":id"
              ],
              "variable": [
                {
                  "value": "{{id}}",
                  "id": "id"
                }
              ]
            },
            "method": "DELETE",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "description": ""
              }
            ],
            "body": {},
            "description": "Remove a single municipality."
          },
          "response": []
        }
      ]
    },
    {
      "name": "posts",
      "description": "Post resource",
      "item": [
        {
          "name": "Posts listing",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
				"exec": [
					"/* Get response body and content type */",
					"var body = JSON.parse(responseBody);",
					"var contentType = postman.getResponseHeader(\"Content-Type\");",
					"",
					"/* Valid status codes for this resource */",
					"var statusCodes = [200, 400, 401, 403, 404, 422];",
					"",
					"/* JSON error response schema */",
					"var errorSchema = {",
					"    type: 'object',",
					"    required: ['error'],",
					"    properties: {",
					"        'error' : {",
					"            type: 'object',",
					"            required: [\"code\", \"message\"],",
					"            properties: {",
					"                'error': { type: 'integer' },",
					"                'message': { type: 'string' }",
					"            }",
					"        }",
					"    }",
					"};",
					"",
					"/* Success JSON message schema */",
					"var successSchema = {",
					"    type: 'object',",
					"    required: ['id'],",
					"    properties: {",
					"        'id' : { type: 'integer' }",
					"    }",
					"};",
					"",
					"",
					"/*",
					" * Basic tests",
					" */",
					"",
					"tests[\"Response time is less than 300ms\"] = (",
					"    responseTime < 300);",
					"",
					"tests[\"Content-Type is 'application/json'\"] = (",
					"    !!contentType && contentType.has(\"application/json\"));",
					"",
					"tests[\"Status code is valid\"] = (",
					"    statusCodes.indexOf(responseCode.code) >= 0);",
					"",
					"",
					"/*",
					" * Validate JSON responses",
					" */",
					"",
					"tests[\"Response is a JSON object\"] = tv4.validate(",
					"    body, {type: 'object'});",
					"",
					"if (responseCode.code >= 400 && responseCode.code < 422) {",
					"    tests[\"Response is a valid error object\"] = tv4.validate(",
					"        body, errorSchema);",
					"}",
					"",
					"if (responseCode.code === 200 && request.method !== 'GET') {",
					"    tests[\"Response is a valid success object\"] = tv4.validate(",
					"        body, successSchema);",
					"}"
				]
              }                                     
            }
          ],
          "request": {
            "url": "http://{{host}}/api/posts?limit={{limit}}&page={{page}}&sort[]={{sort}}&with[]={{with}}&search={{search}}",
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "description": ""
              }
            ],
            "body": {},
            "description": "Obtain a list of posts.\n\nParameters:\n\n    limit     Maximum number of results to fetch\n    page      Page of results to fetch\n    search    Restrict the results to the given search string\n    sort[]    Results order array\n    with[]    Array of related objects to fetch\n\nRelated objects that can be fetched:\n\n    author    Author object\n    feed      Feed object\n"
          },
          "response": []
        },
        {
          "name": "Retrieve a post",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
				"exec": [        
					"/* Get response body and content type */",
					"var body = JSON.parse(responseBody);",
					"var contentType = postman.getResponseHeader(\"Content-Type\");",
					"",
					"/* Valid status codes for this resource */",
					"var statusCodes = [200, 400, 401, 403, 404, 422];",
					"",
					"/* JSON error response schema */",
					"var errorSchema = {",
					"    type: 'object',",
					"    required: ['error'],",
					"    properties: {",
					"        'error' : {",
					"            type: 'object',",
					"            required: [\"code\", \"message\"],",
					"            properties: {",
					"                'error': { type: 'integer' },",
					"                'message': { type: 'string' }",
					"            }",
					"        }",
					"    }",
					"};",
					"",
					"/* Success JSON message schema */",
					"var successSchema = {",
					"    type: 'object',",
					"    required: ['id'],",
					"    properties: {",
					"        'id' : { type: 'integer' }",
					"    }",
					"};",
					"",
					"",
					"/*",
					" * Basic tests",
					" */",
					"",
					"tests[\"Response time is less than 300ms\"] = (",
					"    responseTime < 300);",
					"",
					"tests[\"Content-Type is 'application/json'\"] = (",
					"    !!contentType && contentType.has(\"application/json\"));",
					"",
					"tests[\"Status code is valid\"] = (",
					"    statusCodes.indexOf(responseCode.code) >= 0);",
					"",
					"",
					"/*",
					" * Validate JSON responses",
					" */",
					"",
					"tests[\"Response is a JSON object\"] = tv4.validate(",
					"    body, {type: 'object'});",
					"",
					"if (responseCode.code >= 400 && responseCode.code < 422) {",
					"    tests[\"Response is a valid error object\"] = tv4.validate(",
					"        body, errorSchema);",
					"}",
					"",
					"if (responseCode.code === 200 && request.method !== 'GET') {",
					"    tests[\"Response is a valid success object\"] = tv4.validate(",
					"        body, successSchema);",
					"}"
				]
              }
            }
          ],
          "request": {
            "url": {
              "raw": "http://{{host}}/api/posts/:id",
              "protocol": "http",
              "auth": {},
              "host": [
                "{{host}}"
              ],
              "path": [
                "api",
                "posts",
                ":id"
              ],
              "variable": [
                {
                  "id": "{{id}}",
                  "id": "id"
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "description": ""
              }
            ],
            "body": {},
            "description": "Retrieve a single post object."
          },
          "response": []
        },
        {
          "name": "Store a new post",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [       
					"/* Get response body and content type */",
					"var body = JSON.parse(responseBody);",
					"var contentType = postman.getResponseHeader(\"Content-Type\");",
					"",
					"/* Valid status codes for this resource */",
					"var statusCodes = [200, 400, 401, 403, 404, 422];",
					"",
					"/* JSON error response schema */",
					"var errorSchema = {",
					"    type: 'object',",
					"    required: ['error'],",
					"    properties: {",
					"        'error' : {",
					"            type: 'object',",
					"            required: [\"code\", \"message\"],",
					"            properties: {",
					"                'error': { type: 'integer' },",
					"                'message': { type: 'string' }",
					"            }",
					"        }",
					"    }",
					"};",
					"",
					"/* Success JSON message schema */",
					"var successSchema = {",
					"    type: 'object',",
					"    required: ['id'],",
					"    properties: {",
					"        'id' : { type: 'integer' }",
					"    }",
					"};",
					"",
					"",
					"/*",
					" * Basic tests",
					" */",
					"",
					"tests[\"Response time is less than 300ms\"] = (",
					"    responseTime < 300);",
					"",
					"tests[\"Content-Type is 'application/json'\"] = (",
					"    !!contentType && contentType.has(\"application/json\"));",
					"",
					"tests[\"Status code is valid\"] = (",
					"    statusCodes.indexOf(responseCode.code) >= 0);",
					"",
					"",
					"/*",
					" * Validate JSON responses",
					" */",
					"",
					"tests[\"Response is a JSON object\"] = tv4.validate(",
					"    body, {type: 'object'});",
					"",
					"if (responseCode.code >= 400 && responseCode.code < 422) {",
					"    tests[\"Response is a valid error object\"] = tv4.validate(",
					"        body, errorSchema);",
					"}",
					"",
					"if (responseCode.code === 200 && request.method !== 'GET') {",
					"    tests[\"Response is a valid success object\"] = tv4.validate(",
					"        body, successSchema);",
					"}"
				]
              }
            }
          ],
          "request": {
            "url": "http://{{host}}/api/posts",
            "method": "POST",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "description": ""
              }
            ],
            "body": {},
            "description": "Create a new post object."
          },
          "response": []
        },
        {
          "name": "Restore a post",
          "request": {
            "url": {
              "raw": "http://{{host}}/api/posts/:id",
              "protocol": "http",
              "auth": {},
              "host": [
                "{{host}}"
              ],
              "path": [
                "api",
                "posts",
                ":id"
              ],
              "variable": [
                {
                  "value": "{{id}}",
                  "id": "id"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "description": ""
              }
            ],
            "body": {},
            "description": "Restore a soft-deleted post object."
          },
          "response": []
        },
        {
          "name": "Update a post",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
					"/* Get response body and content type */",
					"var body = JSON.parse(responseBody);",
					"var contentType = postman.getResponseHeader(\"Content-Type\");",
					"",
					"/* Valid status codes for this resource */",
					"var statusCodes = [200, 400, 401, 403, 404, 422];",
					"",
					"/* JSON error response schema */",
					"var errorSchema = {",
					"    type: 'object',",
					"    required: ['error'],",
					"    properties: {",
					"        'error' : {",
					"            type: 'object',",
					"            required: [\"code\", \"message\"],",
					"            properties: {",
					"                'error': { type: 'integer' },",
					"                'message': { type: 'string' }",
					"            }",
					"        }",
					"    }",
					"};",
					"",
					"/* Success JSON message schema */",
					"var successSchema = {",
					"    type: 'object',",
					"    required: ['id'],",
					"    properties: {",
					"        'id' : { type: 'integer' }",
					"    }",
					"};",
					"",
					"",
					"/*",
					" * Basic tests",
					" */",
					"",
					"tests[\"Response time is less than 300ms\"] = (",
					"    responseTime < 300);",
					"",
					"tests[\"Content-Type is 'application/json'\"] = (",
					"    !!contentType && contentType.has(\"application/json\"));",
					"",
					"tests[\"Status code is valid\"] = (",
					"    statusCodes.indexOf(responseCode.code) >= 0);",
					"",
					"",
					"/*",
					" * Validate JSON responses",
					" */",
					"",
					"tests[\"Response is a JSON object\"] = tv4.validate(",
					"    body, {type: 'object'});",
					"",
					"if (responseCode.code >= 400 && responseCode.code < 422) {",
					"    tests[\"Response is a valid error object\"] = tv4.validate(",
					"        body, errorSchema);",
					"}",
					"",
					"if (responseCode.code === 200 && request.method !== 'GET') {",
					"    tests[\"Response is a valid success object\"] = tv4.validate(",
					"        body, successSchema);",
					"}"
				]
              }
            }
          ],
          "request": {
            "url": {
              "raw": "http://{{host}}/api/posts/:id",
              "protocol": "http",
              "auth": {},
              "host": [
                "{{host}}"
              ],
              "path": [
                "api",
                "posts",
                ":id"
              ],
              "query": [
              ],
              "variable": [
                {
                  "id": "{{id}}",
                  "id": "id"
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
              ]
            },
            "description": "Update an existing post object."
          },
          "response": []
        },
        {
          "name": "Remove a post",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                ]
              }
            }
          ],
          "request": {
            "url": {
              "raw": "http://{{host}}/api/posts/:id",
              "protocol": "http",
              "auth": {},
              "host": [
                "{{host}}"
              ],
              "path": [
                "api",
                "posts",
                ":id"
              ],
              "variable": [
                {
                  "value": "{{id}}",
                  "id": "id"
                }
              ]
            },
            "method": "DELETE",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "description": ""
              }
            ],
            "body": {},
            "description": "Remove a single post."
          },
          "response": []
        }
      ]
    },
    {
      "name": "projects",
      "description": "Project resource",
      "item": [
        {
          "name": "Projects listing",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
				"exec": [
					"/* Get response body and content type */",
					"var body = JSON.parse(responseBody);",
					"var contentType = postman.getResponseHeader(\"Content-Type\");",
					"",
					"/* Valid status codes for this resource */",
					"var statusCodes = [200, 400, 401, 403, 404, 422];",
					"",
					"/* JSON error response schema */",
					"var errorSchema = {",
					"    type: 'object',",
					"    required: ['error'],",
					"    properties: {",
					"        'error' : {",
					"            type: 'object',",
					"            required: [\"code\", \"message\"],",
					"            properties: {",
					"                'error': { type: 'integer' },",
					"                'message': { type: 'string' }",
					"            }",
					"        }",
					"    }",
					"};",
					"",
					"/* Success JSON message schema */",
					"var successSchema = {",
					"    type: 'object',",
					"    required: ['id'],",
					"    properties: {",
					"        'id' : { type: 'integer' }",
					"    }",
					"};",
					"",
					"",
					"/*",
					" * Basic tests",
					" */",
					"",
					"tests[\"Response time is less than 300ms\"] = (",
					"    responseTime < 300);",
					"",
					"tests[\"Content-Type is 'application/json'\"] = (",
					"    !!contentType && contentType.has(\"application/json\"));",
					"",
					"tests[\"Status code is valid\"] = (",
					"    statusCodes.indexOf(responseCode.code) >= 0);",
					"",
					"",
					"/*",
					" * Validate JSON responses",
					" */",
					"",
					"tests[\"Response is a JSON object\"] = tv4.validate(",
					"    body, {type: 'object'});",
					"",
					"if (responseCode.code >= 400 && responseCode.code < 422) {",
					"    tests[\"Response is a valid error object\"] = tv4.validate(",
					"        body, errorSchema);",
					"}",
					"",
					"if (responseCode.code === 200 && request.method !== 'GET') {",
					"    tests[\"Response is a valid success object\"] = tv4.validate(",
					"        body, successSchema);",
					"}"
				]
              }                                     
            }
          ],
          "request": {
            "url": "http://{{host}}/api/projects?limit={{limit}}&page={{page}}&sort[]={{sort}}&with[]={{with}}&search={{search}}",
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "description": ""
              }
            ],
            "body": {},
            "description": "Obtain a list of projects.\n\nParameters:\n\n    limit     Maximum number of results to fetch\n    page      Page of results to fetch\n    search    Restrict the results to the given search string\n    sort[]    Results order array\n    with[]    Array of related objects to fetch\n\nRelated objects that can be fetched:\n\n"
          },
          "response": []
        },
        {
          "name": "Retrieve a project",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
				"exec": [        
					"/* Get response body and content type */",
					"var body = JSON.parse(responseBody);",
					"var contentType = postman.getResponseHeader(\"Content-Type\");",
					"",
					"/* Valid status codes for this resource */",
					"var statusCodes = [200, 400, 401, 403, 404, 422];",
					"",
					"/* JSON error response schema */",
					"var errorSchema = {",
					"    type: 'object',",
					"    required: ['error'],",
					"    properties: {",
					"        'error' : {",
					"            type: 'object',",
					"            required: [\"code\", \"message\"],",
					"            properties: {",
					"                'error': { type: 'integer' },",
					"                'message': { type: 'string' }",
					"            }",
					"        }",
					"    }",
					"};",
					"",
					"/* Success JSON message schema */",
					"var successSchema = {",
					"    type: 'object',",
					"    required: ['id'],",
					"    properties: {",
					"        'id' : { type: 'integer' }",
					"    }",
					"};",
					"",
					"",
					"/*",
					" * Basic tests",
					" */",
					"",
					"tests[\"Response time is less than 300ms\"] = (",
					"    responseTime < 300);",
					"",
					"tests[\"Content-Type is 'application/json'\"] = (",
					"    !!contentType && contentType.has(\"application/json\"));",
					"",
					"tests[\"Status code is valid\"] = (",
					"    statusCodes.indexOf(responseCode.code) >= 0);",
					"",
					"",
					"/*",
					" * Validate JSON responses",
					" */",
					"",
					"tests[\"Response is a JSON object\"] = tv4.validate(",
					"    body, {type: 'object'});",
					"",
					"if (responseCode.code >= 400 && responseCode.code < 422) {",
					"    tests[\"Response is a valid error object\"] = tv4.validate(",
					"        body, errorSchema);",
					"}",
					"",
					"if (responseCode.code === 200 && request.method !== 'GET') {",
					"    tests[\"Response is a valid success object\"] = tv4.validate(",
					"        body, successSchema);",
					"}"
				]
              }
            }
          ],
          "request": {
            "url": {
              "raw": "http://{{host}}/api/projects/:id",
              "protocol": "http",
              "auth": {},
              "host": [
                "{{host}}"
              ],
              "path": [
                "api",
                "projects",
                ":id"
              ],
              "variable": [
                {
                  "id": "{{id}}",
                  "id": "id"
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "description": ""
              }
            ],
            "body": {},
            "description": "Retrieve a single project object."
          },
          "response": []
        },
        {
          "name": "Store a new project",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [       
					"/* Get response body and content type */",
					"var body = JSON.parse(responseBody);",
					"var contentType = postman.getResponseHeader(\"Content-Type\");",
					"",
					"/* Valid status codes for this resource */",
					"var statusCodes = [200, 400, 401, 403, 404, 422];",
					"",
					"/* JSON error response schema */",
					"var errorSchema = {",
					"    type: 'object',",
					"    required: ['error'],",
					"    properties: {",
					"        'error' : {",
					"            type: 'object',",
					"            required: [\"code\", \"message\"],",
					"            properties: {",
					"                'error': { type: 'integer' },",
					"                'message': { type: 'string' }",
					"            }",
					"        }",
					"    }",
					"};",
					"",
					"/* Success JSON message schema */",
					"var successSchema = {",
					"    type: 'object',",
					"    required: ['id'],",
					"    properties: {",
					"        'id' : { type: 'integer' }",
					"    }",
					"};",
					"",
					"",
					"/*",
					" * Basic tests",
					" */",
					"",
					"tests[\"Response time is less than 300ms\"] = (",
					"    responseTime < 300);",
					"",
					"tests[\"Content-Type is 'application/json'\"] = (",
					"    !!contentType && contentType.has(\"application/json\"));",
					"",
					"tests[\"Status code is valid\"] = (",
					"    statusCodes.indexOf(responseCode.code) >= 0);",
					"",
					"",
					"/*",
					" * Validate JSON responses",
					" */",
					"",
					"tests[\"Response is a JSON object\"] = tv4.validate(",
					"    body, {type: 'object'});",
					"",
					"if (responseCode.code >= 400 && responseCode.code < 422) {",
					"    tests[\"Response is a valid error object\"] = tv4.validate(",
					"        body, errorSchema);",
					"}",
					"",
					"if (responseCode.code === 200 && request.method !== 'GET') {",
					"    tests[\"Response is a valid success object\"] = tv4.validate(",
					"        body, successSchema);",
					"}"
				]
              }
            }
          ],
          "request": {
            "url": "http://{{host}}/api/projects",
            "method": "POST",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "description": ""
              }
            ],
            "body": {},
            "description": "Create a new project object."
          },
          "response": []
        },
        {
          "name": "Update a project",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
					"/* Get response body and content type */",
					"var body = JSON.parse(responseBody);",
					"var contentType = postman.getResponseHeader(\"Content-Type\");",
					"",
					"/* Valid status codes for this resource */",
					"var statusCodes = [200, 400, 401, 403, 404, 422];",
					"",
					"/* JSON error response schema */",
					"var errorSchema = {",
					"    type: 'object',",
					"    required: ['error'],",
					"    properties: {",
					"        'error' : {",
					"            type: 'object',",
					"            required: [\"code\", \"message\"],",
					"            properties: {",
					"                'error': { type: 'integer' },",
					"                'message': { type: 'string' }",
					"            }",
					"        }",
					"    }",
					"};",
					"",
					"/* Success JSON message schema */",
					"var successSchema = {",
					"    type: 'object',",
					"    required: ['id'],",
					"    properties: {",
					"        'id' : { type: 'integer' }",
					"    }",
					"};",
					"",
					"",
					"/*",
					" * Basic tests",
					" */",
					"",
					"tests[\"Response time is less than 300ms\"] = (",
					"    responseTime < 300);",
					"",
					"tests[\"Content-Type is 'application/json'\"] = (",
					"    !!contentType && contentType.has(\"application/json\"));",
					"",
					"tests[\"Status code is valid\"] = (",
					"    statusCodes.indexOf(responseCode.code) >= 0);",
					"",
					"",
					"/*",
					" * Validate JSON responses",
					" */",
					"",
					"tests[\"Response is a JSON object\"] = tv4.validate(",
					"    body, {type: 'object'});",
					"",
					"if (responseCode.code >= 400 && responseCode.code < 422) {",
					"    tests[\"Response is a valid error object\"] = tv4.validate(",
					"        body, errorSchema);",
					"}",
					"",
					"if (responseCode.code === 200 && request.method !== 'GET') {",
					"    tests[\"Response is a valid success object\"] = tv4.validate(",
					"        body, successSchema);",
					"}"
				]
              }
            }
          ],
          "request": {
            "url": {
              "raw": "http://{{host}}/api/projects/:id",
              "protocol": "http",
              "auth": {},
              "host": [
                "{{host}}"
              ],
              "path": [
                "api",
                "projects",
                ":id"
              ],
              "query": [
              ],
              "variable": [
                {
                  "id": "{{id}}",
                  "id": "id"
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
              ]
            },
            "description": "Update an existing project object."
          },
          "response": []
        },
        {
          "name": "Remove a project",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                ]
              }
            }
          ],
          "request": {
            "url": {
              "raw": "http://{{host}}/api/projects/:id",
              "protocol": "http",
              "auth": {},
              "host": [
                "{{host}}"
              ],
              "path": [
                "api",
                "projects",
                ":id"
              ],
              "variable": [
                {
                  "value": "{{id}}",
                  "id": "id"
                }
              ]
            },
            "method": "DELETE",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "description": ""
              }
            ],
            "body": {},
            "description": "Remove a single project."
          },
          "response": []
        }
      ]
    },
    {
      "name": "schools",
      "description": "School resource",
      "item": [
        {
          "name": "Schools listing",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
				"exec": [
					"/* Get response body and content type */",
					"var body = JSON.parse(responseBody);",
					"var contentType = postman.getResponseHeader(\"Content-Type\");",
					"",
					"/* Valid status codes for this resource */",
					"var statusCodes = [200, 400, 401, 403, 404, 422];",
					"",
					"/* JSON error response schema */",
					"var errorSchema = {",
					"    type: 'object',",
					"    required: ['error'],",
					"    properties: {",
					"        'error' : {",
					"            type: 'object',",
					"            required: [\"code\", \"message\"],",
					"            properties: {",
					"                'error': { type: 'integer' },",
					"                'message': { type: 'string' }",
					"            }",
					"        }",
					"    }",
					"};",
					"",
					"/* Success JSON message schema */",
					"var successSchema = {",
					"    type: 'object',",
					"    required: ['id'],",
					"    properties: {",
					"        'id' : { type: 'integer' }",
					"    }",
					"};",
					"",
					"",
					"/*",
					" * Basic tests",
					" */",
					"",
					"tests[\"Response time is less than 300ms\"] = (",
					"    responseTime < 300);",
					"",
					"tests[\"Content-Type is 'application/json'\"] = (",
					"    !!contentType && contentType.has(\"application/json\"));",
					"",
					"tests[\"Status code is valid\"] = (",
					"    statusCodes.indexOf(responseCode.code) >= 0);",
					"",
					"",
					"/*",
					" * Validate JSON responses",
					" */",
					"",
					"tests[\"Response is a JSON object\"] = tv4.validate(",
					"    body, {type: 'object'});",
					"",
					"if (responseCode.code >= 400 && responseCode.code < 422) {",
					"    tests[\"Response is a valid error object\"] = tv4.validate(",
					"        body, errorSchema);",
					"}",
					"",
					"if (responseCode.code === 200 && request.method !== 'GET') {",
					"    tests[\"Response is a valid success object\"] = tv4.validate(",
					"        body, successSchema);",
					"}"
				]
              }                                     
            }
          ],
          "request": {
            "url": "http://{{host}}/api/schools?limit={{limit}}&page={{page}}&sort[]={{sort}}&with[]={{with}}&search={{search}}",
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "description": ""
              }
            ],
            "body": {},
            "description": "Obtain a list of schools.\n\nParameters:\n\n    limit     Maximum number of results to fetch\n    page      Page of results to fetch\n    search    Restrict the results to the given search string\n    sort[]    Results order array\n    with[]    Array of related objects to fetch\n\nRelated objects that can be fetched:\n\n"
          },
          "response": []
        },
        {
          "name": "Retrieve a school",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
				"exec": [        
					"/* Get response body and content type */",
					"var body = JSON.parse(responseBody);",
					"var contentType = postman.getResponseHeader(\"Content-Type\");",
					"",
					"/* Valid status codes for this resource */",
					"var statusCodes = [200, 400, 401, 403, 404, 422];",
					"",
					"/* JSON error response schema */",
					"var errorSchema = {",
					"    type: 'object',",
					"    required: ['error'],",
					"    properties: {",
					"        'error' : {",
					"            type: 'object',",
					"            required: [\"code\", \"message\"],",
					"            properties: {",
					"                'error': { type: 'integer' },",
					"                'message': { type: 'string' }",
					"            }",
					"        }",
					"    }",
					"};",
					"",
					"/* Success JSON message schema */",
					"var successSchema = {",
					"    type: 'object',",
					"    required: ['id'],",
					"    properties: {",
					"        'id' : { type: 'integer' }",
					"    }",
					"};",
					"",
					"",
					"/*",
					" * Basic tests",
					" */",
					"",
					"tests[\"Response time is less than 300ms\"] = (",
					"    responseTime < 300);",
					"",
					"tests[\"Content-Type is 'application/json'\"] = (",
					"    !!contentType && contentType.has(\"application/json\"));",
					"",
					"tests[\"Status code is valid\"] = (",
					"    statusCodes.indexOf(responseCode.code) >= 0);",
					"",
					"",
					"/*",
					" * Validate JSON responses",
					" */",
					"",
					"tests[\"Response is a JSON object\"] = tv4.validate(",
					"    body, {type: 'object'});",
					"",
					"if (responseCode.code >= 400 && responseCode.code < 422) {",
					"    tests[\"Response is a valid error object\"] = tv4.validate(",
					"        body, errorSchema);",
					"}",
					"",
					"if (responseCode.code === 200 && request.method !== 'GET') {",
					"    tests[\"Response is a valid success object\"] = tv4.validate(",
					"        body, successSchema);",
					"}"
				]
              }
            }
          ],
          "request": {
            "url": {
              "raw": "http://{{host}}/api/schools/:id",
              "protocol": "http",
              "auth": {},
              "host": [
                "{{host}}"
              ],
              "path": [
                "api",
                "schools",
                ":id"
              ],
              "variable": [
                {
                  "id": "{{id}}",
                  "id": "id"
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "description": ""
              }
            ],
            "body": {},
            "description": "Retrieve a single school object."
          },
          "response": []
        },
        {
          "name": "Store a new school",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [       
					"/* Get response body and content type */",
					"var body = JSON.parse(responseBody);",
					"var contentType = postman.getResponseHeader(\"Content-Type\");",
					"",
					"/* Valid status codes for this resource */",
					"var statusCodes = [200, 400, 401, 403, 404, 422];",
					"",
					"/* JSON error response schema */",
					"var errorSchema = {",
					"    type: 'object',",
					"    required: ['error'],",
					"    properties: {",
					"        'error' : {",
					"            type: 'object',",
					"            required: [\"code\", \"message\"],",
					"            properties: {",
					"                'error': { type: 'integer' },",
					"                'message': { type: 'string' }",
					"            }",
					"        }",
					"    }",
					"};",
					"",
					"/* Success JSON message schema */",
					"var successSchema = {",
					"    type: 'object',",
					"    required: ['id'],",
					"    properties: {",
					"        'id' : { type: 'integer' }",
					"    }",
					"};",
					"",
					"",
					"/*",
					" * Basic tests",
					" */",
					"",
					"tests[\"Response time is less than 300ms\"] = (",
					"    responseTime < 300);",
					"",
					"tests[\"Content-Type is 'application/json'\"] = (",
					"    !!contentType && contentType.has(\"application/json\"));",
					"",
					"tests[\"Status code is valid\"] = (",
					"    statusCodes.indexOf(responseCode.code) >= 0);",
					"",
					"",
					"/*",
					" * Validate JSON responses",
					" */",
					"",
					"tests[\"Response is a JSON object\"] = tv4.validate(",
					"    body, {type: 'object'});",
					"",
					"if (responseCode.code >= 400 && responseCode.code < 422) {",
					"    tests[\"Response is a valid error object\"] = tv4.validate(",
					"        body, errorSchema);",
					"}",
					"",
					"if (responseCode.code === 200 && request.method !== 'GET') {",
					"    tests[\"Response is a valid success object\"] = tv4.validate(",
					"        body, successSchema);",
					"}"
				]
              }
            }
          ],
          "request": {
            "url": "http://{{host}}/api/schools",
            "method": "POST",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "description": ""
              }
            ],
            "body": {},
            "description": "Create a new school object."
          },
          "response": []
        },
        {
          "name": "Update a school",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
					"/* Get response body and content type */",
					"var body = JSON.parse(responseBody);",
					"var contentType = postman.getResponseHeader(\"Content-Type\");",
					"",
					"/* Valid status codes for this resource */",
					"var statusCodes = [200, 400, 401, 403, 404, 422];",
					"",
					"/* JSON error response schema */",
					"var errorSchema = {",
					"    type: 'object',",
					"    required: ['error'],",
					"    properties: {",
					"        'error' : {",
					"            type: 'object',",
					"            required: [\"code\", \"message\"],",
					"            properties: {",
					"                'error': { type: 'integer' },",
					"                'message': { type: 'string' }",
					"            }",
					"        }",
					"    }",
					"};",
					"",
					"/* Success JSON message schema */",
					"var successSchema = {",
					"    type: 'object',",
					"    required: ['id'],",
					"    properties: {",
					"        'id' : { type: 'integer' }",
					"    }",
					"};",
					"",
					"",
					"/*",
					" * Basic tests",
					" */",
					"",
					"tests[\"Response time is less than 300ms\"] = (",
					"    responseTime < 300);",
					"",
					"tests[\"Content-Type is 'application/json'\"] = (",
					"    !!contentType && contentType.has(\"application/json\"));",
					"",
					"tests[\"Status code is valid\"] = (",
					"    statusCodes.indexOf(responseCode.code) >= 0);",
					"",
					"",
					"/*",
					" * Validate JSON responses",
					" */",
					"",
					"tests[\"Response is a JSON object\"] = tv4.validate(",
					"    body, {type: 'object'});",
					"",
					"if (responseCode.code >= 400 && responseCode.code < 422) {",
					"    tests[\"Response is a valid error object\"] = tv4.validate(",
					"        body, errorSchema);",
					"}",
					"",
					"if (responseCode.code === 200 && request.method !== 'GET') {",
					"    tests[\"Response is a valid success object\"] = tv4.validate(",
					"        body, successSchema);",
					"}"
				]
              }
            }
          ],
          "request": {
            "url": {
              "raw": "http://{{host}}/api/schools/:id",
              "protocol": "http",
              "auth": {},
              "host": [
                "{{host}}"
              ],
              "path": [
                "api",
                "schools",
                ":id"
              ],
              "query": [
              ],
              "variable": [
                {
                  "id": "{{id}}",
                  "id": "id"
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
              ]
            },
            "description": "Update an existing school object."
          },
          "response": []
        },
        {
          "name": "Remove a school",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                ]
              }
            }
          ],
          "request": {
            "url": {
              "raw": "http://{{host}}/api/schools/:id",
              "protocol": "http",
              "auth": {},
              "host": [
                "{{host}}"
              ],
              "path": [
                "api",
                "schools",
                ":id"
              ],
              "variable": [
                {
                  "value": "{{id}}",
                  "id": "id"
                }
              ]
            },
            "method": "DELETE",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "description": ""
              }
            ],
            "body": {},
            "description": "Remove a single school."
          },
          "response": []
        }
      ]
    },
    {
      "name": "sessions",
      "description": "Session resource",
      "item": [
        {
          "name": "Sessions listing",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
				"exec": [
					"/* Get response body and content type */",
					"var body = JSON.parse(responseBody);",
					"var contentType = postman.getResponseHeader(\"Content-Type\");",
					"",
					"/* Valid status codes for this resource */",
					"var statusCodes = [200, 400, 401, 403, 404, 422];",
					"",
					"/* JSON error response schema */",
					"var errorSchema = {",
					"    type: 'object',",
					"    required: ['error'],",
					"    properties: {",
					"        'error' : {",
					"            type: 'object',",
					"            required: [\"code\", \"message\"],",
					"            properties: {",
					"                'error': { type: 'integer' },",
					"                'message': { type: 'string' }",
					"            }",
					"        }",
					"    }",
					"};",
					"",
					"/* Success JSON message schema */",
					"var successSchema = {",
					"    type: 'object',",
					"    required: ['id'],",
					"    properties: {",
					"        'id' : { type: 'integer' }",
					"    }",
					"};",
					"",
					"",
					"/*",
					" * Basic tests",
					" */",
					"",
					"tests[\"Response time is less than 300ms\"] = (",
					"    responseTime < 300);",
					"",
					"tests[\"Content-Type is 'application/json'\"] = (",
					"    !!contentType && contentType.has(\"application/json\"));",
					"",
					"tests[\"Status code is valid\"] = (",
					"    statusCodes.indexOf(responseCode.code) >= 0);",
					"",
					"",
					"/*",
					" * Validate JSON responses",
					" */",
					"",
					"tests[\"Response is a JSON object\"] = tv4.validate(",
					"    body, {type: 'object'});",
					"",
					"if (responseCode.code >= 400 && responseCode.code < 422) {",
					"    tests[\"Response is a valid error object\"] = tv4.validate(",
					"        body, errorSchema);",
					"}",
					"",
					"if (responseCode.code === 200 && request.method !== 'GET') {",
					"    tests[\"Response is a valid success object\"] = tv4.validate(",
					"        body, successSchema);",
					"}"
				]
              }                                     
            }
          ],
          "request": {
            "url": "http://{{host}}/api/sessions?limit={{limit}}&page={{page}}&sort[]={{sort}}&with[]={{with}}&search={{search}}",
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "description": ""
              }
            ],
            "body": {},
            "description": "Obtain a list of sessions.\n\nParameters:\n\n    limit     Maximum number of results to fetch\n    page      Page of results to fetch\n    search    Restrict the results to the given search string\n    sort[]    Results order array\n    with[]    Array of related objects to fetch\n\nRelated objects that can be fetched:\n\n"
          },
          "response": []
        },
        {
          "name": "Retrieve a session",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
				"exec": [        
					"/* Get response body and content type */",
					"var body = JSON.parse(responseBody);",
					"var contentType = postman.getResponseHeader(\"Content-Type\");",
					"",
					"/* Valid status codes for this resource */",
					"var statusCodes = [200, 400, 401, 403, 404, 422];",
					"",
					"/* JSON error response schema */",
					"var errorSchema = {",
					"    type: 'object',",
					"    required: ['error'],",
					"    properties: {",
					"        'error' : {",
					"            type: 'object',",
					"            required: [\"code\", \"message\"],",
					"            properties: {",
					"                'error': { type: 'integer' },",
					"                'message': { type: 'string' }",
					"            }",
					"        }",
					"    }",
					"};",
					"",
					"/* Success JSON message schema */",
					"var successSchema = {",
					"    type: 'object',",
					"    required: ['id'],",
					"    properties: {",
					"        'id' : { type: 'integer' }",
					"    }",
					"};",
					"",
					"",
					"/*",
					" * Basic tests",
					" */",
					"",
					"tests[\"Response time is less than 300ms\"] = (",
					"    responseTime < 300);",
					"",
					"tests[\"Content-Type is 'application/json'\"] = (",
					"    !!contentType && contentType.has(\"application/json\"));",
					"",
					"tests[\"Status code is valid\"] = (",
					"    statusCodes.indexOf(responseCode.code) >= 0);",
					"",
					"",
					"/*",
					" * Validate JSON responses",
					" */",
					"",
					"tests[\"Response is a JSON object\"] = tv4.validate(",
					"    body, {type: 'object'});",
					"",
					"if (responseCode.code >= 400 && responseCode.code < 422) {",
					"    tests[\"Response is a valid error object\"] = tv4.validate(",
					"        body, errorSchema);",
					"}",
					"",
					"if (responseCode.code === 200 && request.method !== 'GET') {",
					"    tests[\"Response is a valid success object\"] = tv4.validate(",
					"        body, successSchema);",
					"}"
				]
              }
            }
          ],
          "request": {
            "url": {
              "raw": "http://{{host}}/api/sessions/:id",
              "protocol": "http",
              "auth": {},
              "host": [
                "{{host}}"
              ],
              "path": [
                "api",
                "sessions",
                ":id"
              ],
              "variable": [
                {
                  "id": "{{id}}",
                  "id": "id"
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "description": ""
              }
            ],
            "body": {},
            "description": "Retrieve a single session object."
          },
          "response": []
        },
        {
          "name": "Store a new session",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [       
					"/* Get response body and content type */",
					"var body = JSON.parse(responseBody);",
					"var contentType = postman.getResponseHeader(\"Content-Type\");",
					"",
					"/* Valid status codes for this resource */",
					"var statusCodes = [200, 400, 401, 403, 404, 422];",
					"",
					"/* JSON error response schema */",
					"var errorSchema = {",
					"    type: 'object',",
					"    required: ['error'],",
					"    properties: {",
					"        'error' : {",
					"            type: 'object',",
					"            required: [\"code\", \"message\"],",
					"            properties: {",
					"                'error': { type: 'integer' },",
					"                'message': { type: 'string' }",
					"            }",
					"        }",
					"    }",
					"};",
					"",
					"/* Success JSON message schema */",
					"var successSchema = {",
					"    type: 'object',",
					"    required: ['id'],",
					"    properties: {",
					"        'id' : { type: 'integer' }",
					"    }",
					"};",
					"",
					"",
					"/*",
					" * Basic tests",
					" */",
					"",
					"tests[\"Response time is less than 300ms\"] = (",
					"    responseTime < 300);",
					"",
					"tests[\"Content-Type is 'application/json'\"] = (",
					"    !!contentType && contentType.has(\"application/json\"));",
					"",
					"tests[\"Status code is valid\"] = (",
					"    statusCodes.indexOf(responseCode.code) >= 0);",
					"",
					"",
					"/*",
					" * Validate JSON responses",
					" */",
					"",
					"tests[\"Response is a JSON object\"] = tv4.validate(",
					"    body, {type: 'object'});",
					"",
					"if (responseCode.code >= 400 && responseCode.code < 422) {",
					"    tests[\"Response is a valid error object\"] = tv4.validate(",
					"        body, errorSchema);",
					"}",
					"",
					"if (responseCode.code === 200 && request.method !== 'GET') {",
					"    tests[\"Response is a valid success object\"] = tv4.validate(",
					"        body, successSchema);",
					"}"
				]
              }
            }
          ],
          "request": {
            "url": "http://{{host}}/api/sessions",
            "method": "POST",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "description": ""
              }
            ],
            "body": {},
            "description": "Create a new session object."
          },
          "response": []
        },
        {
          "name": "Update a session",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
					"/* Get response body and content type */",
					"var body = JSON.parse(responseBody);",
					"var contentType = postman.getResponseHeader(\"Content-Type\");",
					"",
					"/* Valid status codes for this resource */",
					"var statusCodes = [200, 400, 401, 403, 404, 422];",
					"",
					"/* JSON error response schema */",
					"var errorSchema = {",
					"    type: 'object',",
					"    required: ['error'],",
					"    properties: {",
					"        'error' : {",
					"            type: 'object',",
					"            required: [\"code\", \"message\"],",
					"            properties: {",
					"                'error': { type: 'integer' },",
					"                'message': { type: 'string' }",
					"            }",
					"        }",
					"    }",
					"};",
					"",
					"/* Success JSON message schema */",
					"var successSchema = {",
					"    type: 'object',",
					"    required: ['id'],",
					"    properties: {",
					"        'id' : { type: 'integer' }",
					"    }",
					"};",
					"",
					"",
					"/*",
					" * Basic tests",
					" */",
					"",
					"tests[\"Response time is less than 300ms\"] = (",
					"    responseTime < 300);",
					"",
					"tests[\"Content-Type is 'application/json'\"] = (",
					"    !!contentType && contentType.has(\"application/json\"));",
					"",
					"tests[\"Status code is valid\"] = (",
					"    statusCodes.indexOf(responseCode.code) >= 0);",
					"",
					"",
					"/*",
					" * Validate JSON responses",
					" */",
					"",
					"tests[\"Response is a JSON object\"] = tv4.validate(",
					"    body, {type: 'object'});",
					"",
					"if (responseCode.code >= 400 && responseCode.code < 422) {",
					"    tests[\"Response is a valid error object\"] = tv4.validate(",
					"        body, errorSchema);",
					"}",
					"",
					"if (responseCode.code === 200 && request.method !== 'GET') {",
					"    tests[\"Response is a valid success object\"] = tv4.validate(",
					"        body, successSchema);",
					"}"
				]
              }
            }
          ],
          "request": {
            "url": {
              "raw": "http://{{host}}/api/sessions/:id",
              "protocol": "http",
              "auth": {},
              "host": [
                "{{host}}"
              ],
              "path": [
                "api",
                "sessions",
                ":id"
              ],
              "query": [
              ],
              "variable": [
                {
                  "id": "{{id}}",
                  "id": "id"
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
              ]
            },
            "description": "Update an existing session object."
          },
          "response": []
        },
        {
          "name": "Remove a session",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                ]
              }
            }
          ],
          "request": {
            "url": {
              "raw": "http://{{host}}/api/sessions/:id",
              "protocol": "http",
              "auth": {},
              "host": [
                "{{host}}"
              ],
              "path": [
                "api",
                "sessions",
                ":id"
              ],
              "variable": [
                {
                  "value": "{{id}}",
                  "id": "id"
                }
              ]
            },
            "method": "DELETE",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "description": ""
              }
            ],
            "body": {},
            "description": "Remove a single session."
          },
          "response": []
        }
      ]
    },
    {
      "name": "synapses",
      "description": "Synapse resource",
      "item": [
        {
          "name": "Synapses listing",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
				"exec": [
					"/* Get response body and content type */",
					"var body = JSON.parse(responseBody);",
					"var contentType = postman.getResponseHeader(\"Content-Type\");",
					"",
					"/* Valid status codes for this resource */",
					"var statusCodes = [200, 400, 401, 403, 404, 422];",
					"",
					"/* JSON error response schema */",
					"var errorSchema = {",
					"    type: 'object',",
					"    required: ['error'],",
					"    properties: {",
					"        'error' : {",
					"            type: 'object',",
					"            required: [\"code\", \"message\"],",
					"            properties: {",
					"                'error': { type: 'integer' },",
					"                'message': { type: 'string' }",
					"            }",
					"        }",
					"    }",
					"};",
					"",
					"/* Success JSON message schema */",
					"var successSchema = {",
					"    type: 'object',",
					"    required: ['id'],",
					"    properties: {",
					"        'id' : { type: 'integer' }",
					"    }",
					"};",
					"",
					"",
					"/*",
					" * Basic tests",
					" */",
					"",
					"tests[\"Response time is less than 300ms\"] = (",
					"    responseTime < 300);",
					"",
					"tests[\"Content-Type is 'application/json'\"] = (",
					"    !!contentType && contentType.has(\"application/json\"));",
					"",
					"tests[\"Status code is valid\"] = (",
					"    statusCodes.indexOf(responseCode.code) >= 0);",
					"",
					"",
					"/*",
					" * Validate JSON responses",
					" */",
					"",
					"tests[\"Response is a JSON object\"] = tv4.validate(",
					"    body, {type: 'object'});",
					"",
					"if (responseCode.code >= 400 && responseCode.code < 422) {",
					"    tests[\"Response is a valid error object\"] = tv4.validate(",
					"        body, errorSchema);",
					"}",
					"",
					"if (responseCode.code === 200 && request.method !== 'GET') {",
					"    tests[\"Response is a valid success object\"] = tv4.validate(",
					"        body, successSchema);",
					"}"
				]
              }                                     
            }
          ],
          "request": {
            "url": "http://{{host}}/api/synapses?limit={{limit}}&page={{page}}&sort[]={{sort}}&with[]={{with}}&search={{search}}",
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "description": ""
              }
            ],
            "body": {},
            "description": "Obtain a list of synapses.\n\nParameters:\n\n    limit     Maximum number of results to fetch\n    page      Page of results to fetch\n    search    Restrict the results to the given search string\n    sort[]    Results order array\n    with[]    Array of related objects to fetch\n\nRelated objects that can be fetched:\n\n"
          },
          "response": []
        },
        {
          "name": "Retrieve a synapse",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
				"exec": [        
					"/* Get response body and content type */",
					"var body = JSON.parse(responseBody);",
					"var contentType = postman.getResponseHeader(\"Content-Type\");",
					"",
					"/* Valid status codes for this resource */",
					"var statusCodes = [200, 400, 401, 403, 404, 422];",
					"",
					"/* JSON error response schema */",
					"var errorSchema = {",
					"    type: 'object',",
					"    required: ['error'],",
					"    properties: {",
					"        'error' : {",
					"            type: 'object',",
					"            required: [\"code\", \"message\"],",
					"            properties: {",
					"                'error': { type: 'integer' },",
					"                'message': { type: 'string' }",
					"            }",
					"        }",
					"    }",
					"};",
					"",
					"/* Success JSON message schema */",
					"var successSchema = {",
					"    type: 'object',",
					"    required: ['id'],",
					"    properties: {",
					"        'id' : { type: 'integer' }",
					"    }",
					"};",
					"",
					"",
					"/*",
					" * Basic tests",
					" */",
					"",
					"tests[\"Response time is less than 300ms\"] = (",
					"    responseTime < 300);",
					"",
					"tests[\"Content-Type is 'application/json'\"] = (",
					"    !!contentType && contentType.has(\"application/json\"));",
					"",
					"tests[\"Status code is valid\"] = (",
					"    statusCodes.indexOf(responseCode.code) >= 0);",
					"",
					"",
					"/*",
					" * Validate JSON responses",
					" */",
					"",
					"tests[\"Response is a JSON object\"] = tv4.validate(",
					"    body, {type: 'object'});",
					"",
					"if (responseCode.code >= 400 && responseCode.code < 422) {",
					"    tests[\"Response is a valid error object\"] = tv4.validate(",
					"        body, errorSchema);",
					"}",
					"",
					"if (responseCode.code === 200 && request.method !== 'GET') {",
					"    tests[\"Response is a valid success object\"] = tv4.validate(",
					"        body, successSchema);",
					"}"
				]
              }
            }
          ],
          "request": {
            "url": {
              "raw": "http://{{host}}/api/synapses/:id",
              "protocol": "http",
              "auth": {},
              "host": [
                "{{host}}"
              ],
              "path": [
                "api",
                "synapses",
                ":id"
              ],
              "variable": [
                {
                  "id": "{{id}}",
                  "id": "id"
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "description": ""
              }
            ],
            "body": {},
            "description": "Retrieve a single synapse object."
          },
          "response": []
        },
        {
          "name": "Store a new synapse",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [       
					"/* Get response body and content type */",
					"var body = JSON.parse(responseBody);",
					"var contentType = postman.getResponseHeader(\"Content-Type\");",
					"",
					"/* Valid status codes for this resource */",
					"var statusCodes = [200, 400, 401, 403, 404, 422];",
					"",
					"/* JSON error response schema */",
					"var errorSchema = {",
					"    type: 'object',",
					"    required: ['error'],",
					"    properties: {",
					"        'error' : {",
					"            type: 'object',",
					"            required: [\"code\", \"message\"],",
					"            properties: {",
					"                'error': { type: 'integer' },",
					"                'message': { type: 'string' }",
					"            }",
					"        }",
					"    }",
					"};",
					"",
					"/* Success JSON message schema */",
					"var successSchema = {",
					"    type: 'object',",
					"    required: ['id'],",
					"    properties: {",
					"        'id' : { type: 'integer' }",
					"    }",
					"};",
					"",
					"",
					"/*",
					" * Basic tests",
					" */",
					"",
					"tests[\"Response time is less than 300ms\"] = (",
					"    responseTime < 300);",
					"",
					"tests[\"Content-Type is 'application/json'\"] = (",
					"    !!contentType && contentType.has(\"application/json\"));",
					"",
					"tests[\"Status code is valid\"] = (",
					"    statusCodes.indexOf(responseCode.code) >= 0);",
					"",
					"",
					"/*",
					" * Validate JSON responses",
					" */",
					"",
					"tests[\"Response is a JSON object\"] = tv4.validate(",
					"    body, {type: 'object'});",
					"",
					"if (responseCode.code >= 400 && responseCode.code < 422) {",
					"    tests[\"Response is a valid error object\"] = tv4.validate(",
					"        body, errorSchema);",
					"}",
					"",
					"if (responseCode.code === 200 && request.method !== 'GET') {",
					"    tests[\"Response is a valid success object\"] = tv4.validate(",
					"        body, successSchema);",
					"}"
				]
              }
            }
          ],
          "request": {
            "url": "http://{{host}}/api/synapses",
            "method": "POST",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "description": ""
              }
            ],
            "body": {},
            "description": "Create a new synapse object."
          },
          "response": []
        },
        {
          "name": "Update a synapse",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
					"/* Get response body and content type */",
					"var body = JSON.parse(responseBody);",
					"var contentType = postman.getResponseHeader(\"Content-Type\");",
					"",
					"/* Valid status codes for this resource */",
					"var statusCodes = [200, 400, 401, 403, 404, 422];",
					"",
					"/* JSON error response schema */",
					"var errorSchema = {",
					"    type: 'object',",
					"    required: ['error'],",
					"    properties: {",
					"        'error' : {",
					"            type: 'object',",
					"            required: [\"code\", \"message\"],",
					"            properties: {",
					"                'error': { type: 'integer' },",
					"                'message': { type: 'string' }",
					"            }",
					"        }",
					"    }",
					"};",
					"",
					"/* Success JSON message schema */",
					"var successSchema = {",
					"    type: 'object',",
					"    required: ['id'],",
					"    properties: {",
					"        'id' : { type: 'integer' }",
					"    }",
					"};",
					"",
					"",
					"/*",
					" * Basic tests",
					" */",
					"",
					"tests[\"Response time is less than 300ms\"] = (",
					"    responseTime < 300);",
					"",
					"tests[\"Content-Type is 'application/json'\"] = (",
					"    !!contentType && contentType.has(\"application/json\"));",
					"",
					"tests[\"Status code is valid\"] = (",
					"    statusCodes.indexOf(responseCode.code) >= 0);",
					"",
					"",
					"/*",
					" * Validate JSON responses",
					" */",
					"",
					"tests[\"Response is a JSON object\"] = tv4.validate(",
					"    body, {type: 'object'});",
					"",
					"if (responseCode.code >= 400 && responseCode.code < 422) {",
					"    tests[\"Response is a valid error object\"] = tv4.validate(",
					"        body, errorSchema);",
					"}",
					"",
					"if (responseCode.code === 200 && request.method !== 'GET') {",
					"    tests[\"Response is a valid success object\"] = tv4.validate(",
					"        body, successSchema);",
					"}"
				]
              }
            }
          ],
          "request": {
            "url": {
              "raw": "http://{{host}}/api/synapses/:id",
              "protocol": "http",
              "auth": {},
              "host": [
                "{{host}}"
              ],
              "path": [
                "api",
                "synapses",
                ":id"
              ],
              "query": [
              ],
              "variable": [
                {
                  "id": "{{id}}",
                  "id": "id"
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
              ]
            },
            "description": "Update an existing synapse object."
          },
          "response": []
        },
        {
          "name": "Remove a synapse",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                ]
              }
            }
          ],
          "request": {
            "url": {
              "raw": "http://{{host}}/api/synapses/:id",
              "protocol": "http",
              "auth": {},
              "host": [
                "{{host}}"
              ],
              "path": [
                "api",
                "synapses",
                ":id"
              ],
              "variable": [
                {
                  "value": "{{id}}",
                  "id": "id"
                }
              ]
            },
            "method": "DELETE",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "description": ""
              }
            ],
            "body": {},
            "description": "Remove a single synapse."
          },
          "response": []
        }
      ]
    },
    {
      "name": "tags",
      "description": "Tag resource",
      "item": [
        {
          "name": "Tags listing",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
				"exec": [
					"/* Get response body and content type */",
					"var body = JSON.parse(responseBody);",
					"var contentType = postman.getResponseHeader(\"Content-Type\");",
					"",
					"/* Valid status codes for this resource */",
					"var statusCodes = [200, 400, 401, 403, 404, 422];",
					"",
					"/* JSON error response schema */",
					"var errorSchema = {",
					"    type: 'object',",
					"    required: ['error'],",
					"    properties: {",
					"        'error' : {",
					"            type: 'object',",
					"            required: [\"code\", \"message\"],",
					"            properties: {",
					"                'error': { type: 'integer' },",
					"                'message': { type: 'string' }",
					"            }",
					"        }",
					"    }",
					"};",
					"",
					"/* Success JSON message schema */",
					"var successSchema = {",
					"    type: 'object',",
					"    required: ['id'],",
					"    properties: {",
					"        'id' : { type: 'integer' }",
					"    }",
					"};",
					"",
					"",
					"/*",
					" * Basic tests",
					" */",
					"",
					"tests[\"Response time is less than 300ms\"] = (",
					"    responseTime < 300);",
					"",
					"tests[\"Content-Type is 'application/json'\"] = (",
					"    !!contentType && contentType.has(\"application/json\"));",
					"",
					"tests[\"Status code is valid\"] = (",
					"    statusCodes.indexOf(responseCode.code) >= 0);",
					"",
					"",
					"/*",
					" * Validate JSON responses",
					" */",
					"",
					"tests[\"Response is a JSON object\"] = tv4.validate(",
					"    body, {type: 'object'});",
					"",
					"if (responseCode.code >= 400 && responseCode.code < 422) {",
					"    tests[\"Response is a valid error object\"] = tv4.validate(",
					"        body, errorSchema);",
					"}",
					"",
					"if (responseCode.code === 200 && request.method !== 'GET') {",
					"    tests[\"Response is a valid success object\"] = tv4.validate(",
					"        body, successSchema);",
					"}"
				]
              }                                     
            }
          ],
          "request": {
            "url": "http://{{host}}/api/tags?limit={{limit}}&page={{page}}&sort[]={{sort}}&with[]={{with}}&search={{search}}",
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "description": ""
              }
            ],
            "body": {},
            "description": "Obtain a list of tags.\n\nParameters:\n\n    limit     Maximum number of results to fetch\n    page      Page of results to fetch\n    search    Restrict the results to the given search string\n    sort[]    Results order array\n    with[]    Array of related objects to fetch\n\nRelated objects that can be fetched:\n\n    synapse   Synapse object\n"
          },
          "response": []
        },
        {
          "name": "Retrieve a tag",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
				"exec": [        
					"/* Get response body and content type */",
					"var body = JSON.parse(responseBody);",
					"var contentType = postman.getResponseHeader(\"Content-Type\");",
					"",
					"/* Valid status codes for this resource */",
					"var statusCodes = [200, 400, 401, 403, 404, 422];",
					"",
					"/* JSON error response schema */",
					"var errorSchema = {",
					"    type: 'object',",
					"    required: ['error'],",
					"    properties: {",
					"        'error' : {",
					"            type: 'object',",
					"            required: [\"code\", \"message\"],",
					"            properties: {",
					"                'error': { type: 'integer' },",
					"                'message': { type: 'string' }",
					"            }",
					"        }",
					"    }",
					"};",
					"",
					"/* Success JSON message schema */",
					"var successSchema = {",
					"    type: 'object',",
					"    required: ['id'],",
					"    properties: {",
					"        'id' : { type: 'integer' }",
					"    }",
					"};",
					"",
					"",
					"/*",
					" * Basic tests",
					" */",
					"",
					"tests[\"Response time is less than 300ms\"] = (",
					"    responseTime < 300);",
					"",
					"tests[\"Content-Type is 'application/json'\"] = (",
					"    !!contentType && contentType.has(\"application/json\"));",
					"",
					"tests[\"Status code is valid\"] = (",
					"    statusCodes.indexOf(responseCode.code) >= 0);",
					"",
					"",
					"/*",
					" * Validate JSON responses",
					" */",
					"",
					"tests[\"Response is a JSON object\"] = tv4.validate(",
					"    body, {type: 'object'});",
					"",
					"if (responseCode.code >= 400 && responseCode.code < 422) {",
					"    tests[\"Response is a valid error object\"] = tv4.validate(",
					"        body, errorSchema);",
					"}",
					"",
					"if (responseCode.code === 200 && request.method !== 'GET') {",
					"    tests[\"Response is a valid success object\"] = tv4.validate(",
					"        body, successSchema);",
					"}"
				]
              }
            }
          ],
          "request": {
            "url": {
              "raw": "http://{{host}}/api/tags/:id",
              "protocol": "http",
              "auth": {},
              "host": [
                "{{host}}"
              ],
              "path": [
                "api",
                "tags",
                ":id"
              ],
              "variable": [
                {
                  "id": "{{id}}",
                  "id": "id"
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "description": ""
              }
            ],
            "body": {},
            "description": "Retrieve a single tag object."
          },
          "response": []
        },
        {
          "name": "Store a new tag",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [       
					"/* Get response body and content type */",
					"var body = JSON.parse(responseBody);",
					"var contentType = postman.getResponseHeader(\"Content-Type\");",
					"",
					"/* Valid status codes for this resource */",
					"var statusCodes = [200, 400, 401, 403, 404, 422];",
					"",
					"/* JSON error response schema */",
					"var errorSchema = {",
					"    type: 'object',",
					"    required: ['error'],",
					"    properties: {",
					"        'error' : {",
					"            type: 'object',",
					"            required: [\"code\", \"message\"],",
					"            properties: {",
					"                'error': { type: 'integer' },",
					"                'message': { type: 'string' }",
					"            }",
					"        }",
					"    }",
					"};",
					"",
					"/* Success JSON message schema */",
					"var successSchema = {",
					"    type: 'object',",
					"    required: ['id'],",
					"    properties: {",
					"        'id' : { type: 'integer' }",
					"    }",
					"};",
					"",
					"",
					"/*",
					" * Basic tests",
					" */",
					"",
					"tests[\"Response time is less than 300ms\"] = (",
					"    responseTime < 300);",
					"",
					"tests[\"Content-Type is 'application/json'\"] = (",
					"    !!contentType && contentType.has(\"application/json\"));",
					"",
					"tests[\"Status code is valid\"] = (",
					"    statusCodes.indexOf(responseCode.code) >= 0);",
					"",
					"",
					"/*",
					" * Validate JSON responses",
					" */",
					"",
					"tests[\"Response is a JSON object\"] = tv4.validate(",
					"    body, {type: 'object'});",
					"",
					"if (responseCode.code >= 400 && responseCode.code < 422) {",
					"    tests[\"Response is a valid error object\"] = tv4.validate(",
					"        body, errorSchema);",
					"}",
					"",
					"if (responseCode.code === 200 && request.method !== 'GET') {",
					"    tests[\"Response is a valid success object\"] = tv4.validate(",
					"        body, successSchema);",
					"}"
				]
              }
            }
          ],
          "request": {
            "url": "http://{{host}}/api/tags",
            "method": "POST",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "description": ""
              }
            ],
            "body": {},
            "description": "Create a new tag object."
          },
          "response": []
        },
        {
          "name": "Update a tag",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
					"/* Get response body and content type */",
					"var body = JSON.parse(responseBody);",
					"var contentType = postman.getResponseHeader(\"Content-Type\");",
					"",
					"/* Valid status codes for this resource */",
					"var statusCodes = [200, 400, 401, 403, 404, 422];",
					"",
					"/* JSON error response schema */",
					"var errorSchema = {",
					"    type: 'object',",
					"    required: ['error'],",
					"    properties: {",
					"        'error' : {",
					"            type: 'object',",
					"            required: [\"code\", \"message\"],",
					"            properties: {",
					"                'error': { type: 'integer' },",
					"                'message': { type: 'string' }",
					"            }",
					"        }",
					"    }",
					"};",
					"",
					"/* Success JSON message schema */",
					"var successSchema = {",
					"    type: 'object',",
					"    required: ['id'],",
					"    properties: {",
					"        'id' : { type: 'integer' }",
					"    }",
					"};",
					"",
					"",
					"/*",
					" * Basic tests",
					" */",
					"",
					"tests[\"Response time is less than 300ms\"] = (",
					"    responseTime < 300);",
					"",
					"tests[\"Content-Type is 'application/json'\"] = (",
					"    !!contentType && contentType.has(\"application/json\"));",
					"",
					"tests[\"Status code is valid\"] = (",
					"    statusCodes.indexOf(responseCode.code) >= 0);",
					"",
					"",
					"/*",
					" * Validate JSON responses",
					" */",
					"",
					"tests[\"Response is a JSON object\"] = tv4.validate(",
					"    body, {type: 'object'});",
					"",
					"if (responseCode.code >= 400 && responseCode.code < 422) {",
					"    tests[\"Response is a valid error object\"] = tv4.validate(",
					"        body, errorSchema);",
					"}",
					"",
					"if (responseCode.code === 200 && request.method !== 'GET') {",
					"    tests[\"Response is a valid success object\"] = tv4.validate(",
					"        body, successSchema);",
					"}"
				]
              }
            }
          ],
          "request": {
            "url": {
              "raw": "http://{{host}}/api/tags/:id",
              "protocol": "http",
              "auth": {},
              "host": [
                "{{host}}"
              ],
              "path": [
                "api",
                "tags",
                ":id"
              ],
              "query": [
              ],
              "variable": [
                {
                  "id": "{{id}}",
                  "id": "id"
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
              ]
            },
            "description": "Update an existing tag object."
          },
          "response": []
        },
        {
          "name": "Remove a tag",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                ]
              }
            }
          ],
          "request": {
            "url": {
              "raw": "http://{{host}}/api/tags/:id",
              "protocol": "http",
              "auth": {},
              "host": [
                "{{host}}"
              ],
              "path": [
                "api",
                "tags",
                ":id"
              ],
              "variable": [
                {
                  "value": "{{id}}",
                  "id": "id"
                }
              ]
            },
            "method": "DELETE",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "description": ""
              }
            ],
            "body": {},
            "description": "Remove a single tag."
          },
          "response": []
        }
      ]
    },
    {
      "name": "territories",
      "description": "Territory resource",
      "item": [
        {
          "name": "Territories listing",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
				"exec": [
					"/* Get response body and content type */",
					"var body = JSON.parse(responseBody);",
					"var contentType = postman.getResponseHeader(\"Content-Type\");",
					"",
					"/* Valid status codes for this resource */",
					"var statusCodes = [200, 400, 401, 403, 404, 422];",
					"",
					"/* JSON error response schema */",
					"var errorSchema = {",
					"    type: 'object',",
					"    required: ['error'],",
					"    properties: {",
					"        'error' : {",
					"            type: 'object',",
					"            required: [\"code\", \"message\"],",
					"            properties: {",
					"                'error': { type: 'integer' },",
					"                'message': { type: 'string' }",
					"            }",
					"        }",
					"    }",
					"};",
					"",
					"/* Success JSON message schema */",
					"var successSchema = {",
					"    type: 'object',",
					"    required: ['id'],",
					"    properties: {",
					"        'id' : { type: 'integer' }",
					"    }",
					"};",
					"",
					"",
					"/*",
					" * Basic tests",
					" */",
					"",
					"tests[\"Response time is less than 300ms\"] = (",
					"    responseTime < 300);",
					"",
					"tests[\"Content-Type is 'application/json'\"] = (",
					"    !!contentType && contentType.has(\"application/json\"));",
					"",
					"tests[\"Status code is valid\"] = (",
					"    statusCodes.indexOf(responseCode.code) >= 0);",
					"",
					"",
					"/*",
					" * Validate JSON responses",
					" */",
					"",
					"tests[\"Response is a JSON object\"] = tv4.validate(",
					"    body, {type: 'object'});",
					"",
					"if (responseCode.code >= 400 && responseCode.code < 422) {",
					"    tests[\"Response is a valid error object\"] = tv4.validate(",
					"        body, errorSchema);",
					"}",
					"",
					"if (responseCode.code === 200 && request.method !== 'GET') {",
					"    tests[\"Response is a valid success object\"] = tv4.validate(",
					"        body, successSchema);",
					"}"
				]
              }                                     
            }
          ],
          "request": {
            "url": "http://{{host}}/api/territories?limit={{limit}}&page={{page}}&sort[]={{sort}}&with[]={{with}}&search={{search}}",
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "description": ""
              }
            ],
            "body": {},
            "description": "Obtain a list of territories.\n\nParameters:\n\n    limit     Maximum number of results to fetch\n    page      Page of results to fetch\n    search    Restrict the results to the given search string\n    sort[]    Results order array\n    with[]    Array of related objects to fetch\n\nRelated objects that can be fetched:\n\n"
          },
          "response": []
        },
        {
          "name": "Retrieve a territory",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
				"exec": [        
					"/* Get response body and content type */",
					"var body = JSON.parse(responseBody);",
					"var contentType = postman.getResponseHeader(\"Content-Type\");",
					"",
					"/* Valid status codes for this resource */",
					"var statusCodes = [200, 400, 401, 403, 404, 422];",
					"",
					"/* JSON error response schema */",
					"var errorSchema = {",
					"    type: 'object',",
					"    required: ['error'],",
					"    properties: {",
					"        'error' : {",
					"            type: 'object',",
					"            required: [\"code\", \"message\"],",
					"            properties: {",
					"                'error': { type: 'integer' },",
					"                'message': { type: 'string' }",
					"            }",
					"        }",
					"    }",
					"};",
					"",
					"/* Success JSON message schema */",
					"var successSchema = {",
					"    type: 'object',",
					"    required: ['id'],",
					"    properties: {",
					"        'id' : { type: 'integer' }",
					"    }",
					"};",
					"",
					"",
					"/*",
					" * Basic tests",
					" */",
					"",
					"tests[\"Response time is less than 300ms\"] = (",
					"    responseTime < 300);",
					"",
					"tests[\"Content-Type is 'application/json'\"] = (",
					"    !!contentType && contentType.has(\"application/json\"));",
					"",
					"tests[\"Status code is valid\"] = (",
					"    statusCodes.indexOf(responseCode.code) >= 0);",
					"",
					"",
					"/*",
					" * Validate JSON responses",
					" */",
					"",
					"tests[\"Response is a JSON object\"] = tv4.validate(",
					"    body, {type: 'object'});",
					"",
					"if (responseCode.code >= 400 && responseCode.code < 422) {",
					"    tests[\"Response is a valid error object\"] = tv4.validate(",
					"        body, errorSchema);",
					"}",
					"",
					"if (responseCode.code === 200 && request.method !== 'GET') {",
					"    tests[\"Response is a valid success object\"] = tv4.validate(",
					"        body, successSchema);",
					"}"
				]
              }
            }
          ],
          "request": {
            "url": {
              "raw": "http://{{host}}/api/territories/:id",
              "protocol": "http",
              "auth": {},
              "host": [
                "{{host}}"
              ],
              "path": [
                "api",
                "territories",
                ":id"
              ],
              "variable": [
                {
                  "id": "{{id}}",
                  "id": "id"
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "description": ""
              }
            ],
            "body": {},
            "description": "Retrieve a single territory object."
          },
          "response": []
        },
        {
          "name": "Store a new territory",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [       
					"/* Get response body and content type */",
					"var body = JSON.parse(responseBody);",
					"var contentType = postman.getResponseHeader(\"Content-Type\");",
					"",
					"/* Valid status codes for this resource */",
					"var statusCodes = [200, 400, 401, 403, 404, 422];",
					"",
					"/* JSON error response schema */",
					"var errorSchema = {",
					"    type: 'object',",
					"    required: ['error'],",
					"    properties: {",
					"        'error' : {",
					"            type: 'object',",
					"            required: [\"code\", \"message\"],",
					"            properties: {",
					"                'error': { type: 'integer' },",
					"                'message': { type: 'string' }",
					"            }",
					"        }",
					"    }",
					"};",
					"",
					"/* Success JSON message schema */",
					"var successSchema = {",
					"    type: 'object',",
					"    required: ['id'],",
					"    properties: {",
					"        'id' : { type: 'integer' }",
					"    }",
					"};",
					"",
					"",
					"/*",
					" * Basic tests",
					" */",
					"",
					"tests[\"Response time is less than 300ms\"] = (",
					"    responseTime < 300);",
					"",
					"tests[\"Content-Type is 'application/json'\"] = (",
					"    !!contentType && contentType.has(\"application/json\"));",
					"",
					"tests[\"Status code is valid\"] = (",
					"    statusCodes.indexOf(responseCode.code) >= 0);",
					"",
					"",
					"/*",
					" * Validate JSON responses",
					" */",
					"",
					"tests[\"Response is a JSON object\"] = tv4.validate(",
					"    body, {type: 'object'});",
					"",
					"if (responseCode.code >= 400 && responseCode.code < 422) {",
					"    tests[\"Response is a valid error object\"] = tv4.validate(",
					"        body, errorSchema);",
					"}",
					"",
					"if (responseCode.code === 200 && request.method !== 'GET') {",
					"    tests[\"Response is a valid success object\"] = tv4.validate(",
					"        body, successSchema);",
					"}"
				]
              }
            }
          ],
          "request": {
            "url": "http://{{host}}/api/territories",
            "method": "POST",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "description": ""
              }
            ],
            "body": {},
            "description": "Create a new territory object."
          },
          "response": []
        },
        {
          "name": "Update a territory",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
					"/* Get response body and content type */",
					"var body = JSON.parse(responseBody);",
					"var contentType = postman.getResponseHeader(\"Content-Type\");",
					"",
					"/* Valid status codes for this resource */",
					"var statusCodes = [200, 400, 401, 403, 404, 422];",
					"",
					"/* JSON error response schema */",
					"var errorSchema = {",
					"    type: 'object',",
					"    required: ['error'],",
					"    properties: {",
					"        'error' : {",
					"            type: 'object',",
					"            required: [\"code\", \"message\"],",
					"            properties: {",
					"                'error': { type: 'integer' },",
					"                'message': { type: 'string' }",
					"            }",
					"        }",
					"    }",
					"};",
					"",
					"/* Success JSON message schema */",
					"var successSchema = {",
					"    type: 'object',",
					"    required: ['id'],",
					"    properties: {",
					"        'id' : { type: 'integer' }",
					"    }",
					"};",
					"",
					"",
					"/*",
					" * Basic tests",
					" */",
					"",
					"tests[\"Response time is less than 300ms\"] = (",
					"    responseTime < 300);",
					"",
					"tests[\"Content-Type is 'application/json'\"] = (",
					"    !!contentType && contentType.has(\"application/json\"));",
					"",
					"tests[\"Status code is valid\"] = (",
					"    statusCodes.indexOf(responseCode.code) >= 0);",
					"",
					"",
					"/*",
					" * Validate JSON responses",
					" */",
					"",
					"tests[\"Response is a JSON object\"] = tv4.validate(",
					"    body, {type: 'object'});",
					"",
					"if (responseCode.code >= 400 && responseCode.code < 422) {",
					"    tests[\"Response is a valid error object\"] = tv4.validate(",
					"        body, errorSchema);",
					"}",
					"",
					"if (responseCode.code === 200 && request.method !== 'GET') {",
					"    tests[\"Response is a valid success object\"] = tv4.validate(",
					"        body, successSchema);",
					"}"
				]
              }
            }
          ],
          "request": {
            "url": {
              "raw": "http://{{host}}/api/territories/:id",
              "protocol": "http",
              "auth": {},
              "host": [
                "{{host}}"
              ],
              "path": [
                "api",
                "territories",
                ":id"
              ],
              "query": [
              ],
              "variable": [
                {
                  "id": "{{id}}",
                  "id": "id"
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
              ]
            },
            "description": "Update an existing territory object."
          },
          "response": []
        },
        {
          "name": "Remove a territory",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                ]
              }
            }
          ],
          "request": {
            "url": {
              "raw": "http://{{host}}/api/territories/:id",
              "protocol": "http",
              "auth": {},
              "host": [
                "{{host}}"
              ],
              "path": [
                "api",
                "territories",
                ":id"
              ],
              "variable": [
                {
                  "value": "{{id}}",
                  "id": "id"
                }
              ]
            },
            "method": "DELETE",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "description": ""
              }
            ],
            "body": {},
            "description": "Remove a single territory."
          },
          "response": []
        }
      ]
    },
    {
      "name": "users",
      "description": "User resource",
      "item": [
        {
          "name": "Users listing",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
				"exec": [
					"/* Get response body and content type */",
					"var body = JSON.parse(responseBody);",
					"var contentType = postman.getResponseHeader(\"Content-Type\");",
					"",
					"/* Valid status codes for this resource */",
					"var statusCodes = [200, 400, 401, 403, 404, 422];",
					"",
					"/* JSON error response schema */",
					"var errorSchema = {",
					"    type: 'object',",
					"    required: ['error'],",
					"    properties: {",
					"        'error' : {",
					"            type: 'object',",
					"            required: [\"code\", \"message\"],",
					"            properties: {",
					"                'error': { type: 'integer' },",
					"                'message': { type: 'string' }",
					"            }",
					"        }",
					"    }",
					"};",
					"",
					"/* Success JSON message schema */",
					"var successSchema = {",
					"    type: 'object',",
					"    required: ['id'],",
					"    properties: {",
					"        'id' : { type: 'integer' }",
					"    }",
					"};",
					"",
					"",
					"/*",
					" * Basic tests",
					" */",
					"",
					"tests[\"Response time is less than 300ms\"] = (",
					"    responseTime < 300);",
					"",
					"tests[\"Content-Type is 'application/json'\"] = (",
					"    !!contentType && contentType.has(\"application/json\"));",
					"",
					"tests[\"Status code is valid\"] = (",
					"    statusCodes.indexOf(responseCode.code) >= 0);",
					"",
					"",
					"/*",
					" * Validate JSON responses",
					" */",
					"",
					"tests[\"Response is a JSON object\"] = tv4.validate(",
					"    body, {type: 'object'});",
					"",
					"if (responseCode.code >= 400 && responseCode.code < 422) {",
					"    tests[\"Response is a valid error object\"] = tv4.validate(",
					"        body, errorSchema);",
					"}",
					"",
					"if (responseCode.code === 200 && request.method !== 'GET') {",
					"    tests[\"Response is a valid success object\"] = tv4.validate(",
					"        body, successSchema);",
					"}"
				]
              }                                     
            }
          ],
          "request": {
            "url": "http://{{host}}/api/users?limit={{limit}}&page={{page}}&sort[]={{sort}}&with[]={{with}}&search={{search}}",
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "description": ""
              }
            ],
            "body": {},
            "description": "Obtain a list of users.\n\nParameters:\n\n    limit     Maximum number of results to fetch\n    page      Page of results to fetch\n    search    Restrict the results to the given search string\n    sort[]    Results order array\n    with[]    Array of related objects to fetch\n\nRelated objects that can be fetched:\n\n"
          },
          "response": []
        },
        {
          "name": "Retrieve a user",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
				"exec": [        
					"/* Get response body and content type */",
					"var body = JSON.parse(responseBody);",
					"var contentType = postman.getResponseHeader(\"Content-Type\");",
					"",
					"/* Valid status codes for this resource */",
					"var statusCodes = [200, 400, 401, 403, 404, 422];",
					"",
					"/* JSON error response schema */",
					"var errorSchema = {",
					"    type: 'object',",
					"    required: ['error'],",
					"    properties: {",
					"        'error' : {",
					"            type: 'object',",
					"            required: [\"code\", \"message\"],",
					"            properties: {",
					"                'error': { type: 'integer' },",
					"                'message': { type: 'string' }",
					"            }",
					"        }",
					"    }",
					"};",
					"",
					"/* Success JSON message schema */",
					"var successSchema = {",
					"    type: 'object',",
					"    required: ['id'],",
					"    properties: {",
					"        'id' : { type: 'integer' }",
					"    }",
					"};",
					"",
					"",
					"/*",
					" * Basic tests",
					" */",
					"",
					"tests[\"Response time is less than 300ms\"] = (",
					"    responseTime < 300);",
					"",
					"tests[\"Content-Type is 'application/json'\"] = (",
					"    !!contentType && contentType.has(\"application/json\"));",
					"",
					"tests[\"Status code is valid\"] = (",
					"    statusCodes.indexOf(responseCode.code) >= 0);",
					"",
					"",
					"/*",
					" * Validate JSON responses",
					" */",
					"",
					"tests[\"Response is a JSON object\"] = tv4.validate(",
					"    body, {type: 'object'});",
					"",
					"if (responseCode.code >= 400 && responseCode.code < 422) {",
					"    tests[\"Response is a valid error object\"] = tv4.validate(",
					"        body, errorSchema);",
					"}",
					"",
					"if (responseCode.code === 200 && request.method !== 'GET') {",
					"    tests[\"Response is a valid success object\"] = tv4.validate(",
					"        body, successSchema);",
					"}"
				]
              }
            }
          ],
          "request": {
            "url": {
              "raw": "http://{{host}}/api/users/:id",
              "protocol": "http",
              "auth": {},
              "host": [
                "{{host}}"
              ],
              "path": [
                "api",
                "users",
                ":id"
              ],
              "variable": [
                {
                  "id": "{{id}}",
                  "id": "id"
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "description": ""
              }
            ],
            "body": {},
            "description": "Retrieve a single user object."
          },
          "response": []
        },
        {
          "name": "Store a new user",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [       
					"/* Get response body and content type */",
					"var body = JSON.parse(responseBody);",
					"var contentType = postman.getResponseHeader(\"Content-Type\");",
					"",
					"/* Valid status codes for this resource */",
					"var statusCodes = [200, 400, 401, 403, 404, 422];",
					"",
					"/* JSON error response schema */",
					"var errorSchema = {",
					"    type: 'object',",
					"    required: ['error'],",
					"    properties: {",
					"        'error' : {",
					"            type: 'object',",
					"            required: [\"code\", \"message\"],",
					"            properties: {",
					"                'error': { type: 'integer' },",
					"                'message': { type: 'string' }",
					"            }",
					"        }",
					"    }",
					"};",
					"",
					"/* Success JSON message schema */",
					"var successSchema = {",
					"    type: 'object',",
					"    required: ['id'],",
					"    properties: {",
					"        'id' : { type: 'integer' }",
					"    }",
					"};",
					"",
					"",
					"/*",
					" * Basic tests",
					" */",
					"",
					"tests[\"Response time is less than 300ms\"] = (",
					"    responseTime < 300);",
					"",
					"tests[\"Content-Type is 'application/json'\"] = (",
					"    !!contentType && contentType.has(\"application/json\"));",
					"",
					"tests[\"Status code is valid\"] = (",
					"    statusCodes.indexOf(responseCode.code) >= 0);",
					"",
					"",
					"/*",
					" * Validate JSON responses",
					" */",
					"",
					"tests[\"Response is a JSON object\"] = tv4.validate(",
					"    body, {type: 'object'});",
					"",
					"if (responseCode.code >= 400 && responseCode.code < 422) {",
					"    tests[\"Response is a valid error object\"] = tv4.validate(",
					"        body, errorSchema);",
					"}",
					"",
					"if (responseCode.code === 200 && request.method !== 'GET') {",
					"    tests[\"Response is a valid success object\"] = tv4.validate(",
					"        body, successSchema);",
					"}"
				]
              }
            }
          ],
          "request": {
            "url": "http://{{host}}/api/users",
            "method": "POST",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "description": ""
              }
            ],
            "body": {},
            "description": "Create a new user object."
          },
          "response": []
        },
        {
          "name": "Restore a user",
          "request": {
            "url": {
              "raw": "http://{{host}}/api/users/:id",
              "protocol": "http",
              "auth": {},
              "host": [
                "{{host}}"
              ],
              "path": [
                "api",
                "users",
                ":id"
              ],
              "variable": [
                {
                  "value": "{{id}}",
                  "id": "id"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "description": ""
              }
            ],
            "body": {},
            "description": "Restore a soft-deleted user object."
          },
          "response": []
        },
        {
          "name": "Update a user",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
					"/* Get response body and content type */",
					"var body = JSON.parse(responseBody);",
					"var contentType = postman.getResponseHeader(\"Content-Type\");",
					"",
					"/* Valid status codes for this resource */",
					"var statusCodes = [200, 400, 401, 403, 404, 422];",
					"",
					"/* JSON error response schema */",
					"var errorSchema = {",
					"    type: 'object',",
					"    required: ['error'],",
					"    properties: {",
					"        'error' : {",
					"            type: 'object',",
					"            required: [\"code\", \"message\"],",
					"            properties: {",
					"                'error': { type: 'integer' },",
					"                'message': { type: 'string' }",
					"            }",
					"        }",
					"    }",
					"};",
					"",
					"/* Success JSON message schema */",
					"var successSchema = {",
					"    type: 'object',",
					"    required: ['id'],",
					"    properties: {",
					"        'id' : { type: 'integer' }",
					"    }",
					"};",
					"",
					"",
					"/*",
					" * Basic tests",
					" */",
					"",
					"tests[\"Response time is less than 300ms\"] = (",
					"    responseTime < 300);",
					"",
					"tests[\"Content-Type is 'application/json'\"] = (",
					"    !!contentType && contentType.has(\"application/json\"));",
					"",
					"tests[\"Status code is valid\"] = (",
					"    statusCodes.indexOf(responseCode.code) >= 0);",
					"",
					"",
					"/*",
					" * Validate JSON responses",
					" */",
					"",
					"tests[\"Response is a JSON object\"] = tv4.validate(",
					"    body, {type: 'object'});",
					"",
					"if (responseCode.code >= 400 && responseCode.code < 422) {",
					"    tests[\"Response is a valid error object\"] = tv4.validate(",
					"        body, errorSchema);",
					"}",
					"",
					"if (responseCode.code === 200 && request.method !== 'GET') {",
					"    tests[\"Response is a valid success object\"] = tv4.validate(",
					"        body, successSchema);",
					"}"
				]
              }
            }
          ],
          "request": {
            "url": {
              "raw": "http://{{host}}/api/users/:id",
              "protocol": "http",
              "auth": {},
              "host": [
                "{{host}}"
              ],
              "path": [
                "api",
                "users",
                ":id"
              ],
              "query": [
              ],
              "variable": [
                {
                  "id": "{{id}}",
                  "id": "id"
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
              ]
            },
            "description": "Update an existing user object."
          },
          "response": []
        },
        {
          "name": "Remove a user",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                ]
              }
            }
          ],
          "request": {
            "url": {
              "raw": "http://{{host}}/api/users/:id",
              "protocol": "http",
              "auth": {},
              "host": [
                "{{host}}"
              ],
              "path": [
                "api",
                "users",
                ":id"
              ],
              "variable": [
                {
                  "value": "{{id}}",
                  "id": "id"
                }
              ]
            },
            "method": "DELETE",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "description": ""
              }
            ],
            "body": {},
            "description": "Remove a single user."
          },
          "response": []
        }
      ]
    }
  ]
}

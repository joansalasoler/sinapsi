{
	"info": {
		"name": "Sinapsi",
		"_postman_id": "5e6e1d96-97d4-275a-4362-4ede957b01e2",
		"description": "",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "AUTHENTICATION",
			"item": [
				{
					"name": "accounts",
					"item": [
						{
							"name": "Log out from the app",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"/* Get response body and content type */",
											"var body = JSON.parse(responseBody);",
											"var contentType = postman.getResponseHeader(\"Content-Type\");",
											"",
											"/* Valid status codes for this resource */",
											"var statusCodes = [200, 400, 401, 403, 404, 422];",
											"",
											"/* JSON error response schema */",
											"var errorSchema = {",
											"    type: 'object',",
											"    required: ['status', 'message'],",
											"    properties: {",
											"        'status' : {",
											"            type: 'number'",
											"        },",
											"        'message' : {",
											"            type: 'string'",
											"        },",
											"        'errors' : {",
											"            type: 'object',",
											"            required: [\"code\", \"message\"],",
											"        }",
											"    }",
											"};",
											"",
											"/* Success JSON message schema */",
											"var successSchema = {",
											"    type: 'object',",
											"    required: ['id'],",
											"    properties: {",
											"        'id' : { type: 'integer' }",
											"    }",
											"};",
											"",
											"",
											"/*",
											" * Basic tests",
											" */",
											"",
											"tests[\"Response time is less than 300ms\"] = (",
											"    responseTime < 300);",
											"",
											"tests[\"Content-Type is 'application/json'\"] = (",
											"    !!contentType && contentType.has(\"application/json\"));",
											"",
											"tests[\"Status code is valid\"] = (",
											"    statusCodes.indexOf(responseCode.code) >= 0);",
											"",
											"",
											"/*",
											" * Validate JSON responses",
											" */",
											"",
											"tests[\"Response is a JSON object\"] = tv4.validate(",
											"    body, {type: 'object'});",
											"",
											"if (responseCode.code >= 400 && responseCode.code < 422) {",
											"    tests[\"Response is a valid error object\"] = tv4.validate(",
											"        body, errorSchema);",
											"}",
											"",
											"if (responseCode.code === 200 && request.method !== 'GET') {",
											"    tests[\"Response is a valid success object\"] = tv4.validate(",
											"        body, successSchema);",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{host}}/api/accounts/logout",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"accounts",
										"logout"
									]
								},
								"description": "Log out the authenticated user from the application.\n\nAccess:\n\t\n\tAuthenticated users."
							},
							"response": []
						},
						{
							"name": "Register a user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "12d6f674-efa9-4c86-950f-59f65ca862e1",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f7f14f36-89f6-4b8e-a3ed-7e8a884e4641",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Host",
										"value": "sinapsi.localhost"
									}
								],
								"body": {},
								"url": {
									"raw": "http://{{host}}/accounts/register",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"accounts",
										"register"
									]
								},
								"description": "Register an account."
							},
							"response": []
						},
						{
							"name": "Authenticate a user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "07f2d8a4-8faf-4b10-a3aa-d7dcf24e074c",
										"type": "text/javascript",
										"exec": [
											"/* Get response body and content type */",
											"var body = JSON.parse(responseBody);",
											"var contentType = postman.getResponseHeader(\"Content-Type\");",
											"",
											"/* Valid status codes for this resource */",
											"var statusCodes = [200, 400, 401, 403, 404, 422];",
											"",
											"/* JSON error response schema */",
											"var errorSchema = {",
											"    type: 'object',",
											"    required: ['status', 'message'],",
											"    properties: {",
											"        'status' : {",
											"            type: 'number'",
											"        },",
											"        'message' : {",
											"            type: 'string'",
											"        },",
											"        'errors' : {",
											"            type: 'object',",
											"            required: [\"code\", \"message\"],",
											"        }",
											"    }",
											"};",
											"",
											"/* Success JSON message schema */",
											"var successSchema = {",
											"    type: 'object',",
											"    required: ['id'],",
											"    properties: {",
											"        'id' : { type: 'integer' }",
											"    }",
											"};",
											"",
											"",
											"/*",
											" * Basic tests",
											" */",
											"",
											"tests[\"Response time is less than 300ms\"] = (",
											"    responseTime < 300);",
											"",
											"tests[\"Content-Type is 'application/json'\"] = (",
											"    !!contentType && contentType.has(\"application/json\"));",
											"",
											"tests[\"Status code is valid\"] = (",
											"    statusCodes.indexOf(responseCode.code) >= 0);",
											"",
											"",
											"/*",
											" * Validate JSON responses",
											" */",
											"",
											"tests[\"Response is a JSON object\"] = tv4.validate(",
											"    body, {type: 'object'});",
											"",
											"if (responseCode.code >= 400 && responseCode.code < 422) {",
											"    tests[\"Response is a valid error object\"] = tv4.validate(",
											"        body, errorSchema);",
											"}",
											"",
											"if (responseCode.code === 200 && request.method !== 'GET') {",
											"    tests[\"Response is a valid success object\"] = tv4.validate(",
											"        body, successSchema);",
											"}",
											"",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f7f14f36-89f6-4b8e-a3ed-7e8a884e4641",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{bearer_token}}"
									}
								],
								"body": {},
								"url": {
									"raw": "http://{{host}}/api/accounts/login",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"accounts",
										"login"
									]
								},
								"description": "Authenticate an account."
							},
							"response": []
						},
						{
							"name": "Retrieve the user profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"/* Get response body and content type */",
											"var body = JSON.parse(responseBody);",
											"var contentType = postman.getResponseHeader(\"Content-Type\");",
											"",
											"/* Valid status codes for this resource */",
											"var statusCodes = [200, 400, 401, 403, 404, 422];",
											"",
											"/* JSON error response schema */",
											"var errorSchema = {",
											"    type: 'object',",
											"    required: ['status', 'message'],",
											"    properties: {",
											"        'status' : {",
											"            type: 'number'",
											"        },",
											"        'message' : {",
											"            type: 'string'",
											"        },",
											"        'errors' : {",
											"            type: 'object',",
											"            required: [\"code\", \"message\"],",
											"        }",
											"    }",
											"};",
											"",
											"/* Success JSON message schema */",
											"var successSchema = {",
											"    type: 'object',",
											"    required: ['id'],",
											"    properties: {",
											"        'id' : { type: 'integer' }",
											"    }",
											"};",
											"",
											"",
											"/*",
											" * Basic tests",
											" */",
											"",
											"tests[\"Response time is less than 300ms\"] = (",
											"    responseTime < 300);",
											"",
											"tests[\"Content-Type is 'application/json'\"] = (",
											"    !!contentType && contentType.has(\"application/json\"));",
											"",
											"tests[\"Status code is valid\"] = (",
											"    statusCodes.indexOf(responseCode.code) >= 0);",
											"",
											"",
											"/*",
											" * Validate JSON responses",
											" */",
											"",
											"tests[\"Response is a JSON object\"] = tv4.validate(",
											"    body, {type: 'object'});",
											"",
											"if (responseCode.code >= 400 && responseCode.code < 422) {",
											"    tests[\"Response is a valid error object\"] = tv4.validate(",
											"        body, errorSchema);",
											"}",
											"",
											"if (responseCode.code === 200 && request.method !== 'GET') {",
											"    tests[\"Response is a valid success object\"] = tv4.validate(",
											"        body, successSchema);",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{host}}/api/accounts/profile",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"accounts",
										"profile"
									]
								},
								"description": "Retrieve the authenticated user object.\n\nAccess:\n\t\n\tAuthenticated users."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "AUTHORS",
			"item": [
				{
					"name": "authors",
					"description": "Author resource",
					"item": [
						{
							"name": "Authors listing",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"/* Get response body and content type */",
											"var body = JSON.parse(responseBody);",
											"var contentType = postman.getResponseHeader(\"Content-Type\");",
											"",
											"/* Valid status codes for this resource */",
											"var statusCodes = [200, 400, 401, 403, 404, 422];",
											"",
											"/* JSON error response schema */",
											"var errorSchema = {",
											"    type: 'object',",
											"    required: ['status', 'message'],",
											"    properties: {",
											"        'status' : {",
											"            type: 'number'",
											"        },",
											"        'message' : {",
											"            type: 'string'",
											"        },",
											"        'errors' : {",
											"            type: 'object',",
											"            required: [\"code\", \"message\"],",
											"        }",
											"    }",
											"};",
											"",
											"/* Success JSON message schema */",
											"var successSchema = {",
											"    type: 'object',",
											"    required: ['id'],",
											"    properties: {",
											"        'id' : { type: 'integer' }",
											"    }",
											"};",
											"",
											"",
											"/*",
											" * Basic tests",
											" */",
											"",
											"tests[\"Response time is less than 300ms\"] = (",
											"    responseTime < 300);",
											"",
											"tests[\"Content-Type is 'application/json'\"] = (",
											"    !!contentType && contentType.has(\"application/json\"));",
											"",
											"tests[\"Status code is valid\"] = (",
											"    statusCodes.indexOf(responseCode.code) >= 0);",
											"",
											"",
											"/*",
											" * Validate JSON responses",
											" */",
											"",
											"tests[\"Response is a JSON object\"] = tv4.validate(",
											"    body, {type: 'object'});",
											"",
											"if (responseCode.code >= 400 && responseCode.code < 422) {",
											"    tests[\"Response is a valid error object\"] = tv4.validate(",
											"        body, errorSchema);",
											"}",
											"",
											"if (responseCode.code === 200 && request.method !== 'GET') {",
											"    tests[\"Response is a valid success object\"] = tv4.validate(",
											"        body, successSchema);",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{host}}/api/authors?limit={{limit}}&page={{page}}&sort[]={{sort}}&with[]={{with}}&search={{search}}",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"authors"
									],
									"query": [
										{
											"key": "limit",
											"value": "{{limit}}",
											"equals": true
										},
										{
											"key": "page",
											"value": "{{page}}",
											"equals": true
										},
										{
											"key": "sort[]",
											"value": "{{sort}}",
											"equals": true
										},
										{
											"key": "with[]",
											"value": "{{with}}",
											"equals": true
										},
										{
											"key": "search",
											"value": "{{search}}",
											"equals": true
										}
									]
								},
								"description": "Obtain a list of authors.\n\nAccess:\n\t\n    All users.\n\nParameters:\n\n    limit     Maximum number of results to fetch\n    page      Page of results to fetch\n    search    Restrict the results to the given search string\n    sort[]    Results order array\n    with[]    Array of related objects to fetch\n\nRelated objects that can be fetched:\n\n    municipality    Municipality object\n    project         Project object\n    school          School object\n    synapse         Synapse object\n    territory       Territory object\n    user            User object\n"
							},
							"response": []
						},
						{
							"name": "Retrieve an author",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"/* Get response body and content type */",
											"var body = JSON.parse(responseBody);",
											"var contentType = postman.getResponseHeader(\"Content-Type\");",
											"",
											"/* Valid status codes for this resource */",
											"var statusCodes = [200, 400, 401, 403, 404, 422];",
											"",
											"/* JSON error response schema */",
											"var errorSchema = {",
											"    type: 'object',",
											"    required: ['status', 'message'],",
											"    properties: {",
											"        'status' : {",
											"            type: 'number'",
											"        },",
											"        'message' : {",
											"            type: 'string'",
											"        },",
											"        'errors' : {",
											"            type: 'object',",
											"            required: [\"code\", \"message\"],",
											"        }",
											"    }",
											"};",
											"",
											"/* Success JSON message schema */",
											"var successSchema = {",
											"    type: 'object',",
											"    required: ['id'],",
											"    properties: {",
											"        'id' : { type: 'integer' }",
											"    }",
											"};",
											"",
											"",
											"/*",
											" * Basic tests",
											" */",
											"",
											"tests[\"Response time is less than 300ms\"] = (",
											"    responseTime < 300);",
											"",
											"tests[\"Content-Type is 'application/json'\"] = (",
											"    !!contentType && contentType.has(\"application/json\"));",
											"",
											"tests[\"Status code is valid\"] = (",
											"    statusCodes.indexOf(responseCode.code) >= 0);",
											"",
											"",
											"/*",
											" * Validate JSON responses",
											" */",
											"",
											"tests[\"Response is a JSON object\"] = tv4.validate(",
											"    body, {type: 'object'});",
											"",
											"if (responseCode.code >= 400 && responseCode.code < 422) {",
											"    tests[\"Response is a valid error object\"] = tv4.validate(",
											"        body, errorSchema);",
											"}",
											"",
											"if (responseCode.code === 200 && request.method !== 'GET') {",
											"    tests[\"Response is a valid success object\"] = tv4.validate(",
											"        body, successSchema);",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{host}}/api/authors/:id",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"authors",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{id}}"
										}
									]
								},
								"description": "Retrieve a single author object.\n\nAccess:\n\t\n\tAll users.\n"
							},
							"response": []
						},
						{
							"name": "Update an author",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"/* Get response body and content type */",
											"var body = JSON.parse(responseBody);",
											"var contentType = postman.getResponseHeader(\"Content-Type\");",
											"",
											"/* Valid status codes for this resource */",
											"var statusCodes = [200, 400, 401, 403, 404, 422];",
											"",
											"/* JSON error response schema */",
											"var errorSchema = {",
											"    type: 'object',",
											"    required: ['status', 'message'],",
											"    properties: {",
											"        'status' : {",
											"            type: 'number'",
											"        },",
											"        'message' : {",
											"            type: 'string'",
											"        },",
											"        'errors' : {",
											"            type: 'object',",
											"            required: [\"code\", \"message\"],",
											"        }",
											"    }",
											"};",
											"",
											"/* Success JSON message schema */",
											"var successSchema = {",
											"    type: 'object',",
											"    required: ['id'],",
											"    properties: {",
											"        'id' : { type: 'integer' }",
											"    }",
											"};",
											"",
											"",
											"/*",
											" * Basic tests",
											" */",
											"",
											"tests[\"Response time is less than 300ms\"] = (",
											"    responseTime < 300);",
											"",
											"tests[\"Content-Type is 'application/json'\"] = (",
											"    !!contentType && contentType.has(\"application/json\"));",
											"",
											"tests[\"Status code is valid\"] = (",
											"    statusCodes.indexOf(responseCode.code) >= 0);",
											"",
											"",
											"/*",
											" * Validate JSON responses",
											" */",
											"",
											"tests[\"Response is a JSON object\"] = tv4.validate(",
											"    body, {type: 'object'});",
											"",
											"if (responseCode.code >= 400 && responseCode.code < 422) {",
											"    tests[\"Response is a valid error object\"] = tv4.validate(",
											"        body, errorSchema);",
											"}",
											"",
											"if (responseCode.code === 200 && request.method !== 'GET') {",
											"    tests[\"Response is a valid success object\"] = tv4.validate(",
											"        body, successSchema);",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{host}}/api/authors/:id",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"authors",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{id}}"
										}
									]
								},
								"description": "Update an existing author object.\n\nUpdatable attributes:\n\n    municipality_id\n    territory_id\n    school_id\n\nAccess:\n\t\n\tAuthenticated users. The author must belong to the\n\tauthenticated user.\n"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "projects",
					"description": "Project resource",
					"item": [
						{
							"name": "Projects listing",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"/* Get response body and content type */",
											"var body = JSON.parse(responseBody);",
											"var contentType = postman.getResponseHeader(\"Content-Type\");",
											"",
											"/* Valid status codes for this resource */",
											"var statusCodes = [200, 400, 401, 403, 404, 422];",
											"",
											"/* JSON error response schema */",
											"var errorSchema = {",
											"    type: 'object',",
											"    required: ['status', 'message'],",
											"    properties: {",
											"        'status' : {",
											"            type: 'number'",
											"        },",
											"        'message' : {",
											"            type: 'string'",
											"        },",
											"        'errors' : {",
											"            type: 'object',",
											"            required: [\"code\", \"message\"],",
											"        }",
											"    }",
											"};",
											"",
											"/* Success JSON message schema */",
											"var successSchema = {",
											"    type: 'object',",
											"    required: ['id'],",
											"    properties: {",
											"        'id' : { type: 'integer' }",
											"    }",
											"};",
											"",
											"",
											"/*",
											" * Basic tests",
											" */",
											"",
											"tests[\"Response time is less than 300ms\"] = (",
											"    responseTime < 300);",
											"",
											"tests[\"Content-Type is 'application/json'\"] = (",
											"    !!contentType && contentType.has(\"application/json\"));",
											"",
											"tests[\"Status code is valid\"] = (",
											"    statusCodes.indexOf(responseCode.code) >= 0);",
											"",
											"",
											"/*",
											" * Validate JSON responses",
											" */",
											"",
											"tests[\"Response is a JSON object\"] = tv4.validate(",
											"    body, {type: 'object'});",
											"",
											"if (responseCode.code >= 400 && responseCode.code < 422) {",
											"    tests[\"Response is a valid error object\"] = tv4.validate(",
											"        body, errorSchema);",
											"}",
											"",
											"if (responseCode.code === 200 && request.method !== 'GET') {",
											"    tests[\"Response is a valid success object\"] = tv4.validate(",
											"        body, successSchema);",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer undefined"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{host}}/api/projects?limit={{limit}}&page={{page}}&sort[]={{sort}}&with[]={{with}}&search={{search}}",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"projects"
									],
									"query": [
										{
											"key": "limit",
											"value": "{{limit}}",
											"equals": true
										},
										{
											"key": "page",
											"value": "{{page}}",
											"equals": true
										},
										{
											"key": "sort[]",
											"value": "{{sort}}",
											"equals": true
										},
										{
											"key": "with[]",
											"value": "{{with}}",
											"equals": true
										},
										{
											"key": "search",
											"value": "{{search}}",
											"equals": true
										}
									]
								},
								"description": "Obtain a list of projects.\n\nAccess:\n\t\n\tAll users.\n\nParameters:\n\n    limit     Maximum number of results to fetch\n    page      Page of results to fetch\n    search    Restrict the results to the given search string\n    sort[]    Results order array\n    with[]    Array of related objects to fetch\n\nRelated objects that can be fetched:\n\n"
							},
							"response": []
						},
						{
							"name": "Retrieve a project",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"/* Get response body and content type */",
											"var body = JSON.parse(responseBody);",
											"var contentType = postman.getResponseHeader(\"Content-Type\");",
											"",
											"/* Valid status codes for this resource */",
											"var statusCodes = [200, 400, 401, 403, 404, 422];",
											"",
											"/* JSON error response schema */",
											"var errorSchema = {",
											"    type: 'object',",
											"    required: ['status', 'message'],",
											"    properties: {",
											"        'status' : {",
											"            type: 'number'",
											"        },",
											"        'message' : {",
											"            type: 'string'",
											"        },",
											"        'errors' : {",
											"            type: 'object',",
											"            required: [\"code\", \"message\"],",
											"        }",
											"    }",
											"};",
											"",
											"/* Success JSON message schema */",
											"var successSchema = {",
											"    type: 'object',",
											"    required: ['id'],",
											"    properties: {",
											"        'id' : { type: 'integer' }",
											"    }",
											"};",
											"",
											"",
											"/*",
											" * Basic tests",
											" */",
											"",
											"tests[\"Response time is less than 300ms\"] = (",
											"    responseTime < 300);",
											"",
											"tests[\"Content-Type is 'application/json'\"] = (",
											"    !!contentType && contentType.has(\"application/json\"));",
											"",
											"tests[\"Status code is valid\"] = (",
											"    statusCodes.indexOf(responseCode.code) >= 0);",
											"",
											"",
											"/*",
											" * Validate JSON responses",
											" */",
											"",
											"tests[\"Response is a JSON object\"] = tv4.validate(",
											"    body, {type: 'object'});",
											"",
											"if (responseCode.code >= 400 && responseCode.code < 422) {",
											"    tests[\"Response is a valid error object\"] = tv4.validate(",
											"        body, errorSchema);",
											"}",
											"",
											"if (responseCode.code === 200 && request.method !== 'GET') {",
											"    tests[\"Response is a valid success object\"] = tv4.validate(",
											"        body, successSchema);",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{host}}/api/projects/:id",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"projects",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{id}}"
										}
									]
								},
								"description": "Retrieve a single project object.\n\nAccess:\n\t\n\tAll users."
							},
							"response": []
						},
						{
							"name": "Update a project",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"/* Get response body and content type */",
											"var body = JSON.parse(responseBody);",
											"var contentType = postman.getResponseHeader(\"Content-Type\");",
											"",
											"/* Valid status codes for this resource */",
											"var statusCodes = [200, 400, 401, 403, 404, 422];",
											"",
											"/* JSON error response schema */",
											"var errorSchema = {",
											"    type: 'object',",
											"    required: ['status', 'message'],",
											"    properties: {",
											"        'status' : {",
											"            type: 'number'",
											"        },",
											"        'message' : {",
											"            type: 'string'",
											"        },",
											"        'errors' : {",
											"            type: 'object',",
											"            required: [\"code\", \"message\"],",
											"        }",
											"    }",
											"};",
											"",
											"/* Success JSON message schema */",
											"var successSchema = {",
											"    type: 'object',",
											"    required: ['id'],",
											"    properties: {",
											"        'id' : { type: 'integer' }",
											"    }",
											"};",
											"",
											"",
											"/*",
											" * Basic tests",
											" */",
											"",
											"tests[\"Response time is less than 300ms\"] = (",
											"    responseTime < 300);",
											"",
											"tests[\"Content-Type is 'application/json'\"] = (",
											"    !!contentType && contentType.has(\"application/json\"));",
											"",
											"tests[\"Status code is valid\"] = (",
											"    statusCodes.indexOf(responseCode.code) >= 0);",
											"",
											"",
											"/*",
											" * Validate JSON responses",
											" */",
											"",
											"tests[\"Response is a JSON object\"] = tv4.validate(",
											"    body, {type: 'object'});",
											"",
											"if (responseCode.code >= 400 && responseCode.code < 422) {",
											"    tests[\"Response is a valid error object\"] = tv4.validate(",
											"        body, errorSchema);",
											"}",
											"",
											"if (responseCode.code === 200 && request.method !== 'GET') {",
											"    tests[\"Response is a valid success object\"] = tv4.validate(",
											"        body, successSchema);",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{host}}/api/projects/:id",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"projects",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{id}}"
										}
									]
								},
								"description": "Update an existing project object.\n\nAccess:\n\t\n\tAuthenticated users. The author of the project must\n\tbelong to the authenticated user."
							},
							"response": []
						},
						{
							"name": "Store a new project",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"/* Get response body and content type */",
											"var body = JSON.parse(responseBody);",
											"var contentType = postman.getResponseHeader(\"Content-Type\");",
											"",
											"/* Valid status codes for this resource */",
											"var statusCodes = [200, 400, 401, 403, 404, 422];",
											"",
											"/* JSON error response schema */",
											"var errorSchema = {",
											"    type: 'object',",
											"    required: ['status', 'message'],",
											"    properties: {",
											"        'status' : {",
											"            type: 'number'",
											"        },",
											"        'message' : {",
											"            type: 'string'",
											"        },",
											"        'errors' : {",
											"            type: 'object',",
											"            required: [\"code\", \"message\"],",
											"        }",
											"    }",
											"};",
											"",
											"/* Success JSON message schema */",
											"var successSchema = {",
											"    type: 'object',",
											"    required: ['id'],",
											"    properties: {",
											"        'id' : { type: 'integer' }",
											"    }",
											"};",
											"",
											"",
											"/*",
											" * Basic tests",
											" */",
											"",
											"tests[\"Response time is less than 300ms\"] = (",
											"    responseTime < 300);",
											"",
											"tests[\"Content-Type is 'application/json'\"] = (",
											"    !!contentType && contentType.has(\"application/json\"));",
											"",
											"tests[\"Status code is valid\"] = (",
											"    statusCodes.indexOf(responseCode.code) >= 0);",
											"",
											"",
											"/*",
											" * Validate JSON responses",
											" */",
											"",
											"tests[\"Response is a JSON object\"] = tv4.validate(",
											"    body, {type: 'object'});",
											"",
											"if (responseCode.code >= 400 && responseCode.code < 422) {",
											"    tests[\"Response is a valid error object\"] = tv4.validate(",
											"        body, errorSchema);",
											"}",
											"",
											"if (responseCode.code === 200 && request.method !== 'GET') {",
											"    tests[\"Response is a valid success object\"] = tv4.validate(",
											"        body, successSchema);",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{host}}/api/projects",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"projects"
									]
								},
								"description": "Create a new project object.\n\nAccess:\n\n\tAuthenticated users. The author of the project will\n\tbelong to the authenticated user."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "schools",
					"description": "School resource",
					"item": [
						{
							"name": "Schools listing",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"/* Get response body and content type */",
											"var body = JSON.parse(responseBody);",
											"var contentType = postman.getResponseHeader(\"Content-Type\");",
											"",
											"/* Valid status codes for this resource */",
											"var statusCodes = [200, 400, 401, 403, 404, 422];",
											"",
											"/* JSON error response schema */",
											"var errorSchema = {",
											"    type: 'object',",
											"    required: ['status', 'message'],",
											"    properties: {",
											"        'status' : {",
											"            type: 'number'",
											"        },",
											"        'message' : {",
											"            type: 'string'",
											"        },",
											"        'errors' : {",
											"            type: 'object',",
											"            required: [\"code\", \"message\"],",
											"        }",
											"    }",
											"};",
											"",
											"/* Success JSON message schema */",
											"var successSchema = {",
											"    type: 'object',",
											"    required: ['id'],",
											"    properties: {",
											"        'id' : { type: 'integer' }",
											"    }",
											"};",
											"",
											"",
											"/*",
											" * Basic tests",
											" */",
											"",
											"tests[\"Response time is less than 300ms\"] = (",
											"    responseTime < 300);",
											"",
											"tests[\"Content-Type is 'application/json'\"] = (",
											"    !!contentType && contentType.has(\"application/json\"));",
											"",
											"tests[\"Status code is valid\"] = (",
											"    statusCodes.indexOf(responseCode.code) >= 0);",
											"",
											"",
											"/*",
											" * Validate JSON responses",
											" */",
											"",
											"tests[\"Response is a JSON object\"] = tv4.validate(",
											"    body, {type: 'object'});",
											"",
											"if (responseCode.code >= 400 && responseCode.code < 422) {",
											"    tests[\"Response is a valid error object\"] = tv4.validate(",
											"        body, errorSchema);",
											"}",
											"",
											"if (responseCode.code === 200 && request.method !== 'GET') {",
											"    tests[\"Response is a valid success object\"] = tv4.validate(",
											"        body, successSchema);",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{host}}/api/schools?limit={{limit}}&page={{page}}&sort[]={{sort}}&with[]={{with}}&search={{search}}",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"schools"
									],
									"query": [
										{
											"key": "limit",
											"value": "{{limit}}",
											"equals": true
										},
										{
											"key": "page",
											"value": "{{page}}",
											"equals": true
										},
										{
											"key": "sort[]",
											"value": "{{sort}}",
											"equals": true
										},
										{
											"key": "with[]",
											"value": "{{with}}",
											"equals": true
										},
										{
											"key": "search",
											"value": "{{search}}",
											"equals": true
										}
									]
								},
								"description": "Obtain a list of schools.\n\nAccess:\n\t\n\tAll users.\n\nParameters:\n\n    limit     Maximum number of results to fetch\n    page      Page of results to fetch\n    search    Restrict the results to the given search string\n    sort[]    Results order array\n    with[]    Array of related objects to fetch\n\nRelated objects that can be fetched:\n\n"
							},
							"response": []
						},
						{
							"name": "Retrieve a school",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"/* Get response body and content type */",
											"var body = JSON.parse(responseBody);",
											"var contentType = postman.getResponseHeader(\"Content-Type\");",
											"",
											"/* Valid status codes for this resource */",
											"var statusCodes = [200, 400, 401, 403, 404, 422];",
											"",
											"/* JSON error response schema */",
											"var errorSchema = {",
											"    type: 'object',",
											"    required: ['status', 'message'],",
											"    properties: {",
											"        'status' : {",
											"            type: 'number'",
											"        },",
											"        'message' : {",
											"            type: 'string'",
											"        },",
											"        'errors' : {",
											"            type: 'object',",
											"            required: [\"code\", \"message\"],",
											"        }",
											"    }",
											"};",
											"",
											"/* Success JSON message schema */",
											"var successSchema = {",
											"    type: 'object',",
											"    required: ['id'],",
											"    properties: {",
											"        'id' : { type: 'integer' }",
											"    }",
											"};",
											"",
											"",
											"/*",
											" * Basic tests",
											" */",
											"",
											"tests[\"Response time is less than 300ms\"] = (",
											"    responseTime < 300);",
											"",
											"tests[\"Content-Type is 'application/json'\"] = (",
											"    !!contentType && contentType.has(\"application/json\"));",
											"",
											"tests[\"Status code is valid\"] = (",
											"    statusCodes.indexOf(responseCode.code) >= 0);",
											"",
											"",
											"/*",
											" * Validate JSON responses",
											" */",
											"",
											"tests[\"Response is a JSON object\"] = tv4.validate(",
											"    body, {type: 'object'});",
											"",
											"if (responseCode.code >= 400 && responseCode.code < 422) {",
											"    tests[\"Response is a valid error object\"] = tv4.validate(",
											"        body, errorSchema);",
											"}",
											"",
											"if (responseCode.code === 200 && request.method !== 'GET') {",
											"    tests[\"Response is a valid success object\"] = tv4.validate(",
											"        body, successSchema);",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{host}}/api/schools/:id",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"schools",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{id}}"
										}
									]
								},
								"description": "Retrieve a single school object.\n\nAccess:\n\t\n\tAll users."
							},
							"response": []
						},
						{
							"name": "Update a school",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"/* Get response body and content type */",
											"var body = JSON.parse(responseBody);",
											"var contentType = postman.getResponseHeader(\"Content-Type\");",
											"",
											"/* Valid status codes for this resource */",
											"var statusCodes = [200, 400, 401, 403, 404, 422];",
											"",
											"/* JSON error response schema */",
											"var errorSchema = {",
											"    type: 'object',",
											"    required: ['status', 'message'],",
											"    properties: {",
											"        'status' : {",
											"            type: 'number'",
											"        },",
											"        'message' : {",
											"            type: 'string'",
											"        },",
											"        'errors' : {",
											"            type: 'object',",
											"            required: [\"code\", \"message\"],",
											"        }",
											"    }",
											"};",
											"",
											"/* Success JSON message schema */",
											"var successSchema = {",
											"    type: 'object',",
											"    required: ['id'],",
											"    properties: {",
											"        'id' : { type: 'integer' }",
											"    }",
											"};",
											"",
											"",
											"/*",
											" * Basic tests",
											" */",
											"",
											"tests[\"Response time is less than 300ms\"] = (",
											"    responseTime < 300);",
											"",
											"tests[\"Content-Type is 'application/json'\"] = (",
											"    !!contentType && contentType.has(\"application/json\"));",
											"",
											"tests[\"Status code is valid\"] = (",
											"    statusCodes.indexOf(responseCode.code) >= 0);",
											"",
											"",
											"/*",
											" * Validate JSON responses",
											" */",
											"",
											"tests[\"Response is a JSON object\"] = tv4.validate(",
											"    body, {type: 'object'});",
											"",
											"if (responseCode.code >= 400 && responseCode.code < 422) {",
											"    tests[\"Response is a valid error object\"] = tv4.validate(",
											"        body, errorSchema);",
											"}",
											"",
											"if (responseCode.code === 200 && request.method !== 'GET') {",
											"    tests[\"Response is a valid success object\"] = tv4.validate(",
											"        body, successSchema);",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{host}}/api/schools/:id",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"schools",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{id}}"
										}
									]
								},
								"description": "Update an existing school object.\n\nAccess:\n\t\n\tAdministrators."
							},
							"response": []
						},
						{
							"name": "Store a new school",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"/* Get response body and content type */",
											"var body = JSON.parse(responseBody);",
											"var contentType = postman.getResponseHeader(\"Content-Type\");",
											"",
											"/* Valid status codes for this resource */",
											"var statusCodes = [200, 400, 401, 403, 404, 422];",
											"",
											"/* JSON error response schema */",
											"var errorSchema = {",
											"    type: 'object',",
											"    required: ['status', 'message'],",
											"    properties: {",
											"        'status' : {",
											"            type: 'number'",
											"        },",
											"        'message' : {",
											"            type: 'string'",
											"        },",
											"        'errors' : {",
											"            type: 'object',",
											"            required: [\"code\", \"message\"],",
											"        }",
											"    }",
											"};",
											"",
											"/* Success JSON message schema */",
											"var successSchema = {",
											"    type: 'object',",
											"    required: ['id'],",
											"    properties: {",
											"        'id' : { type: 'integer' }",
											"    }",
											"};",
											"",
											"",
											"/*",
											" * Basic tests",
											" */",
											"",
											"tests[\"Response time is less than 300ms\"] = (",
											"    responseTime < 300);",
											"",
											"tests[\"Content-Type is 'application/json'\"] = (",
											"    !!contentType && contentType.has(\"application/json\"));",
											"",
											"tests[\"Status code is valid\"] = (",
											"    statusCodes.indexOf(responseCode.code) >= 0);",
											"",
											"",
											"/*",
											" * Validate JSON responses",
											" */",
											"",
											"tests[\"Response is a JSON object\"] = tv4.validate(",
											"    body, {type: 'object'});",
											"",
											"if (responseCode.code >= 400 && responseCode.code < 422) {",
											"    tests[\"Response is a valid error object\"] = tv4.validate(",
											"        body, errorSchema);",
											"}",
											"",
											"if (responseCode.code === 200 && request.method !== 'GET') {",
											"    tests[\"Response is a valid success object\"] = tv4.validate(",
											"        body, successSchema);",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{host}}/api/schools",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"schools"
									]
								},
								"description": "Create a new school object.\n\nAccess:\n\n\tAdministrators."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "users",
					"description": "User resource",
					"item": [
						{
							"name": "Users listing",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"/* Get response body and content type */",
											"var body = JSON.parse(responseBody);",
											"var contentType = postman.getResponseHeader(\"Content-Type\");",
											"",
											"/* Valid status codes for this resource */",
											"var statusCodes = [200, 400, 401, 403, 404, 422];",
											"",
											"/* JSON error response schema */",
											"var errorSchema = {",
											"    type: 'object',",
											"    required: ['status', 'message'],",
											"    properties: {",
											"        'status' : {",
											"            type: 'number'",
											"        },",
											"        'message' : {",
											"            type: 'string'",
											"        },",
											"        'errors' : {",
											"            type: 'object',",
											"            required: [\"code\", \"message\"],",
											"        }",
											"    }",
											"};",
											"",
											"/* Success JSON message schema */",
											"var successSchema = {",
											"    type: 'object',",
											"    required: ['id'],",
											"    properties: {",
											"        'id' : { type: 'integer' }",
											"    }",
											"};",
											"",
											"",
											"/*",
											" * Basic tests",
											" */",
											"",
											"tests[\"Response time is less than 300ms\"] = (",
											"    responseTime < 300);",
											"",
											"tests[\"Content-Type is 'application/json'\"] = (",
											"    !!contentType && contentType.has(\"application/json\"));",
											"",
											"tests[\"Status code is valid\"] = (",
											"    statusCodes.indexOf(responseCode.code) >= 0);",
											"",
											"",
											"/*",
											" * Validate JSON responses",
											" */",
											"",
											"tests[\"Response is a JSON object\"] = tv4.validate(",
											"    body, {type: 'object'});",
											"",
											"if (responseCode.code >= 400 && responseCode.code < 422) {",
											"    tests[\"Response is a valid error object\"] = tv4.validate(",
											"        body, errorSchema);",
											"}",
											"",
											"if (responseCode.code === 200 && request.method !== 'GET') {",
											"    tests[\"Response is a valid success object\"] = tv4.validate(",
											"        body, successSchema);",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{host}}/api/users?limit={{limit}}&page={{page}}&sort[]={{sort}}&with[]={{with}}&search={{search}}",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"users"
									],
									"query": [
										{
											"key": "limit",
											"value": "{{limit}}",
											"equals": true
										},
										{
											"key": "page",
											"value": "{{page}}",
											"equals": true
										},
										{
											"key": "sort[]",
											"value": "{{sort}}",
											"equals": true
										},
										{
											"key": "with[]",
											"value": "{{with}}",
											"equals": true
										},
										{
											"key": "search",
											"value": "{{search}}",
											"equals": true
										}
									]
								},
								"description": "Obtain a list of users.\n\nAccess:\n\t\n\tAdministrators.\n\nParameters:\n\n    limit     Maximum number of results to fetch\n    page      Page of results to fetch\n    search    Restrict the results to the given search string\n    sort[]    Results order array\n    with[]    Array of related objects to fetch\n\nRelated objects that can be fetched:\n\n"
							},
							"response": []
						},
						{
							"name": "Retrieve a user",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"/* Get response body and content type */",
											"var body = JSON.parse(responseBody);",
											"var contentType = postman.getResponseHeader(\"Content-Type\");",
											"",
											"/* Valid status codes for this resource */",
											"var statusCodes = [200, 400, 401, 403, 404, 422];",
											"",
											"/* JSON error response schema */",
											"var errorSchema = {",
											"    type: 'object',",
											"    required: ['status', 'message'],",
											"    properties: {",
											"        'status' : {",
											"            type: 'number'",
											"        },",
											"        'message' : {",
											"            type: 'string'",
											"        },",
											"        'errors' : {",
											"            type: 'object',",
											"            required: [\"code\", \"message\"],",
											"        }",
											"    }",
											"};",
											"",
											"/* Success JSON message schema */",
											"var successSchema = {",
											"    type: 'object',",
											"    required: ['id'],",
											"    properties: {",
											"        'id' : { type: 'integer' }",
											"    }",
											"};",
											"",
											"",
											"/*",
											" * Basic tests",
											" */",
											"",
											"tests[\"Response time is less than 300ms\"] = (",
											"    responseTime < 300);",
											"",
											"tests[\"Content-Type is 'application/json'\"] = (",
											"    !!contentType && contentType.has(\"application/json\"));",
											"",
											"tests[\"Status code is valid\"] = (",
											"    statusCodes.indexOf(responseCode.code) >= 0);",
											"",
											"",
											"/*",
											" * Validate JSON responses",
											" */",
											"",
											"tests[\"Response is a JSON object\"] = tv4.validate(",
											"    body, {type: 'object'});",
											"",
											"if (responseCode.code >= 400 && responseCode.code < 422) {",
											"    tests[\"Response is a valid error object\"] = tv4.validate(",
											"        body, errorSchema);",
											"}",
											"",
											"if (responseCode.code === 200 && request.method !== 'GET') {",
											"    tests[\"Response is a valid success object\"] = tv4.validate(",
											"        body, successSchema);",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{host}}/api/users/:id",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"users",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{id}}"
										}
									]
								},
								"description": "Retrieve a single user object.\n\nAccess:\n\t\n\tAdministrators."
							},
							"response": []
						},
						{
							"name": "Re-enable a user",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{host}}/api/users/:id",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"users",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{id}}"
										}
									]
								},
								"description": "Enable a disabled user object.\n\nAccess:\n\t\n\tAdministrators."
							},
							"response": []
						},
						{
							"name": "Disable a user",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{host}}/api/users/:id",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"users",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{id}}"
										}
									]
								},
								"description": "Disable a single user.\n\nAccess:\n\t\n\tAdministrators."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "SOURCES",
			"item": [
				{
					"name": "feeds",
					"description": "Feed resource",
					"item": [
						{
							"name": "Feeds listing",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"/* Get response body and content type */",
											"var body = JSON.parse(responseBody);",
											"var contentType = postman.getResponseHeader(\"Content-Type\");",
											"",
											"/* Valid status codes for this resource */",
											"var statusCodes = [200, 400, 401, 403, 404, 422];",
											"",
											"/* JSON error response schema */",
											"var errorSchema = {",
											"    type: 'object',",
											"    required: ['status', 'message'],",
											"    properties: {",
											"        'status' : {",
											"            type: 'number'",
											"        },",
											"        'message' : {",
											"            type: 'string'",
											"        },",
											"        'errors' : {",
											"            type: 'object',",
											"            required: [\"code\", \"message\"],",
											"        }",
											"    }",
											"};",
											"",
											"/* Success JSON message schema */",
											"var successSchema = {",
											"    type: 'object',",
											"    required: ['id'],",
											"    properties: {",
											"        'id' : { type: 'integer' }",
											"    }",
											"};",
											"",
											"",
											"/*",
											" * Basic tests",
											" */",
											"",
											"tests[\"Response time is less than 300ms\"] = (",
											"    responseTime < 300);",
											"",
											"tests[\"Content-Type is 'application/json'\"] = (",
											"    !!contentType && contentType.has(\"application/json\"));",
											"",
											"tests[\"Status code is valid\"] = (",
											"    statusCodes.indexOf(responseCode.code) >= 0);",
											"",
											"",
											"/*",
											" * Validate JSON responses",
											" */",
											"",
											"tests[\"Response is a JSON object\"] = tv4.validate(",
											"    body, {type: 'object'});",
											"",
											"if (responseCode.code >= 400 && responseCode.code < 422) {",
											"    tests[\"Response is a valid error object\"] = tv4.validate(",
											"        body, errorSchema);",
											"}",
											"",
											"if (responseCode.code === 200 && request.method !== 'GET') {",
											"    tests[\"Response is a valid success object\"] = tv4.validate(",
											"        body, successSchema);",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{host}}/api/feeds?limit={{limit}}&page={{page}}&sort[]={{sort}}&with[]={{with}}&search={{search}}",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"feeds"
									],
									"query": [
										{
											"key": "limit",
											"value": "{{limit}}",
											"equals": true
										},
										{
											"key": "page",
											"value": "{{page}}",
											"equals": true
										},
										{
											"key": "sort[]",
											"value": "{{sort}}",
											"equals": true
										},
										{
											"key": "with[]",
											"value": "{{with}}",
											"equals": true
										},
										{
											"key": "search",
											"value": "{{search}}",
											"equals": true
										}
									]
								},
								"description": "Obtain a list of feeds.\n\nAccess:\n\t\n\tAll users.\n\nParameters:\n\n    limit     Maximum number of results to fetch\n    page      Page of results to fetch\n    search    Restrict the results to the given search string\n    sort[]    Results order array\n    with[]    Array of related objects to fetch\n\nRelated objects that can be fetched:\n\n    author    Author object\n"
							},
							"response": []
						},
						{
							"name": "Retrieve a feed",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"/* Get response body and content type */",
											"var body = JSON.parse(responseBody);",
											"var contentType = postman.getResponseHeader(\"Content-Type\");",
											"",
											"/* Valid status codes for this resource */",
											"var statusCodes = [200, 400, 401, 403, 404, 422];",
											"",
											"/* JSON error response schema */",
											"var errorSchema = {",
											"    type: 'object',",
											"    required: ['status', 'message'],",
											"    properties: {",
											"        'status' : {",
											"            type: 'number'",
											"        },",
											"        'message' : {",
											"            type: 'string'",
											"        },",
											"        'errors' : {",
											"            type: 'object',",
											"            required: [\"code\", \"message\"],",
											"        }",
											"    }",
											"};",
											"",
											"/* Success JSON message schema */",
											"var successSchema = {",
											"    type: 'object',",
											"    required: ['id'],",
											"    properties: {",
											"        'id' : { type: 'integer' }",
											"    }",
											"};",
											"",
											"",
											"/*",
											" * Basic tests",
											" */",
											"",
											"tests[\"Response time is less than 300ms\"] = (",
											"    responseTime < 300);",
											"",
											"tests[\"Content-Type is 'application/json'\"] = (",
											"    !!contentType && contentType.has(\"application/json\"));",
											"",
											"tests[\"Status code is valid\"] = (",
											"    statusCodes.indexOf(responseCode.code) >= 0);",
											"",
											"",
											"/*",
											" * Validate JSON responses",
											" */",
											"",
											"tests[\"Response is a JSON object\"] = tv4.validate(",
											"    body, {type: 'object'});",
											"",
											"if (responseCode.code >= 400 && responseCode.code < 422) {",
											"    tests[\"Response is a valid error object\"] = tv4.validate(",
											"        body, errorSchema);",
											"}",
											"",
											"if (responseCode.code === 200 && request.method !== 'GET') {",
											"    tests[\"Response is a valid success object\"] = tv4.validate(",
											"        body, successSchema);",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{host}}/api/feeds/:id",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"feeds",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{id}}"
										}
									]
								},
								"description": "Retrieve a single feed object.\n\nAccess:\n\t\n\tAll users."
							},
							"response": []
						},
						{
							"name": "Store a new feed",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"/* Get response body and content type */",
											"var body = JSON.parse(responseBody);",
											"var contentType = postman.getResponseHeader(\"Content-Type\");",
											"",
											"/* Valid status codes for this resource */",
											"var statusCodes = [200, 400, 401, 403, 404, 422];",
											"",
											"/* JSON error response schema */",
											"var errorSchema = {",
											"    type: 'object',",
											"    required: ['status', 'message'],",
											"    properties: {",
											"        'status' : {",
											"            type: 'number'",
											"        },",
											"        'message' : {",
											"            type: 'string'",
											"        },",
											"        'errors' : {",
											"            type: 'object',",
											"            required: [\"code\", \"message\"],",
											"        }",
											"    }",
											"};",
											"",
											"/* Success JSON message schema */",
											"var successSchema = {",
											"    type: 'object',",
											"    required: ['id'],",
											"    properties: {",
											"        'id' : { type: 'integer' }",
											"    }",
											"};",
											"",
											"",
											"/*",
											" * Basic tests",
											" */",
											"",
											"tests[\"Response time is less than 300ms\"] = (",
											"    responseTime < 300);",
											"",
											"tests[\"Content-Type is 'application/json'\"] = (",
											"    !!contentType && contentType.has(\"application/json\"));",
											"",
											"tests[\"Status code is valid\"] = (",
											"    statusCodes.indexOf(responseCode.code) >= 0);",
											"",
											"",
											"/*",
											" * Validate JSON responses",
											" */",
											"",
											"tests[\"Response is a JSON object\"] = tv4.validate(",
											"    body, {type: 'object'});",
											"",
											"if (responseCode.code >= 400 && responseCode.code < 422) {",
											"    tests[\"Response is a valid error object\"] = tv4.validate(",
											"        body, errorSchema);",
											"}",
											"",
											"if (responseCode.code === 200 && request.method !== 'GET') {",
											"    tests[\"Response is a valid success object\"] = tv4.validate(",
											"        body, successSchema);",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{host}}/api/feeds",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"feeds"
									]
								},
								"description": "Create a new feed object.\n\nAccess:\n\t\n\tAuthenticated users. The author of the feed must\n\tbelong to the authenticated user."
							},
							"response": []
						},
						{
							"name": "Update a feed",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"/* Get response body and content type */",
											"var body = JSON.parse(responseBody);",
											"var contentType = postman.getResponseHeader(\"Content-Type\");",
											"",
											"/* Valid status codes for this resource */",
											"var statusCodes = [200, 400, 401, 403, 404, 422];",
											"",
											"/* JSON error response schema */",
											"var errorSchema = {",
											"    type: 'object',",
											"    required: ['status', 'message'],",
											"    properties: {",
											"        'status' : {",
											"            type: 'number'",
											"        },",
											"        'message' : {",
											"            type: 'string'",
											"        },",
											"        'errors' : {",
											"            type: 'object',",
											"            required: [\"code\", \"message\"],",
											"        }",
											"    }",
											"};",
											"",
											"/* Success JSON message schema */",
											"var successSchema = {",
											"    type: 'object',",
											"    required: ['id'],",
											"    properties: {",
											"        'id' : { type: 'integer' }",
											"    }",
											"};",
											"",
											"",
											"/*",
											" * Basic tests",
											" */",
											"",
											"tests[\"Response time is less than 300ms\"] = (",
											"    responseTime < 300);",
											"",
											"tests[\"Content-Type is 'application/json'\"] = (",
											"    !!contentType && contentType.has(\"application/json\"));",
											"",
											"tests[\"Status code is valid\"] = (",
											"    statusCodes.indexOf(responseCode.code) >= 0);",
											"",
											"",
											"/*",
											" * Validate JSON responses",
											" */",
											"",
											"tests[\"Response is a JSON object\"] = tv4.validate(",
											"    body, {type: 'object'});",
											"",
											"if (responseCode.code >= 400 && responseCode.code < 422) {",
											"    tests[\"Response is a valid error object\"] = tv4.validate(",
											"        body, errorSchema);",
											"}",
											"",
											"if (responseCode.code === 200 && request.method !== 'GET') {",
											"    tests[\"Response is a valid success object\"] = tv4.validate(",
											"        body, successSchema);",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{host}}/api/feeds/:id",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"feeds",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{id}}"
										}
									]
								},
								"description": "Update an existing feed object.\n\nAccess:\n\t\n\tAuthenticated users. The author of the feed must\n\tbelong to the authenticated user."
							},
							"response": []
						},
						{
							"name": "Remove a feed",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{host}}/api/feeds/:id",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"feeds",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{id}}"
										}
									]
								},
								"description": "Remove a single feed.\n\nAccess:\n\t\n\tAuthenticated users. The author of the feed must\n\tbelong to the authenticated user."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "municipalities",
					"description": "Municipality resource",
					"item": [
						{
							"name": "Municipalities listing",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"/* Get response body and content type */",
											"var body = JSON.parse(responseBody);",
											"var contentType = postman.getResponseHeader(\"Content-Type\");",
											"",
											"/* Valid status codes for this resource */",
											"var statusCodes = [200, 400, 401, 403, 404, 422];",
											"",
											"/* JSON error response schema */",
											"var errorSchema = {",
											"    type: 'object',",
											"    required: ['status', 'message'],",
											"    properties: {",
											"        'status' : {",
											"            type: 'number'",
											"        },",
											"        'message' : {",
											"            type: 'string'",
											"        },",
											"        'errors' : {",
											"            type: 'object',",
											"            required: [\"code\", \"message\"],",
											"        }",
											"    }",
											"};",
											"",
											"/* Success JSON message schema */",
											"var successSchema = {",
											"    type: 'object',",
											"    required: ['id'],",
											"    properties: {",
											"        'id' : { type: 'integer' }",
											"    }",
											"};",
											"",
											"",
											"/*",
											" * Basic tests",
											" */",
											"",
											"tests[\"Response time is less than 300ms\"] = (",
											"    responseTime < 300);",
											"",
											"tests[\"Content-Type is 'application/json'\"] = (",
											"    !!contentType && contentType.has(\"application/json\"));",
											"",
											"tests[\"Status code is valid\"] = (",
											"    statusCodes.indexOf(responseCode.code) >= 0);",
											"",
											"",
											"/*",
											" * Validate JSON responses",
											" */",
											"",
											"tests[\"Response is a JSON object\"] = tv4.validate(",
											"    body, {type: 'object'});",
											"",
											"if (responseCode.code >= 400 && responseCode.code < 422) {",
											"    tests[\"Response is a valid error object\"] = tv4.validate(",
											"        body, errorSchema);",
											"}",
											"",
											"if (responseCode.code === 200 && request.method !== 'GET') {",
											"    tests[\"Response is a valid success object\"] = tv4.validate(",
											"        body, successSchema);",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{host}}/api/municipalities?limit={{limit}}&page={{page}}&sort[]={{sort}}&with[]={{with}}&search={{search}}",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"municipalities"
									],
									"query": [
										{
											"key": "limit",
											"value": "{{limit}}",
											"equals": true
										},
										{
											"key": "page",
											"value": "{{page}}",
											"equals": true
										},
										{
											"key": "sort[]",
											"value": "{{sort}}",
											"equals": true
										},
										{
											"key": "with[]",
											"value": "{{with}}",
											"equals": true
										},
										{
											"key": "search",
											"value": "{{search}}",
											"equals": true
										}
									]
								},
								"description": "Obtain a list of municipalities.\n\nAccess:\n\t\n\tAll users.\n\nParameters:\n\n    limit     Maximum number of results to fetch\n    page      Page of results to fetch\n    search    Restrict the results to the given search string\n    sort[]    Results order array\n    with[]    Array of related objects to fetch\n\nRelated objects that can be fetched:\n\n"
							},
							"response": []
						},
						{
							"name": "Retrieve a municipality",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"/* Get response body and content type */",
											"var body = JSON.parse(responseBody);",
											"var contentType = postman.getResponseHeader(\"Content-Type\");",
											"",
											"/* Valid status codes for this resource */",
											"var statusCodes = [200, 400, 401, 403, 404, 422];",
											"",
											"/* JSON error response schema */",
											"var errorSchema = {",
											"    type: 'object',",
											"    required: ['status', 'message'],",
											"    properties: {",
											"        'status' : {",
											"            type: 'number'",
											"        },",
											"        'message' : {",
											"            type: 'string'",
											"        },",
											"        'errors' : {",
											"            type: 'object',",
											"            required: [\"code\", \"message\"],",
											"        }",
											"    }",
											"};",
											"",
											"/* Success JSON message schema */",
											"var successSchema = {",
											"    type: 'object',",
											"    required: ['id'],",
											"    properties: {",
											"        'id' : { type: 'integer' }",
											"    }",
											"};",
											"",
											"",
											"/*",
											" * Basic tests",
											" */",
											"",
											"tests[\"Response time is less than 300ms\"] = (",
											"    responseTime < 300);",
											"",
											"tests[\"Content-Type is 'application/json'\"] = (",
											"    !!contentType && contentType.has(\"application/json\"));",
											"",
											"tests[\"Status code is valid\"] = (",
											"    statusCodes.indexOf(responseCode.code) >= 0);",
											"",
											"",
											"/*",
											" * Validate JSON responses",
											" */",
											"",
											"tests[\"Response is a JSON object\"] = tv4.validate(",
											"    body, {type: 'object'});",
											"",
											"if (responseCode.code >= 400 && responseCode.code < 422) {",
											"    tests[\"Response is a valid error object\"] = tv4.validate(",
											"        body, errorSchema);",
											"}",
											"",
											"if (responseCode.code === 200 && request.method !== 'GET') {",
											"    tests[\"Response is a valid success object\"] = tv4.validate(",
											"        body, successSchema);",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{host}}/api/municipalities/:id",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"municipalities",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{id}}"
										}
									]
								},
								"description": "Retrieve a single municipality object.\n\nAccess:\n\t\n\tAll users."
							},
							"response": []
						},
						{
							"name": "Store a new municipality",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"/* Get response body and content type */",
											"var body = JSON.parse(responseBody);",
											"var contentType = postman.getResponseHeader(\"Content-Type\");",
											"",
											"/* Valid status codes for this resource */",
											"var statusCodes = [200, 400, 401, 403, 404, 422];",
											"",
											"/* JSON error response schema */",
											"var errorSchema = {",
											"    type: 'object',",
											"    required: ['status', 'message'],",
											"    properties: {",
											"        'status' : {",
											"            type: 'number'",
											"        },",
											"        'message' : {",
											"            type: 'string'",
											"        },",
											"        'errors' : {",
											"            type: 'object',",
											"            required: [\"code\", \"message\"],",
											"        }",
											"    }",
											"};",
											"",
											"/* Success JSON message schema */",
											"var successSchema = {",
											"    type: 'object',",
											"    required: ['id'],",
											"    properties: {",
											"        'id' : { type: 'integer' }",
											"    }",
											"};",
											"",
											"",
											"/*",
											" * Basic tests",
											" */",
											"",
											"tests[\"Response time is less than 300ms\"] = (",
											"    responseTime < 300);",
											"",
											"tests[\"Content-Type is 'application/json'\"] = (",
											"    !!contentType && contentType.has(\"application/json\"));",
											"",
											"tests[\"Status code is valid\"] = (",
											"    statusCodes.indexOf(responseCode.code) >= 0);",
											"",
											"",
											"/*",
											" * Validate JSON responses",
											" */",
											"",
											"tests[\"Response is a JSON object\"] = tv4.validate(",
											"    body, {type: 'object'});",
											"",
											"if (responseCode.code >= 400 && responseCode.code < 422) {",
											"    tests[\"Response is a valid error object\"] = tv4.validate(",
											"        body, errorSchema);",
											"}",
											"",
											"if (responseCode.code === 200 && request.method !== 'GET') {",
											"    tests[\"Response is a valid success object\"] = tv4.validate(",
											"        body, successSchema);",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{host}}/api/municipalities",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"municipalities"
									]
								},
								"description": "Create a new municipality object.\n\nAccess:\n\t\n\tAdministrators."
							},
							"response": []
						},
						{
							"name": "Update a municipality",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"/* Get response body and content type */",
											"var body = JSON.parse(responseBody);",
											"var contentType = postman.getResponseHeader(\"Content-Type\");",
											"",
											"/* Valid status codes for this resource */",
											"var statusCodes = [200, 400, 401, 403, 404, 422];",
											"",
											"/* JSON error response schema */",
											"var errorSchema = {",
											"    type: 'object',",
											"    required: ['status', 'message'],",
											"    properties: {",
											"        'status' : {",
											"            type: 'number'",
											"        },",
											"        'message' : {",
											"            type: 'string'",
											"        },",
											"        'errors' : {",
											"            type: 'object',",
											"            required: [\"code\", \"message\"],",
											"        }",
											"    }",
											"};",
											"",
											"/* Success JSON message schema */",
											"var successSchema = {",
											"    type: 'object',",
											"    required: ['id'],",
											"    properties: {",
											"        'id' : { type: 'integer' }",
											"    }",
											"};",
											"",
											"",
											"/*",
											" * Basic tests",
											" */",
											"",
											"tests[\"Response time is less than 300ms\"] = (",
											"    responseTime < 300);",
											"",
											"tests[\"Content-Type is 'application/json'\"] = (",
											"    !!contentType && contentType.has(\"application/json\"));",
											"",
											"tests[\"Status code is valid\"] = (",
											"    statusCodes.indexOf(responseCode.code) >= 0);",
											"",
											"",
											"/*",
											" * Validate JSON responses",
											" */",
											"",
											"tests[\"Response is a JSON object\"] = tv4.validate(",
											"    body, {type: 'object'});",
											"",
											"if (responseCode.code >= 400 && responseCode.code < 422) {",
											"    tests[\"Response is a valid error object\"] = tv4.validate(",
											"        body, errorSchema);",
											"}",
											"",
											"if (responseCode.code === 200 && request.method !== 'GET') {",
											"    tests[\"Response is a valid success object\"] = tv4.validate(",
											"        body, successSchema);",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{host}}/api/municipalities/:id",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"municipalities",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{id}}"
										}
									]
								},
								"description": "Update an existing municipality object.\n\nAccess:\n\t\n\tAdministrators."
							},
							"response": []
						},
						{
							"name": "Remove a municipality",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{host}}/api/municipalities/:id",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"municipalities",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{id}}"
										}
									]
								},
								"description": "Remove a single municipality.\n\nAccess:\n\t\n\tAdministrators."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "territories",
					"description": "Territory resource",
					"item": [
						{
							"name": "Territories listing",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"/* Get response body and content type */",
											"var body = JSON.parse(responseBody);",
											"var contentType = postman.getResponseHeader(\"Content-Type\");",
											"",
											"/* Valid status codes for this resource */",
											"var statusCodes = [200, 400, 401, 403, 404, 422];",
											"",
											"/* JSON error response schema */",
											"var errorSchema = {",
											"    type: 'object',",
											"    required: ['status', 'message'],",
											"    properties: {",
											"        'status' : {",
											"            type: 'number'",
											"        },",
											"        'message' : {",
											"            type: 'string'",
											"        },",
											"        'errors' : {",
											"            type: 'object',",
											"            required: [\"code\", \"message\"],",
											"        }",
											"    }",
											"};",
											"",
											"/* Success JSON message schema */",
											"var successSchema = {",
											"    type: 'object',",
											"    required: ['id'],",
											"    properties: {",
											"        'id' : { type: 'integer' }",
											"    }",
											"};",
											"",
											"",
											"/*",
											" * Basic tests",
											" */",
											"",
											"tests[\"Response time is less than 300ms\"] = (",
											"    responseTime < 300);",
											"",
											"tests[\"Content-Type is 'application/json'\"] = (",
											"    !!contentType && contentType.has(\"application/json\"));",
											"",
											"tests[\"Status code is valid\"] = (",
											"    statusCodes.indexOf(responseCode.code) >= 0);",
											"",
											"",
											"/*",
											" * Validate JSON responses",
											" */",
											"",
											"tests[\"Response is a JSON object\"] = tv4.validate(",
											"    body, {type: 'object'});",
											"",
											"if (responseCode.code >= 400 && responseCode.code < 422) {",
											"    tests[\"Response is a valid error object\"] = tv4.validate(",
											"        body, errorSchema);",
											"}",
											"",
											"if (responseCode.code === 200 && request.method !== 'GET') {",
											"    tests[\"Response is a valid success object\"] = tv4.validate(",
											"        body, successSchema);",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{host}}/api/territories?limit={{limit}}&page={{page}}&sort[]={{sort}}&with[]={{with}}&search={{search}}",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"territories"
									],
									"query": [
										{
											"key": "limit",
											"value": "{{limit}}",
											"equals": true
										},
										{
											"key": "page",
											"value": "{{page}}",
											"equals": true
										},
										{
											"key": "sort[]",
											"value": "{{sort}}",
											"equals": true
										},
										{
											"key": "with[]",
											"value": "{{with}}",
											"equals": true
										},
										{
											"key": "search",
											"value": "{{search}}",
											"equals": true
										}
									]
								},
								"description": "Obtain a list of territories.\n\nAccess:\n\t\n\tAll users.\n\nParameters:\n\n    limit     Maximum number of results to fetch\n    page      Page of results to fetch\n    search    Restrict the results to the given search string\n    sort[]    Results order array\n    with[]    Array of related objects to fetch\n\nRelated objects that can be fetched:\n\n"
							},
							"response": []
						},
						{
							"name": "Retrieve a territory",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"/* Get response body and content type */",
											"var body = JSON.parse(responseBody);",
											"var contentType = postman.getResponseHeader(\"Content-Type\");",
											"",
											"/* Valid status codes for this resource */",
											"var statusCodes = [200, 400, 401, 403, 404, 422];",
											"",
											"/* JSON error response schema */",
											"var errorSchema = {",
											"    type: 'object',",
											"    required: ['status', 'message'],",
											"    properties: {",
											"        'status' : {",
											"            type: 'number'",
											"        },",
											"        'message' : {",
											"            type: 'string'",
											"        },",
											"        'errors' : {",
											"            type: 'object',",
											"            required: [\"code\", \"message\"],",
											"        }",
											"    }",
											"};",
											"",
											"/* Success JSON message schema */",
											"var successSchema = {",
											"    type: 'object',",
											"    required: ['id'],",
											"    properties: {",
											"        'id' : { type: 'integer' }",
											"    }",
											"};",
											"",
											"",
											"/*",
											" * Basic tests",
											" */",
											"",
											"tests[\"Response time is less than 300ms\"] = (",
											"    responseTime < 300);",
											"",
											"tests[\"Content-Type is 'application/json'\"] = (",
											"    !!contentType && contentType.has(\"application/json\"));",
											"",
											"tests[\"Status code is valid\"] = (",
											"    statusCodes.indexOf(responseCode.code) >= 0);",
											"",
											"",
											"/*",
											" * Validate JSON responses",
											" */",
											"",
											"tests[\"Response is a JSON object\"] = tv4.validate(",
											"    body, {type: 'object'});",
											"",
											"if (responseCode.code >= 400 && responseCode.code < 422) {",
											"    tests[\"Response is a valid error object\"] = tv4.validate(",
											"        body, errorSchema);",
											"}",
											"",
											"if (responseCode.code === 200 && request.method !== 'GET') {",
											"    tests[\"Response is a valid success object\"] = tv4.validate(",
											"        body, successSchema);",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{host}}/api/territories/:id",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"territories",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{id}}"
										}
									]
								},
								"description": "Retrieve a single territory object.\n\nAccess:\n\t\n\tAll users."
							},
							"response": []
						},
						{
							"name": "Store a new territory",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"/* Get response body and content type */",
											"var body = JSON.parse(responseBody);",
											"var contentType = postman.getResponseHeader(\"Content-Type\");",
											"",
											"/* Valid status codes for this resource */",
											"var statusCodes = [200, 400, 401, 403, 404, 422];",
											"",
											"/* JSON error response schema */",
											"var errorSchema = {",
											"    type: 'object',",
											"    required: ['status', 'message'],",
											"    properties: {",
											"        'status' : {",
											"            type: 'number'",
											"        },",
											"        'message' : {",
											"            type: 'string'",
											"        },",
											"        'errors' : {",
											"            type: 'object',",
											"            required: [\"code\", \"message\"],",
											"        }",
											"    }",
											"};",
											"",
											"/* Success JSON message schema */",
											"var successSchema = {",
											"    type: 'object',",
											"    required: ['id'],",
											"    properties: {",
											"        'id' : { type: 'integer' }",
											"    }",
											"};",
											"",
											"",
											"/*",
											" * Basic tests",
											" */",
											"",
											"tests[\"Response time is less than 300ms\"] = (",
											"    responseTime < 300);",
											"",
											"tests[\"Content-Type is 'application/json'\"] = (",
											"    !!contentType && contentType.has(\"application/json\"));",
											"",
											"tests[\"Status code is valid\"] = (",
											"    statusCodes.indexOf(responseCode.code) >= 0);",
											"",
											"",
											"/*",
											" * Validate JSON responses",
											" */",
											"",
											"tests[\"Response is a JSON object\"] = tv4.validate(",
											"    body, {type: 'object'});",
											"",
											"if (responseCode.code >= 400 && responseCode.code < 422) {",
											"    tests[\"Response is a valid error object\"] = tv4.validate(",
											"        body, errorSchema);",
											"}",
											"",
											"if (responseCode.code === 200 && request.method !== 'GET') {",
											"    tests[\"Response is a valid success object\"] = tv4.validate(",
											"        body, successSchema);",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{host}}/api/territories",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"territories"
									]
								},
								"description": "Create a new territory object.\n\nAccess:\n\t\n\tAdministrators."
							},
							"response": []
						},
						{
							"name": "Update a territory",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"/* Get response body and content type */",
											"var body = JSON.parse(responseBody);",
											"var contentType = postman.getResponseHeader(\"Content-Type\");",
											"",
											"/* Valid status codes for this resource */",
											"var statusCodes = [200, 400, 401, 403, 404, 422];",
											"",
											"/* JSON error response schema */",
											"var errorSchema = {",
											"    type: 'object',",
											"    required: ['status', 'message'],",
											"    properties: {",
											"        'status' : {",
											"            type: 'number'",
											"        },",
											"        'message' : {",
											"            type: 'string'",
											"        },",
											"        'errors' : {",
											"            type: 'object',",
											"            required: [\"code\", \"message\"],",
											"        }",
											"    }",
											"};",
											"",
											"/* Success JSON message schema */",
											"var successSchema = {",
											"    type: 'object',",
											"    required: ['id'],",
											"    properties: {",
											"        'id' : { type: 'integer' }",
											"    }",
											"};",
											"",
											"",
											"/*",
											" * Basic tests",
											" */",
											"",
											"tests[\"Response time is less than 300ms\"] = (",
											"    responseTime < 300);",
											"",
											"tests[\"Content-Type is 'application/json'\"] = (",
											"    !!contentType && contentType.has(\"application/json\"));",
											"",
											"tests[\"Status code is valid\"] = (",
											"    statusCodes.indexOf(responseCode.code) >= 0);",
											"",
											"",
											"/*",
											" * Validate JSON responses",
											" */",
											"",
											"tests[\"Response is a JSON object\"] = tv4.validate(",
											"    body, {type: 'object'});",
											"",
											"if (responseCode.code >= 400 && responseCode.code < 422) {",
											"    tests[\"Response is a valid error object\"] = tv4.validate(",
											"        body, errorSchema);",
											"}",
											"",
											"if (responseCode.code === 200 && request.method !== 'GET') {",
											"    tests[\"Response is a valid success object\"] = tv4.validate(",
											"        body, successSchema);",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{host}}/api/territories/:id",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"territories",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{id}}"
										}
									]
								},
								"description": "Update an existing territory object.\n\nAccess:\n\t\n\tAdministrators."
							},
							"response": []
						},
						{
							"name": "Remove a territory",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{host}}/api/territories/:id",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"territories",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{id}}"
										}
									]
								},
								"description": "Remove a single territory.\n\nAccess:\n\t\n\tAdministrators."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "SYNAPSES",
			"item": [
				{
					"name": "blocks",
					"description": "Block resource",
					"item": [
						{
							"name": "Blocks listing",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"/* Get response body and content type */",
											"var body = JSON.parse(responseBody);",
											"var contentType = postman.getResponseHeader(\"Content-Type\");",
											"",
											"/* Valid status codes for this resource */",
											"var statusCodes = [200, 400, 401, 403, 404, 422];",
											"",
											"/* JSON error response schema */",
											"var errorSchema = {",
											"    type: 'object',",
											"    required: ['status', 'message'],",
											"    properties: {",
											"        'status' : {",
											"            type: 'number'",
											"        },",
											"        'message' : {",
											"            type: 'string'",
											"        },",
											"        'errors' : {",
											"            type: 'object',",
											"            required: [\"code\", \"message\"],",
											"        }",
											"    }",
											"};",
											"",
											"/* Success JSON message schema */",
											"var successSchema = {",
											"    type: 'object',",
											"    required: ['id'],",
											"    properties: {",
											"        'id' : { type: 'integer' }",
											"    }",
											"};",
											"",
											"",
											"/*",
											" * Basic tests",
											" */",
											"",
											"tests[\"Response time is less than 300ms\"] = (",
											"    responseTime < 300);",
											"",
											"tests[\"Content-Type is 'application/json'\"] = (",
											"    !!contentType && contentType.has(\"application/json\"));",
											"",
											"tests[\"Status code is valid\"] = (",
											"    statusCodes.indexOf(responseCode.code) >= 0);",
											"",
											"",
											"/*",
											" * Validate JSON responses",
											" */",
											"",
											"tests[\"Response is a JSON object\"] = tv4.validate(",
											"    body, {type: 'object'});",
											"",
											"if (responseCode.code >= 400 && responseCode.code < 422) {",
											"    tests[\"Response is a valid error object\"] = tv4.validate(",
											"        body, errorSchema);",
											"}",
											"",
											"if (responseCode.code === 200 && request.method !== 'GET') {",
											"    tests[\"Response is a valid success object\"] = tv4.validate(",
											"        body, successSchema);",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{host}}/api/blocks?limit={{limit}}&page={{page}}&sort[]={{sort}}&with[]={{with}}&search={{search}}",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"blocks"
									],
									"query": [
										{
											"key": "limit",
											"value": "{{limit}}",
											"equals": true
										},
										{
											"key": "page",
											"value": "{{page}}",
											"equals": true
										},
										{
											"key": "sort[]",
											"value": "{{sort}}",
											"equals": true
										},
										{
											"key": "with[]",
											"value": "{{with}}",
											"equals": true
										},
										{
											"key": "search",
											"value": "{{search}}",
											"equals": true
										}
									]
								},
								"description": "Obtain a list of blocks.\n\nAccess:\n\t\n\tAll users.\n\nParameters:\n\n    limit     Maximum number of results to fetch\n    page      Page of results to fetch\n    search    Restrict the results to the given search string\n    sort[]    Results order array\n    with[]    Array of related objects to fetch\n\nRelated objects that can be fetched:\n\n    synapse   Synapse object\n"
							},
							"response": []
						},
						{
							"name": "Retrieve a block",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"/* Get response body and content type */",
											"var body = JSON.parse(responseBody);",
											"var contentType = postman.getResponseHeader(\"Content-Type\");",
											"",
											"/* Valid status codes for this resource */",
											"var statusCodes = [200, 400, 401, 403, 404, 422];",
											"",
											"/* JSON error response schema */",
											"var errorSchema = {",
											"    type: 'object',",
											"    required: ['status', 'message'],",
											"    properties: {",
											"        'status' : {",
											"            type: 'number'",
											"        },",
											"        'message' : {",
											"            type: 'string'",
											"        },",
											"        'errors' : {",
											"            type: 'object',",
											"            required: [\"code\", \"message\"],",
											"        }",
											"    }",
											"};",
											"",
											"/* Success JSON message schema */",
											"var successSchema = {",
											"    type: 'object',",
											"    required: ['id'],",
											"    properties: {",
											"        'id' : { type: 'integer' }",
											"    }",
											"};",
											"",
											"",
											"/*",
											" * Basic tests",
											" */",
											"",
											"tests[\"Response time is less than 300ms\"] = (",
											"    responseTime < 300);",
											"",
											"tests[\"Content-Type is 'application/json'\"] = (",
											"    !!contentType && contentType.has(\"application/json\"));",
											"",
											"tests[\"Status code is valid\"] = (",
											"    statusCodes.indexOf(responseCode.code) >= 0);",
											"",
											"",
											"/*",
											" * Validate JSON responses",
											" */",
											"",
											"tests[\"Response is a JSON object\"] = tv4.validate(",
											"    body, {type: 'object'});",
											"",
											"if (responseCode.code >= 400 && responseCode.code < 422) {",
											"    tests[\"Response is a valid error object\"] = tv4.validate(",
											"        body, errorSchema);",
											"}",
											"",
											"if (responseCode.code === 200 && request.method !== 'GET') {",
											"    tests[\"Response is a valid success object\"] = tv4.validate(",
											"        body, successSchema);",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{host}}/api/blocks/:id",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"blocks",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{id}}"
										}
									]
								},
								"description": "Retrieve a single block object.\n\nAccess:\n\t\n\tAll users.\n"
							},
							"response": []
						},
						{
							"name": "Store a new block",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"/* Get response body and content type */",
											"var body = JSON.parse(responseBody);",
											"var contentType = postman.getResponseHeader(\"Content-Type\");",
											"",
											"/* Valid status codes for this resource */",
											"var statusCodes = [200, 400, 401, 403, 404, 422];",
											"",
											"/* JSON error response schema */",
											"var errorSchema = {",
											"    type: 'object',",
											"    required: ['status', 'message'],",
											"    properties: {",
											"        'status' : {",
											"            type: 'number'",
											"        },",
											"        'message' : {",
											"            type: 'string'",
											"        },",
											"        'errors' : {",
											"            type: 'object',",
											"            required: [\"code\", \"message\"],",
											"        }",
											"    }",
											"};",
											"",
											"/* Success JSON message schema */",
											"var successSchema = {",
											"    type: 'object',",
											"    required: ['id'],",
											"    properties: {",
											"        'id' : { type: 'integer' }",
											"    }",
											"};",
											"",
											"",
											"/*",
											" * Basic tests",
											" */",
											"",
											"tests[\"Response time is less than 300ms\"] = (",
											"    responseTime < 300);",
											"",
											"tests[\"Content-Type is 'application/json'\"] = (",
											"    !!contentType && contentType.has(\"application/json\"));",
											"",
											"tests[\"Status code is valid\"] = (",
											"    statusCodes.indexOf(responseCode.code) >= 0);",
											"",
											"",
											"/*",
											" * Validate JSON responses",
											" */",
											"",
											"tests[\"Response is a JSON object\"] = tv4.validate(",
											"    body, {type: 'object'});",
											"",
											"if (responseCode.code >= 400 && responseCode.code < 422) {",
											"    tests[\"Response is a valid error object\"] = tv4.validate(",
											"        body, errorSchema);",
											"}",
											"",
											"if (responseCode.code === 200 && request.method !== 'GET') {",
											"    tests[\"Response is a valid success object\"] = tv4.validate(",
											"        body, successSchema);",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{host}}/api/blocks",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"blocks"
									]
								},
								"description": "Create a new block object.\n\nAccess:\n\t\n\tAuthenticated users. The authenticated user must have\n\teditor privileges over the synapse.\n"
							},
							"response": []
						},
						{
							"name": "Update a block",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"/* Get response body and content type */",
											"var body = JSON.parse(responseBody);",
											"var contentType = postman.getResponseHeader(\"Content-Type\");",
											"",
											"/* Valid status codes for this resource */",
											"var statusCodes = [200, 400, 401, 403, 404, 422];",
											"",
											"/* JSON error response schema */",
											"var errorSchema = {",
											"    type: 'object',",
											"    required: ['status', 'message'],",
											"    properties: {",
											"        'status' : {",
											"            type: 'number'",
											"        },",
											"        'message' : {",
											"            type: 'string'",
											"        },",
											"        'errors' : {",
											"            type: 'object',",
											"            required: [\"code\", \"message\"],",
											"        }",
											"    }",
											"};",
											"",
											"/* Success JSON message schema */",
											"var successSchema = {",
											"    type: 'object',",
											"    required: ['id'],",
											"    properties: {",
											"        'id' : { type: 'integer' }",
											"    }",
											"};",
											"",
											"",
											"/*",
											" * Basic tests",
											" */",
											"",
											"tests[\"Response time is less than 300ms\"] = (",
											"    responseTime < 300);",
											"",
											"tests[\"Content-Type is 'application/json'\"] = (",
											"    !!contentType && contentType.has(\"application/json\"));",
											"",
											"tests[\"Status code is valid\"] = (",
											"    statusCodes.indexOf(responseCode.code) >= 0);",
											"",
											"",
											"/*",
											" * Validate JSON responses",
											" */",
											"",
											"tests[\"Response is a JSON object\"] = tv4.validate(",
											"    body, {type: 'object'});",
											"",
											"if (responseCode.code >= 400 && responseCode.code < 422) {",
											"    tests[\"Response is a valid error object\"] = tv4.validate(",
											"        body, errorSchema);",
											"}",
											"",
											"if (responseCode.code === 200 && request.method !== 'GET') {",
											"    tests[\"Response is a valid success object\"] = tv4.validate(",
											"        body, successSchema);",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{host}}/api/blocks/:id",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"blocks",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{id}}"
										}
									]
								},
								"description": "Update an existing block object.\n\nAccess:\n\t\n\tAuthenticated users. The authenticated user must have\n\teditor privileges over the synapse."
							},
							"response": []
						},
						{
							"name": "Remove a block",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{host}}/api/blocks/:id",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"blocks",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{id}}"
										}
									]
								},
								"description": "Remove a single block.\n\nAccess:\n\t\n\tAuthenticated users. The authenticated user must have\n\teditor privileges over the synapse."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "synapses",
					"description": "Synapse resource",
					"item": [
						{
							"name": "bumps",
							"description": "Synapse post bumps resource",
							"item": [
								{
									"name": "Post bumps listing",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"/* Get response body and content type */",
													"var body = JSON.parse(responseBody);",
													"var contentType = postman.getResponseHeader(\"Content-Type\");",
													"",
													"/* Valid status codes for this resource */",
													"var statusCodes = [200, 400, 401, 403, 404, 422];",
													"",
													"/* JSON error response schema */",
													"var errorSchema = {",
													"    type: 'object',",
													"    required: ['status', 'message'],",
													"    properties: {",
													"        'status' : {",
													"            type: 'number'",
													"        },",
													"        'message' : {",
													"            type: 'string'",
													"        },",
													"        'errors' : {",
													"            type: 'object',",
													"            required: [\"code\", \"message\"],",
													"        }",
													"    }",
													"};",
													"",
													"/* Success JSON message schema */",
													"var successSchema = {",
													"    type: 'object',",
													"    required: ['id'],",
													"    properties: {",
													"        'id' : { type: 'integer' }",
													"    }",
													"};",
													"",
													"",
													"/*",
													" * Basic tests",
													" */",
													"",
													"tests[\"Response time is less than 300ms\"] = (",
													"    responseTime < 300);",
													"",
													"tests[\"Content-Type is 'application/json'\"] = (",
													"    !!contentType && contentType.has(\"application/json\"));",
													"",
													"tests[\"Status code is valid\"] = (",
													"    statusCodes.indexOf(responseCode.code) >= 0);",
													"",
													"",
													"/*",
													" * Validate JSON responses",
													" */",
													"",
													"tests[\"Response is a JSON object\"] = tv4.validate(",
													"    body, {type: 'object'});",
													"",
													"if (responseCode.code >= 400 && responseCode.code < 422) {",
													"    tests[\"Response is a valid error object\"] = tv4.validate(",
													"        body, errorSchema);",
													"}",
													"",
													"if (responseCode.code === 200 && request.method !== 'GET') {",
													"    tests[\"Response is a valid success object\"] = tv4.validate(",
													"        body, successSchema);",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{host}}/api/synapses/bumps?limit={{limit}}&page={{page}}&sort[]={{sort}}&with[]={{with}}&search={{search}}",
											"protocol": "http",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"synapses",
												"bumps"
											],
											"query": [
												{
													"key": "limit",
													"value": "{{limit}}",
													"equals": true
												},
												{
													"key": "page",
													"value": "{{page}}",
													"equals": true
												},
												{
													"key": "sort[]",
													"value": "{{sort}}",
													"equals": true
												},
												{
													"key": "with[]",
													"value": "{{with}}",
													"equals": true
												},
												{
													"key": "search",
													"value": "{{search}}",
													"equals": true
												}
											]
										},
										"description": "Obtain a list of synapse post bumps.\n\nAccess:\n\t\n\tAuthenticated users.\n\nParameters:\n\n    limit     Maximum number of results to fetch\n    page      Page of results to fetch\n    search    Restrict the results to the given search string\n    sort[]    Results order array\n    with[]    Array of related objects to fetch\n\nRelated objects that can be fetched:\n\n    post      Post object\n    synapse   Synapse object\t"
									},
									"response": []
								},
								{
									"name": "Retrieve a post bump",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"/* Get response body and content type */",
													"var body = JSON.parse(responseBody);",
													"var contentType = postman.getResponseHeader(\"Content-Type\");",
													"",
													"/* Valid status codes for this resource */",
													"var statusCodes = [200, 400, 401, 403, 404, 422];",
													"",
													"/* JSON error response schema */",
													"var errorSchema = {",
													"    type: 'object',",
													"    required: ['status', 'message'],",
													"    properties: {",
													"        'status' : {",
													"            type: 'number'",
													"        },",
													"        'message' : {",
													"            type: 'string'",
													"        },",
													"        'errors' : {",
													"            type: 'object',",
													"            required: [\"code\", \"message\"],",
													"        }",
													"    }",
													"};",
													"",
													"/* Success JSON message schema */",
													"var successSchema = {",
													"    type: 'object',",
													"    required: ['id'],",
													"    properties: {",
													"        'id' : { type: 'integer' }",
													"    }",
													"};",
													"",
													"",
													"/*",
													" * Basic tests",
													" */",
													"",
													"tests[\"Response time is less than 300ms\"] = (",
													"    responseTime < 300);",
													"",
													"tests[\"Content-Type is 'application/json'\"] = (",
													"    !!contentType && contentType.has(\"application/json\"));",
													"",
													"tests[\"Status code is valid\"] = (",
													"    statusCodes.indexOf(responseCode.code) >= 0);",
													"",
													"",
													"/*",
													" * Validate JSON responses",
													" */",
													"",
													"tests[\"Response is a JSON object\"] = tv4.validate(",
													"    body, {type: 'object'});",
													"",
													"if (responseCode.code >= 400 && responseCode.code < 422) {",
													"    tests[\"Response is a valid error object\"] = tv4.validate(",
													"        body, errorSchema);",
													"}",
													"",
													"if (responseCode.code === 200 && request.method !== 'GET') {",
													"    tests[\"Response is a valid success object\"] = tv4.validate(",
													"        body, successSchema);",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{host}}/api/synapses/bumps/:id",
											"protocol": "http",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"synapses",
												"bumps",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{id}}"
												}
											]
										},
										"description": "Retrieve a single synapse post bump object.\n\nAccess:\n\t\n\tAuthenticated users."
									},
									"response": []
								},
								{
									"name": "Store a new post bump",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"/* Get response body and content type */",
													"var body = JSON.parse(responseBody);",
													"var contentType = postman.getResponseHeader(\"Content-Type\");",
													"",
													"/* Valid status codes for this resource */",
													"var statusCodes = [200, 400, 401, 403, 404, 422];",
													"",
													"/* JSON error response schema */",
													"var errorSchema = {",
													"    type: 'object',",
													"    required: ['status', 'message'],",
													"    properties: {",
													"        'status' : {",
													"            type: 'number'",
													"        },",
													"        'message' : {",
													"            type: 'string'",
													"        },",
													"        'errors' : {",
													"            type: 'object',",
													"            required: [\"code\", \"message\"],",
													"        }",
													"    }",
													"};",
													"",
													"/* Success JSON message schema */",
													"var successSchema = {",
													"    type: 'object',",
													"    required: ['id'],",
													"    properties: {",
													"        'id' : { type: 'integer' }",
													"    }",
													"};",
													"",
													"",
													"/*",
													" * Basic tests",
													" */",
													"",
													"tests[\"Response time is less than 300ms\"] = (",
													"    responseTime < 300);",
													"",
													"tests[\"Content-Type is 'application/json'\"] = (",
													"    !!contentType && contentType.has(\"application/json\"));",
													"",
													"tests[\"Status code is valid\"] = (",
													"    statusCodes.indexOf(responseCode.code) >= 0);",
													"",
													"",
													"/*",
													" * Validate JSON responses",
													" */",
													"",
													"tests[\"Response is a JSON object\"] = tv4.validate(",
													"    body, {type: 'object'});",
													"",
													"if (responseCode.code >= 400 && responseCode.code < 422) {",
													"    tests[\"Response is a valid error object\"] = tv4.validate(",
													"        body, errorSchema);",
													"}",
													"",
													"if (responseCode.code === 200 && request.method !== 'GET') {",
													"    tests[\"Response is a valid success object\"] = tv4.validate(",
													"        body, successSchema);",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{host}}/api/synapses/bumps",
											"protocol": "http",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"synapses",
												"bumps"
											]
										},
										"description": "Create a new synapse post bump object.\n\nAccess:\n\n\tAuthenticated users. The authenticated user must have\n\tedition privileges over the synapse."
									},
									"response": []
								},
								{
									"name": "Update a post bump",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"/* Get response body and content type */",
													"var body = JSON.parse(responseBody);",
													"var contentType = postman.getResponseHeader(\"Content-Type\");",
													"",
													"/* Valid status codes for this resource */",
													"var statusCodes = [200, 400, 401, 403, 404, 422];",
													"",
													"/* JSON error response schema */",
													"var errorSchema = {",
													"    type: 'object',",
													"    required: ['status', 'message'],",
													"    properties: {",
													"        'status' : {",
													"            type: 'number'",
													"        },",
													"        'message' : {",
													"            type: 'string'",
													"        },",
													"        'errors' : {",
													"            type: 'object',",
													"            required: [\"code\", \"message\"],",
													"        }",
													"    }",
													"};",
													"",
													"/* Success JSON message schema */",
													"var successSchema = {",
													"    type: 'object',",
													"    required: ['id'],",
													"    properties: {",
													"        'id' : { type: 'integer' }",
													"    }",
													"};",
													"",
													"",
													"/*",
													" * Basic tests",
													" */",
													"",
													"tests[\"Response time is less than 300ms\"] = (",
													"    responseTime < 300);",
													"",
													"tests[\"Content-Type is 'application/json'\"] = (",
													"    !!contentType && contentType.has(\"application/json\"));",
													"",
													"tests[\"Status code is valid\"] = (",
													"    statusCodes.indexOf(responseCode.code) >= 0);",
													"",
													"",
													"/*",
													" * Validate JSON responses",
													" */",
													"",
													"tests[\"Response is a JSON object\"] = tv4.validate(",
													"    body, {type: 'object'});",
													"",
													"if (responseCode.code >= 400 && responseCode.code < 422) {",
													"    tests[\"Response is a valid error object\"] = tv4.validate(",
													"        body, errorSchema);",
													"}",
													"",
													"if (responseCode.code === 200 && request.method !== 'GET') {",
													"    tests[\"Response is a valid success object\"] = tv4.validate(",
													"        body, successSchema);",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{host}}/api/synapses/bumps/:id",
											"protocol": "http",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"synapses",
												"bumps",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{id}}"
												}
											]
										},
										"description": "Update an existing synapse post bump object.\n\nAccess:\n\n\tAuthenticated users. The authenticated user must have\n\tedition privileges over the synapse."
									},
									"response": []
								},
								{
									"name": "Remove a post bump",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{host}}/api/synapses/bumps/:id",
											"protocol": "http",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"synapses",
												"bumps",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{id}}"
												}
											]
										},
										"description": "Remove a single synapse post bump.\n\nAccess:\n\n\tAuthenticated users. The authenticated user must have\n\tedition privileges over the synapse."
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "privileges",
							"description": "Synapse privileges resource",
							"item": [
								{
									"name": "Privileges listing",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"/* Get response body and content type */",
													"var body = JSON.parse(responseBody);",
													"var contentType = postman.getResponseHeader(\"Content-Type\");",
													"",
													"/* Valid status codes for this resource */",
													"var statusCodes = [200, 400, 401, 403, 404, 422];",
													"",
													"/* JSON error response schema */",
													"var errorSchema = {",
													"    type: 'object',",
													"    required: ['status', 'message'],",
													"    properties: {",
													"        'status' : {",
													"            type: 'number'",
													"        },",
													"        'message' : {",
													"            type: 'string'",
													"        },",
													"        'errors' : {",
													"            type: 'object',",
													"            required: [\"code\", \"message\"],",
													"        }",
													"    }",
													"};",
													"",
													"/* Success JSON message schema */",
													"var successSchema = {",
													"    type: 'object',",
													"    required: ['id'],",
													"    properties: {",
													"        'id' : { type: 'integer' }",
													"    }",
													"};",
													"",
													"",
													"/*",
													" * Basic tests",
													" */",
													"",
													"tests[\"Response time is less than 300ms\"] = (",
													"    responseTime < 300);",
													"",
													"tests[\"Content-Type is 'application/json'\"] = (",
													"    !!contentType && contentType.has(\"application/json\"));",
													"",
													"tests[\"Status code is valid\"] = (",
													"    statusCodes.indexOf(responseCode.code) >= 0);",
													"",
													"",
													"/*",
													" * Validate JSON responses",
													" */",
													"",
													"tests[\"Response is a JSON object\"] = tv4.validate(",
													"    body, {type: 'object'});",
													"",
													"if (responseCode.code >= 400 && responseCode.code < 422) {",
													"    tests[\"Response is a valid error object\"] = tv4.validate(",
													"        body, errorSchema);",
													"}",
													"",
													"if (responseCode.code === 200 && request.method !== 'GET') {",
													"    tests[\"Response is a valid success object\"] = tv4.validate(",
													"        body, successSchema);",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{host}}/api/synapses/privileges?limit={{limit}}&page={{page}}&sort[]={{sort}}&with[]={{with}}&search={{search}}",
											"protocol": "http",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"synapses",
												"privileges"
											],
											"query": [
												{
													"key": "limit",
													"value": "{{limit}}",
													"equals": true
												},
												{
													"key": "page",
													"value": "{{page}}",
													"equals": true
												},
												{
													"key": "sort[]",
													"value": "{{sort}}",
													"equals": true
												},
												{
													"key": "with[]",
													"value": "{{with}}",
													"equals": true
												},
												{
													"key": "search",
													"value": "{{search}}",
													"equals": true
												}
											]
										},
										"description": "Obtain a list of synapse privileges.\n\nAccess:\n\t\n\tAuthenticated users.\n\nParameters:\n\n    limit     Maximum number of results to fetch\n    page      Page of results to fetch\n    search    Restrict the results to the given search string\n    sort[]    Results order array\n    with[]    Array of related objects to fetch\n\nRelated objects that can be fetched:\n\n    synapse   Synapse object\n    user      User object"
									},
									"response": []
								},
								{
									"name": "Retrieve a privilege",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"/* Get response body and content type */",
													"var body = JSON.parse(responseBody);",
													"var contentType = postman.getResponseHeader(\"Content-Type\");",
													"",
													"/* Valid status codes for this resource */",
													"var statusCodes = [200, 400, 401, 403, 404, 422];",
													"",
													"/* JSON error response schema */",
													"var errorSchema = {",
													"    type: 'object',",
													"    required: ['status', 'message'],",
													"    properties: {",
													"        'status' : {",
													"            type: 'number'",
													"        },",
													"        'message' : {",
													"            type: 'string'",
													"        },",
													"        'errors' : {",
													"            type: 'object',",
													"            required: [\"code\", \"message\"],",
													"        }",
													"    }",
													"};",
													"",
													"/* Success JSON message schema */",
													"var successSchema = {",
													"    type: 'object',",
													"    required: ['id'],",
													"    properties: {",
													"        'id' : { type: 'integer' }",
													"    }",
													"};",
													"",
													"",
													"/*",
													" * Basic tests",
													" */",
													"",
													"tests[\"Response time is less than 300ms\"] = (",
													"    responseTime < 300);",
													"",
													"tests[\"Content-Type is 'application/json'\"] = (",
													"    !!contentType && contentType.has(\"application/json\"));",
													"",
													"tests[\"Status code is valid\"] = (",
													"    statusCodes.indexOf(responseCode.code) >= 0);",
													"",
													"",
													"/*",
													" * Validate JSON responses",
													" */",
													"",
													"tests[\"Response is a JSON object\"] = tv4.validate(",
													"    body, {type: 'object'});",
													"",
													"if (responseCode.code >= 400 && responseCode.code < 422) {",
													"    tests[\"Response is a valid error object\"] = tv4.validate(",
													"        body, errorSchema);",
													"}",
													"",
													"if (responseCode.code === 200 && request.method !== 'GET') {",
													"    tests[\"Response is a valid success object\"] = tv4.validate(",
													"        body, successSchema);",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{host}}/api/synapses/privileges/:id",
											"protocol": "http",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"synapses",
												"privileges",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{id}}"
												}
											]
										},
										"description": "Retrieve a single synapse privilege object.\n\nAccess:\n\t\n\tAuthenticated users."
									},
									"response": []
								},
								{
									"name": "Store a new privilege",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"/* Get response body and content type */",
													"var body = JSON.parse(responseBody);",
													"var contentType = postman.getResponseHeader(\"Content-Type\");",
													"",
													"/* Valid status codes for this resource */",
													"var statusCodes = [200, 400, 401, 403, 404, 422];",
													"",
													"/* JSON error response schema */",
													"var errorSchema = {",
													"    type: 'object',",
													"    required: ['status', 'message'],",
													"    properties: {",
													"        'status' : {",
													"            type: 'number'",
													"        },",
													"        'message' : {",
													"            type: 'string'",
													"        },",
													"        'errors' : {",
													"            type: 'object',",
													"            required: [\"code\", \"message\"],",
													"        }",
													"    }",
													"};",
													"",
													"/* Success JSON message schema */",
													"var successSchema = {",
													"    type: 'object',",
													"    required: ['id'],",
													"    properties: {",
													"        'id' : { type: 'integer' }",
													"    }",
													"};",
													"",
													"",
													"/*",
													" * Basic tests",
													" */",
													"",
													"tests[\"Response time is less than 300ms\"] = (",
													"    responseTime < 300);",
													"",
													"tests[\"Content-Type is 'application/json'\"] = (",
													"    !!contentType && contentType.has(\"application/json\"));",
													"",
													"tests[\"Status code is valid\"] = (",
													"    statusCodes.indexOf(responseCode.code) >= 0);",
													"",
													"",
													"/*",
													" * Validate JSON responses",
													" */",
													"",
													"tests[\"Response is a JSON object\"] = tv4.validate(",
													"    body, {type: 'object'});",
													"",
													"if (responseCode.code >= 400 && responseCode.code < 422) {",
													"    tests[\"Response is a valid error object\"] = tv4.validate(",
													"        body, errorSchema);",
													"}",
													"",
													"if (responseCode.code === 200 && request.method !== 'GET') {",
													"    tests[\"Response is a valid success object\"] = tv4.validate(",
													"        body, successSchema);",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{host}}/api/synapses/privileges",
											"protocol": "http",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"synapses",
												"privileges"
											]
										},
										"description": "Create a new synapse privilege object.\n\nAccess:\n\n\tAuthenticated users. The authenticated user must have\n\tadministration privileges over the synapse."
									},
									"response": []
								},
								{
									"name": "Update a privilege",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"/* Get response body and content type */",
													"var body = JSON.parse(responseBody);",
													"var contentType = postman.getResponseHeader(\"Content-Type\");",
													"",
													"/* Valid status codes for this resource */",
													"var statusCodes = [200, 400, 401, 403, 404, 422];",
													"",
													"/* JSON error response schema */",
													"var errorSchema = {",
													"    type: 'object',",
													"    required: ['status', 'message'],",
													"    properties: {",
													"        'status' : {",
													"            type: 'number'",
													"        },",
													"        'message' : {",
													"            type: 'string'",
													"        },",
													"        'errors' : {",
													"            type: 'object',",
													"            required: [\"code\", \"message\"],",
													"        }",
													"    }",
													"};",
													"",
													"/* Success JSON message schema */",
													"var successSchema = {",
													"    type: 'object',",
													"    required: ['id'],",
													"    properties: {",
													"        'id' : { type: 'integer' }",
													"    }",
													"};",
													"",
													"",
													"/*",
													" * Basic tests",
													" */",
													"",
													"tests[\"Response time is less than 300ms\"] = (",
													"    responseTime < 300);",
													"",
													"tests[\"Content-Type is 'application/json'\"] = (",
													"    !!contentType && contentType.has(\"application/json\"));",
													"",
													"tests[\"Status code is valid\"] = (",
													"    statusCodes.indexOf(responseCode.code) >= 0);",
													"",
													"",
													"/*",
													" * Validate JSON responses",
													" */",
													"",
													"tests[\"Response is a JSON object\"] = tv4.validate(",
													"    body, {type: 'object'});",
													"",
													"if (responseCode.code >= 400 && responseCode.code < 422) {",
													"    tests[\"Response is a valid error object\"] = tv4.validate(",
													"        body, errorSchema);",
													"}",
													"",
													"if (responseCode.code === 200 && request.method !== 'GET') {",
													"    tests[\"Response is a valid success object\"] = tv4.validate(",
													"        body, successSchema);",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{host}}/api/synapses/privileges/:id",
											"protocol": "http",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"synapses",
												"privileges",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{id}}"
												}
											]
										},
										"description": "Update an existing synapse privilege object.\n\nAccess:\n\n\tAuthenticated users. The authenticated user must have\n\tadministration privileges over the synapse."
									},
									"response": []
								},
								{
									"name": "Remove a privilege",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{host}}/api/synapses/privileges/:id",
											"protocol": "http",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"synapses",
												"privileges",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{id}}"
												}
											]
										},
										"description": "Remove a single synapse privilege.\n\nAccess:\n\n\tAuthenticated users. The authenticated user must have\n\tadministration privileges over the synapse."
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "nodes",
							"item": [
								{
									"name": "Synapse roots",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"/* Get response body and content type */",
													"var body = JSON.parse(responseBody);",
													"var contentType = postman.getResponseHeader(\"Content-Type\");",
													"",
													"/* Valid status codes for this resource */",
													"var statusCodes = [200, 400, 401, 403, 404, 422];",
													"",
													"/* JSON error response schema */",
													"var errorSchema = {",
													"    type: 'object',",
													"    required: ['status', 'message'],",
													"    properties: {",
													"        'status' : {",
													"            type: 'number'",
													"        },",
													"        'message' : {",
													"            type: 'string'",
													"        },",
													"        'errors' : {",
													"            type: 'object',",
													"            required: [\"code\", \"message\"],",
													"        }",
													"    }",
													"};",
													"",
													"/* Success JSON message schema */",
													"var successSchema = {",
													"    type: 'object',",
													"    required: ['id'],",
													"    properties: {",
													"        'id' : { type: 'integer' }",
													"    }",
													"};",
													"",
													"",
													"/*",
													" * Basic tests",
													" */",
													"",
													"tests[\"Response time is less than 300ms\"] = (",
													"    responseTime < 300);",
													"",
													"tests[\"Content-Type is 'application/json'\"] = (",
													"    !!contentType && contentType.has(\"application/json\"));",
													"",
													"tests[\"Status code is valid\"] = (",
													"    statusCodes.indexOf(responseCode.code) >= 0);",
													"",
													"",
													"/*",
													" * Validate JSON responses",
													" */",
													"",
													"tests[\"Response is a JSON object\"] = tv4.validate(",
													"    body, {type: 'object'});",
													"",
													"if (responseCode.code >= 400 && responseCode.code < 422) {",
													"    tests[\"Response is a valid error object\"] = tv4.validate(",
													"        body, errorSchema);",
													"}",
													"",
													"if (responseCode.code === 200 && request.method !== 'GET') {",
													"    tests[\"Response is a valid success object\"] = tv4.validate(",
													"        body, successSchema);",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{host}}/api/synapses/nodes?limit={{limit}}&page={{page}}&sort[]={{sort}}&with[]={{with}}&search={{search}}",
											"protocol": "http",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"synapses",
												"nodes"
											],
											"query": [
												{
													"key": "limit",
													"value": "{{limit}}",
													"equals": true
												},
												{
													"key": "page",
													"value": "{{page}}",
													"equals": true
												},
												{
													"key": "sort[]",
													"value": "{{sort}}",
													"equals": true
												},
												{
													"key": "with[]",
													"value": "{{with}}",
													"equals": true
												},
												{
													"key": "search",
													"value": "{{search}}",
													"equals": true
												}
											]
										},
										"description": "Obtain a list of synapse nodes. If included, children nodes are sorted in the same way as the root nodes. When the 'search' parameter is not provided, only roots synapses are returned.\n\n\nAccess:\n\t\n\tAll users.\n\nParameters:\n\n    limit     Maximum number of results to fetch\n    page      Page of results to fetch\n    search    Restrict the results to the given search string\n    sort[]    Results order array\n    with[]    Array of related objects to fetch\n\nRelated objects that can be fetched:\n\n    childs    Child synapses"
									},
									"response": []
								},
								{
									"name": "Synapse children",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"/* Get response body and content type */",
													"var body = JSON.parse(responseBody);",
													"var contentType = postman.getResponseHeader(\"Content-Type\");",
													"",
													"/* Valid status codes for this resource */",
													"var statusCodes = [200, 400, 401, 403, 404, 422];",
													"",
													"/* JSON error response schema */",
													"var errorSchema = {",
													"    type: 'object',",
													"    required: ['status', 'message'],",
													"    properties: {",
													"        'status' : {",
													"            type: 'number'",
													"        },",
													"        'message' : {",
													"            type: 'string'",
													"        },",
													"        'errors' : {",
													"            type: 'object',",
													"            required: [\"code\", \"message\"],",
													"        }",
													"    }",
													"};",
													"",
													"/* Success JSON message schema */",
													"var successSchema = {",
													"    type: 'object',",
													"    required: ['id'],",
													"    properties: {",
													"        'id' : { type: 'integer' }",
													"    }",
													"};",
													"",
													"",
													"/*",
													" * Basic tests",
													" */",
													"",
													"tests[\"Response time is less than 300ms\"] = (",
													"    responseTime < 300);",
													"",
													"tests[\"Content-Type is 'application/json'\"] = (",
													"    !!contentType && contentType.has(\"application/json\"));",
													"",
													"tests[\"Status code is valid\"] = (",
													"    statusCodes.indexOf(responseCode.code) >= 0);",
													"",
													"",
													"/*",
													" * Validate JSON responses",
													" */",
													"",
													"tests[\"Response is a JSON object\"] = tv4.validate(",
													"    body, {type: 'object'});",
													"",
													"if (responseCode.code >= 400 && responseCode.code < 422) {",
													"    tests[\"Response is a valid error object\"] = tv4.validate(",
													"        body, errorSchema);",
													"}",
													"",
													"if (responseCode.code === 200 && request.method !== 'GET') {",
													"    tests[\"Response is a valid success object\"] = tv4.validate(",
													"        body, successSchema);",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{host}}/api/synapses/nodes/:id?limit={{limit}}&page={{page}}&sort[]={{sort}}&with[]={{with}}&search={{search}}",
											"protocol": "http",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"synapses",
												"nodes",
												":id"
											],
											"query": [
												{
													"key": "limit",
													"value": "{{limit}}",
													"equals": true
												},
												{
													"key": "page",
													"value": "{{page}}",
													"equals": true
												},
												{
													"key": "sort[]",
													"value": "{{sort}}",
													"equals": true
												},
												{
													"key": "with[]",
													"value": "{{with}}",
													"equals": true
												},
												{
													"key": "search",
													"value": "{{search}}",
													"equals": true
												}
											],
											"variable": [
												{
													"key": "id",
													"value": ""
												}
											]
										},
										"description": "Obtain a list of child synapses. If included, children nodes are sorted in the same way as the root nodes.\n\nAccess:\n\t\n\tAll users.\n\nParameters:\n\n    limit     Maximum number of results to fetch\n    page      Page of results to fetch\n    search    Restrict the results to the given search string\n    sort[]    Results order array\n    with[]    Array of related objects to fetch\n\nRelated objects that can be fetched:\n\n    childs    Child synapses"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Synapses listing",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"/* Get response body and content type */",
											"var body = JSON.parse(responseBody);",
											"var contentType = postman.getResponseHeader(\"Content-Type\");",
											"",
											"/* Valid status codes for this resource */",
											"var statusCodes = [200, 400, 401, 403, 404, 422];",
											"",
											"/* JSON error response schema */",
											"var errorSchema = {",
											"    type: 'object',",
											"    required: ['status', 'message'],",
											"    properties: {",
											"        'status' : {",
											"            type: 'number'",
											"        },",
											"        'message' : {",
											"            type: 'string'",
											"        },",
											"        'errors' : {",
											"            type: 'object',",
											"            required: [\"code\", \"message\"],",
											"        }",
											"    }",
											"};",
											"",
											"/* Success JSON message schema */",
											"var successSchema = {",
											"    type: 'object',",
											"    required: ['id'],",
											"    properties: {",
											"        'id' : { type: 'integer' }",
											"    }",
											"};",
											"",
											"",
											"/*",
											" * Basic tests",
											" */",
											"",
											"tests[\"Response time is less than 300ms\"] = (",
											"    responseTime < 300);",
											"",
											"tests[\"Content-Type is 'application/json'\"] = (",
											"    !!contentType && contentType.has(\"application/json\"));",
											"",
											"tests[\"Status code is valid\"] = (",
											"    statusCodes.indexOf(responseCode.code) >= 0);",
											"",
											"",
											"/*",
											" * Validate JSON responses",
											" */",
											"",
											"tests[\"Response is a JSON object\"] = tv4.validate(",
											"    body, {type: 'object'});",
											"",
											"if (responseCode.code >= 400 && responseCode.code < 422) {",
											"    tests[\"Response is a valid error object\"] = tv4.validate(",
											"        body, errorSchema);",
											"}",
											"",
											"if (responseCode.code === 200 && request.method !== 'GET') {",
											"    tests[\"Response is a valid success object\"] = tv4.validate(",
											"        body, successSchema);",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{host}}/api/synapses?limit={{limit}}&page={{page}}&sort[]={{sort}}&with[]={{with}}&search={{search}}",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"synapses"
									],
									"query": [
										{
											"key": "limit",
											"value": "{{limit}}",
											"equals": true
										},
										{
											"key": "page",
											"value": "{{page}}",
											"equals": true
										},
										{
											"key": "sort[]",
											"value": "{{sort}}",
											"equals": true
										},
										{
											"key": "with[]",
											"value": "{{with}}",
											"equals": true
										},
										{
											"key": "search",
											"value": "{{search}}",
											"equals": true
										}
									]
								},
								"description": "Obtain a list of synapses.\n\nAccess:\n\t\n\tAll users.\n\nParameters:\n\n    limit     Maximum number of results to fetch\n    page      Page of results to fetch\n    search    Restrict the results to the given search string\n    sort[]    Results order array\n    with[]    Array of related objects to fetch\n\nRelated objects that can be fetched:\n\n    privilege    Authenticated user privileges"
							},
							"response": []
						},
						{
							"name": "Retrieve a synapse",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"/* Get response body and content type */",
											"var body = JSON.parse(responseBody);",
											"var contentType = postman.getResponseHeader(\"Content-Type\");",
											"",
											"/* Valid status codes for this resource */",
											"var statusCodes = [200, 400, 401, 403, 404, 422];",
											"",
											"/* JSON error response schema */",
											"var errorSchema = {",
											"    type: 'object',",
											"    required: ['status', 'message'],",
											"    properties: {",
											"        'status' : {",
											"            type: 'number'",
											"        },",
											"        'message' : {",
											"            type: 'string'",
											"        },",
											"        'errors' : {",
											"            type: 'object',",
											"            required: [\"code\", \"message\"],",
											"        }",
											"    }",
											"};",
											"",
											"/* Success JSON message schema */",
											"var successSchema = {",
											"    type: 'object',",
											"    required: ['id'],",
											"    properties: {",
											"        'id' : { type: 'integer' }",
											"    }",
											"};",
											"",
											"",
											"/*",
											" * Basic tests",
											" */",
											"",
											"tests[\"Response time is less than 300ms\"] = (",
											"    responseTime < 300);",
											"",
											"tests[\"Content-Type is 'application/json'\"] = (",
											"    !!contentType && contentType.has(\"application/json\"));",
											"",
											"tests[\"Status code is valid\"] = (",
											"    statusCodes.indexOf(responseCode.code) >= 0);",
											"",
											"",
											"/*",
											" * Validate JSON responses",
											" */",
											"",
											"tests[\"Response is a JSON object\"] = tv4.validate(",
											"    body, {type: 'object'});",
											"",
											"if (responseCode.code >= 400 && responseCode.code < 422) {",
											"    tests[\"Response is a valid error object\"] = tv4.validate(",
											"        body, errorSchema);",
											"}",
											"",
											"if (responseCode.code === 200 && request.method !== 'GET') {",
											"    tests[\"Response is a valid success object\"] = tv4.validate(",
											"        body, successSchema);",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{host}}/api/synapses/:id",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"synapses",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{id}}"
										}
									]
								},
								"description": "Retrieve a single synapse object.\n\nAccess:\n\t\n\tAll users."
							},
							"response": []
						},
						{
							"name": "Store a new synapse",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"/* Get response body and content type */",
											"var body = JSON.parse(responseBody);",
											"var contentType = postman.getResponseHeader(\"Content-Type\");",
											"",
											"/* Valid status codes for this resource */",
											"var statusCodes = [200, 400, 401, 403, 404, 422];",
											"",
											"/* JSON error response schema */",
											"var errorSchema = {",
											"    type: 'object',",
											"    required: ['status', 'message'],",
											"    properties: {",
											"        'status' : {",
											"            type: 'number'",
											"        },",
											"        'message' : {",
											"            type: 'string'",
											"        },",
											"        'errors' : {",
											"            type: 'object',",
											"            required: [\"code\", \"message\"],",
											"        }",
											"    }",
											"};",
											"",
											"/* Success JSON message schema */",
											"var successSchema = {",
											"    type: 'object',",
											"    required: ['id'],",
											"    properties: {",
											"        'id' : { type: 'integer' }",
											"    }",
											"};",
											"",
											"",
											"/*",
											" * Basic tests",
											" */",
											"",
											"tests[\"Response time is less than 300ms\"] = (",
											"    responseTime < 300);",
											"",
											"tests[\"Content-Type is 'application/json'\"] = (",
											"    !!contentType && contentType.has(\"application/json\"));",
											"",
											"tests[\"Status code is valid\"] = (",
											"    statusCodes.indexOf(responseCode.code) >= 0);",
											"",
											"",
											"/*",
											" * Validate JSON responses",
											" */",
											"",
											"tests[\"Response is a JSON object\"] = tv4.validate(",
											"    body, {type: 'object'});",
											"",
											"if (responseCode.code >= 400 && responseCode.code < 422) {",
											"    tests[\"Response is a valid error object\"] = tv4.validate(",
											"        body, errorSchema);",
											"}",
											"",
											"if (responseCode.code === 200 && request.method !== 'GET') {",
											"    tests[\"Response is a valid success object\"] = tv4.validate(",
											"        body, successSchema);",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{host}}/api/synapses",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"synapses"
									]
								},
								"description": "Create a new synapse object.\n\nAccess:\n\n\tAdministrators."
							},
							"response": []
						},
						{
							"name": "Update a synapse",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"/* Get response body and content type */",
											"var body = JSON.parse(responseBody);",
											"var contentType = postman.getResponseHeader(\"Content-Type\");",
											"",
											"/* Valid status codes for this resource */",
											"var statusCodes = [200, 400, 401, 403, 404, 422];",
											"",
											"/* JSON error response schema */",
											"var errorSchema = {",
											"    type: 'object',",
											"    required: ['status', 'message'],",
											"    properties: {",
											"        'status' : {",
											"            type: 'number'",
											"        },",
											"        'message' : {",
											"            type: 'string'",
											"        },",
											"        'errors' : {",
											"            type: 'object',",
											"            required: [\"code\", \"message\"],",
											"        }",
											"    }",
											"};",
											"",
											"/* Success JSON message schema */",
											"var successSchema = {",
											"    type: 'object',",
											"    required: ['id'],",
											"    properties: {",
											"        'id' : { type: 'integer' }",
											"    }",
											"};",
											"",
											"",
											"/*",
											" * Basic tests",
											" */",
											"",
											"tests[\"Response time is less than 300ms\"] = (",
											"    responseTime < 300);",
											"",
											"tests[\"Content-Type is 'application/json'\"] = (",
											"    !!contentType && contentType.has(\"application/json\"));",
											"",
											"tests[\"Status code is valid\"] = (",
											"    statusCodes.indexOf(responseCode.code) >= 0);",
											"",
											"",
											"/*",
											" * Validate JSON responses",
											" */",
											"",
											"tests[\"Response is a JSON object\"] = tv4.validate(",
											"    body, {type: 'object'});",
											"",
											"if (responseCode.code >= 400 && responseCode.code < 422) {",
											"    tests[\"Response is a valid error object\"] = tv4.validate(",
											"        body, errorSchema);",
											"}",
											"",
											"if (responseCode.code === 200 && request.method !== 'GET') {",
											"    tests[\"Response is a valid success object\"] = tv4.validate(",
											"        body, successSchema);",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{host}}/api/synapses/:id",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"synapses",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{id}}"
										}
									]
								},
								"description": "Update an existing synapse object.\n\nAccess:\n\n\tAuthenticated users. The authenticated user must have\n\tedition privileges over the synapse."
							},
							"response": []
						},
						{
							"name": "Remove a synapse",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{host}}/api/synapses/:id",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"synapses",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{id}}"
										}
									]
								},
								"description": "Remove a single synapse.\n\nAccess:\n\n\tAdministrators."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "POSTS",
			"item": [
				{
					"name": "comments",
					"description": "Comment resource",
					"item": [
						{
							"name": "Comments listing",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"/* Get response body and content type */",
											"var body = JSON.parse(responseBody);",
											"var contentType = postman.getResponseHeader(\"Content-Type\");",
											"",
											"/* Valid status codes for this resource */",
											"var statusCodes = [200, 400, 401, 403, 404, 422];",
											"",
											"/* JSON error response schema */",
											"var errorSchema = {",
											"    type: 'object',",
											"    required: ['status', 'message'],",
											"    properties: {",
											"        'status' : {",
											"            type: 'number'",
											"        },",
											"        'message' : {",
											"            type: 'string'",
											"        },",
											"        'errors' : {",
											"            type: 'object',",
											"            required: [\"code\", \"message\"],",
											"        }",
											"    }",
											"};",
											"",
											"/* Success JSON message schema */",
											"var successSchema = {",
											"    type: 'object',",
											"    required: ['id'],",
											"    properties: {",
											"        'id' : { type: 'integer' }",
											"    }",
											"};",
											"",
											"",
											"/*",
											" * Basic tests",
											" */",
											"",
											"tests[\"Response time is less than 300ms\"] = (",
											"    responseTime < 300);",
											"",
											"tests[\"Content-Type is 'application/json'\"] = (",
											"    !!contentType && contentType.has(\"application/json\"));",
											"",
											"tests[\"Status code is valid\"] = (",
											"    statusCodes.indexOf(responseCode.code) >= 0);",
											"",
											"",
											"/*",
											" * Validate JSON responses",
											" */",
											"",
											"tests[\"Response is a JSON object\"] = tv4.validate(",
											"    body, {type: 'object'});",
											"",
											"if (responseCode.code >= 400 && responseCode.code < 422) {",
											"    tests[\"Response is a valid error object\"] = tv4.validate(",
											"        body, errorSchema);",
											"}",
											"",
											"if (responseCode.code === 200 && request.method !== 'GET') {",
											"    tests[\"Response is a valid success object\"] = tv4.validate(",
											"        body, successSchema);",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{host}}/api/comments?limit={{limit}}&page={{page}}&sort[]={{sort}}&with[]={{with}}&search={{search}}",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"comments"
									],
									"query": [
										{
											"key": "limit",
											"value": "{{limit}}",
											"equals": true
										},
										{
											"key": "page",
											"value": "{{page}}",
											"equals": true
										},
										{
											"key": "sort[]",
											"value": "{{sort}}",
											"equals": true
										},
										{
											"key": "with[]",
											"value": "{{with}}",
											"equals": true
										},
										{
											"key": "search",
											"value": "{{search}}",
											"equals": true
										}
									]
								},
								"description": "Obtain a list of comments.\n\nAccess:\n\t\n\tAll users.\n\nParameters:\n\n    limit     Maximum number of results to fetch\n    page      Page of results to fetch\n    search    Restrict the results to the given search string\n    sort[]    Results order array\n    with[]    Array of related objects to fetch\n\nRelated objects that can be fetched:\n\n    post      Post object\n    user      User object\n"
							},
							"response": []
						},
						{
							"name": "Retrieve a comment",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"/* Get response body and content type */",
											"var body = JSON.parse(responseBody);",
											"var contentType = postman.getResponseHeader(\"Content-Type\");",
											"",
											"/* Valid status codes for this resource */",
											"var statusCodes = [200, 400, 401, 403, 404, 422];",
											"",
											"/* JSON error response schema */",
											"var errorSchema = {",
											"    type: 'object',",
											"    required: ['status', 'message'],",
											"    properties: {",
											"        'status' : {",
											"            type: 'number'",
											"        },",
											"        'message' : {",
											"            type: 'string'",
											"        },",
											"        'errors' : {",
											"            type: 'object',",
											"            required: [\"code\", \"message\"],",
											"        }",
											"    }",
											"};",
											"",
											"/* Success JSON message schema */",
											"var successSchema = {",
											"    type: 'object',",
											"    required: ['id'],",
											"    properties: {",
											"        'id' : { type: 'integer' }",
											"    }",
											"};",
											"",
											"",
											"/*",
											" * Basic tests",
											" */",
											"",
											"tests[\"Response time is less than 300ms\"] = (",
											"    responseTime < 300);",
											"",
											"tests[\"Content-Type is 'application/json'\"] = (",
											"    !!contentType && contentType.has(\"application/json\"));",
											"",
											"tests[\"Status code is valid\"] = (",
											"    statusCodes.indexOf(responseCode.code) >= 0);",
											"",
											"",
											"/*",
											" * Validate JSON responses",
											" */",
											"",
											"tests[\"Response is a JSON object\"] = tv4.validate(",
											"    body, {type: 'object'});",
											"",
											"if (responseCode.code >= 400 && responseCode.code < 422) {",
											"    tests[\"Response is a valid error object\"] = tv4.validate(",
											"        body, errorSchema);",
											"}",
											"",
											"if (responseCode.code === 200 && request.method !== 'GET') {",
											"    tests[\"Response is a valid success object\"] = tv4.validate(",
											"        body, successSchema);",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{host}}/api/comments/:id",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"comments",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{id}}"
										}
									]
								},
								"description": "Retrieve a single comment object.\n\nAccess:\n\t\n\tAll users."
							},
							"response": []
						},
						{
							"name": "Store a new comment",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"/* Get response body and content type */",
											"var body = JSON.parse(responseBody);",
											"var contentType = postman.getResponseHeader(\"Content-Type\");",
											"",
											"/* Valid status codes for this resource */",
											"var statusCodes = [200, 400, 401, 403, 404, 422];",
											"",
											"/* JSON error response schema */",
											"var errorSchema = {",
											"    type: 'object',",
											"    required: ['status', 'message'],",
											"    properties: {",
											"        'status' : {",
											"            type: 'number'",
											"        },",
											"        'message' : {",
											"            type: 'string'",
											"        },",
											"        'errors' : {",
											"            type: 'object',",
											"            required: [\"code\", \"message\"],",
											"        }",
											"    }",
											"};",
											"",
											"/* Success JSON message schema */",
											"var successSchema = {",
											"    type: 'object',",
											"    required: ['id'],",
											"    properties: {",
											"        'id' : { type: 'integer' }",
											"    }",
											"};",
											"",
											"",
											"/*",
											" * Basic tests",
											" */",
											"",
											"tests[\"Response time is less than 300ms\"] = (",
											"    responseTime < 300);",
											"",
											"tests[\"Content-Type is 'application/json'\"] = (",
											"    !!contentType && contentType.has(\"application/json\"));",
											"",
											"tests[\"Status code is valid\"] = (",
											"    statusCodes.indexOf(responseCode.code) >= 0);",
											"",
											"",
											"/*",
											" * Validate JSON responses",
											" */",
											"",
											"tests[\"Response is a JSON object\"] = tv4.validate(",
											"    body, {type: 'object'});",
											"",
											"if (responseCode.code >= 400 && responseCode.code < 422) {",
											"    tests[\"Response is a valid error object\"] = tv4.validate(",
											"        body, errorSchema);",
											"}",
											"",
											"if (responseCode.code === 200 && request.method !== 'GET') {",
											"    tests[\"Response is a valid success object\"] = tv4.validate(",
											"        body, successSchema);",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{host}}/api/comments",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"comments"
									]
								},
								"description": "Create a new comment object.\n\nAccess:\n\t\n\tAuthenticated users. The stored comment will belong to\n\tthe authenticated user."
							},
							"response": []
						},
						{
							"name": "Remove a comment",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{host}}/api/comments/:id",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"comments",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{id}}"
										}
									]
								},
								"description": "Remove a single comment.\n\nAccess:\n\t\n\tAdministrators."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "posts",
					"description": "Post resource",
					"item": [
						{
							"name": "reactions",
							"description": "User reactions resource",
							"item": [
								{
									"name": "Retrieve a post reaction",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"/* Get response body and content type */",
													"var body = JSON.parse(responseBody);",
													"var contentType = postman.getResponseHeader(\"Content-Type\");",
													"",
													"/* Valid status codes for this resource */",
													"var statusCodes = [200, 400, 401, 403, 404, 422];",
													"",
													"/* JSON error response schema */",
													"var errorSchema = {",
													"    type: 'object',",
													"    required: ['status', 'message'],",
													"    properties: {",
													"        'status' : {",
													"            type: 'number'",
													"        },",
													"        'message' : {",
													"            type: 'string'",
													"        },",
													"        'errors' : {",
													"            type: 'object',",
													"            required: [\"code\", \"message\"],",
													"        }",
													"    }",
													"};",
													"",
													"/* Success JSON message schema */",
													"var successSchema = {",
													"    type: 'object',",
													"    required: ['id'],",
													"    properties: {",
													"        'id' : { type: 'integer' }",
													"    }",
													"};",
													"",
													"",
													"/*",
													" * Basic tests",
													" */",
													"",
													"tests[\"Response time is less than 300ms\"] = (",
													"    responseTime < 300);",
													"",
													"tests[\"Content-Type is 'application/json'\"] = (",
													"    !!contentType && contentType.has(\"application/json\"));",
													"",
													"tests[\"Status code is valid\"] = (",
													"    statusCodes.indexOf(responseCode.code) >= 0);",
													"",
													"",
													"/*",
													" * Validate JSON responses",
													" */",
													"",
													"tests[\"Response is a JSON object\"] = tv4.validate(",
													"    body, {type: 'object'});",
													"",
													"if (responseCode.code >= 400 && responseCode.code < 422) {",
													"    tests[\"Response is a valid error object\"] = tv4.validate(",
													"        body, errorSchema);",
													"}",
													"",
													"if (responseCode.code === 200 && request.method !== 'GET') {",
													"    tests[\"Response is a valid success object\"] = tv4.validate(",
													"        body, successSchema);",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{host}}/api/posts/reactions/:post_id",
											"protocol": "http",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"posts",
												"reactions",
												":post_id"
											],
											"variable": [
												{
													"key": "post_id",
													"value": ""
												}
											]
										},
										"description": "Retrieve a single post reaction object.\n\nAccess:\n\t\n\tAuthenticated users."
									},
									"response": []
								},
								{
									"name": "Update a post reaction",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"/* Get response body and content type */",
													"var body = JSON.parse(responseBody);",
													"var contentType = postman.getResponseHeader(\"Content-Type\");",
													"",
													"/* Valid status codes for this resource */",
													"var statusCodes = [200, 400, 401, 403, 404, 422];",
													"",
													"/* JSON error response schema */",
													"var errorSchema = {",
													"    type: 'object',",
													"    required: ['status', 'message'],",
													"    properties: {",
													"        'status' : {",
													"            type: 'number'",
													"        },",
													"        'message' : {",
													"            type: 'string'",
													"        },",
													"        'errors' : {",
													"            type: 'object',",
													"            required: [\"code\", \"message\"],",
													"        }",
													"    }",
													"};",
													"",
													"/* Success JSON message schema */",
													"var successSchema = {",
													"    type: 'object',",
													"    required: ['id'],",
													"    properties: {",
													"        'id' : { type: 'integer' }",
													"    }",
													"};",
													"",
													"",
													"/*",
													" * Basic tests",
													" */",
													"",
													"tests[\"Response time is less than 300ms\"] = (",
													"    responseTime < 300);",
													"",
													"tests[\"Content-Type is 'application/json'\"] = (",
													"    !!contentType && contentType.has(\"application/json\"));",
													"",
													"tests[\"Status code is valid\"] = (",
													"    statusCodes.indexOf(responseCode.code) >= 0);",
													"",
													"",
													"/*",
													" * Validate JSON responses",
													" */",
													"",
													"tests[\"Response is a JSON object\"] = tv4.validate(",
													"    body, {type: 'object'});",
													"",
													"if (responseCode.code >= 400 && responseCode.code < 422) {",
													"    tests[\"Response is a valid error object\"] = tv4.validate(",
													"        body, errorSchema);",
													"}",
													"",
													"if (responseCode.code === 200 && request.method !== 'GET') {",
													"    tests[\"Response is a valid success object\"] = tv4.validate(",
													"        body, successSchema);",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{host}}/api/posts/reactions/:post_id",
											"protocol": "http",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"posts",
												"reactions",
												":post_id"
											],
											"variable": [
												{
													"key": "post_id",
													"value": "{{id}}"
												}
											]
										},
										"description": "Update the authenticated user reaction to a post.\n\nAccess:\n\t\n\tAuthenticated users.\n\nUpdatable fields:\n\n    liked           Like the post\n    favourited      Add the post to favourites\n"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Posts listing",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"/* Get response body and content type */",
											"var body = JSON.parse(responseBody);",
											"var contentType = postman.getResponseHeader(\"Content-Type\");",
											"",
											"/* Valid status codes for this resource */",
											"var statusCodes = [200, 400, 401, 403, 404, 422];",
											"",
											"/* JSON error response schema */",
											"var errorSchema = {",
											"    type: 'object',",
											"    required: ['status', 'message'],",
											"    properties: {",
											"        'status' : {",
											"            type: 'number'",
											"        },",
											"        'message' : {",
											"            type: 'string'",
											"        },",
											"        'errors' : {",
											"            type: 'object',",
											"            required: [\"code\", \"message\"],",
											"        }",
											"    }",
											"};",
											"",
											"/* Success JSON message schema */",
											"var successSchema = {",
											"    type: 'object',",
											"    required: ['id'],",
											"    properties: {",
											"        'id' : { type: 'integer' }",
											"    }",
											"};",
											"",
											"",
											"/*",
											" * Basic tests",
											" */",
											"",
											"tests[\"Response time is less than 300ms\"] = (",
											"    responseTime < 300);",
											"",
											"tests[\"Content-Type is 'application/json'\"] = (",
											"    !!contentType && contentType.has(\"application/json\"));",
											"",
											"tests[\"Status code is valid\"] = (",
											"    statusCodes.indexOf(responseCode.code) >= 0);",
											"",
											"",
											"/*",
											" * Validate JSON responses",
											" */",
											"",
											"tests[\"Response is a JSON object\"] = tv4.validate(",
											"    body, {type: 'object'});",
											"",
											"if (responseCode.code >= 400 && responseCode.code < 422) {",
											"    tests[\"Response is a valid error object\"] = tv4.validate(",
											"        body, errorSchema);",
											"}",
											"",
											"if (responseCode.code === 200 && request.method !== 'GET') {",
											"    tests[\"Response is a valid success object\"] = tv4.validate(",
											"        body, successSchema);",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{host}}/api/posts?limit={{limit}}&page={{page}}&sort[]={{sort}}&with[]={{with}}&search={{search}}",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"posts"
									],
									"query": [
										{
											"key": "limit",
											"value": "{{limit}}",
											"equals": true
										},
										{
											"key": "page",
											"value": "{{page}}",
											"equals": true
										},
										{
											"key": "sort[]",
											"value": "{{sort}}",
											"equals": true
										},
										{
											"key": "with[]",
											"value": "{{with}}",
											"equals": true
										},
										{
											"key": "search",
											"value": "{{search}}",
											"equals": true
										}
									]
								},
								"description": "Obtain a list of posts. Soft-deleted models are only retrieved if the user has administrator rights.\n\nAccess:\n\t\n\tAll users.\n\nParameters:\n\n    limit     Maximum number of results to fetch\n    page      Page of results to fetch\n    search    Restrict the results to the given search string\n    sort[]    Results order array\n    with[]    Array of related objects to fetch\n\nSynapse filter:\n\n    synapse_id\t\t\tSynapse\n\nRelation filters:\n\n    municipality_id\t\tMunicipalities\n    project_id\t\t\tProjects\n    school_id\t\t\tSchools\n    territory_id\t\tTerritories\n    tag_id\t\t\t\tTags\n\nRelated objects that can be fetched:\n\n    author    Author object\n    feed      Feed object\n    reaction  Authenticated user reactions\n    tags\t  Post tags\n"
							},
							"response": []
						},
						{
							"name": "Retrieve a post",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"/* Get response body and content type */",
											"var body = JSON.parse(responseBody);",
											"var contentType = postman.getResponseHeader(\"Content-Type\");",
											"",
											"/* Valid status codes for this resource */",
											"var statusCodes = [200, 400, 401, 403, 404, 422];",
											"",
											"/* JSON error response schema */",
											"var errorSchema = {",
											"    type: 'object',",
											"    required: ['status', 'message'],",
											"    properties: {",
											"        'status' : {",
											"            type: 'number'",
											"        },",
											"        'message' : {",
											"            type: 'string'",
											"        },",
											"        'errors' : {",
											"            type: 'object',",
											"            required: [\"code\", \"message\"],",
											"        }",
											"    }",
											"};",
											"",
											"/* Success JSON message schema */",
											"var successSchema = {",
											"    type: 'object',",
											"    required: ['id'],",
											"    properties: {",
											"        'id' : { type: 'integer' }",
											"    }",
											"};",
											"",
											"",
											"/*",
											" * Basic tests",
											" */",
											"",
											"tests[\"Response time is less than 300ms\"] = (",
											"    responseTime < 300);",
											"",
											"tests[\"Content-Type is 'application/json'\"] = (",
											"    !!contentType && contentType.has(\"application/json\"));",
											"",
											"tests[\"Status code is valid\"] = (",
											"    statusCodes.indexOf(responseCode.code) >= 0);",
											"",
											"",
											"/*",
											" * Validate JSON responses",
											" */",
											"",
											"tests[\"Response is a JSON object\"] = tv4.validate(",
											"    body, {type: 'object'});",
											"",
											"if (responseCode.code >= 400 && responseCode.code < 422) {",
											"    tests[\"Response is a valid error object\"] = tv4.validate(",
											"        body, errorSchema);",
											"}",
											"",
											"if (responseCode.code === 200 && request.method !== 'GET') {",
											"    tests[\"Response is a valid success object\"] = tv4.validate(",
											"        body, successSchema);",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{host}}/api/posts/:id",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"posts",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{id}}"
										}
									]
								},
								"description": "Retrieve a single post object. Soft-deleted models are only retrieved if the user has administrator rights.\n\nAccess:\n\t\n\tAll users."
							},
							"response": []
						},
						{
							"name": "Restore a post",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{host}}/api/posts/:id",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"posts",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{id}}"
										}
									]
								},
								"description": "Restore a soft-deleted post object.\n\nAccess:\n\t\n\tAdministrators."
							},
							"response": []
						},
						{
							"name": "Remove a post",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{host}}/api/posts/:id",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"posts",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{id}}"
										}
									]
								},
								"description": "Soft-delete a single post.\n\nAccess:\n\t\n\tAdministrators."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "tags",
					"description": "Tag resource",
					"item": [
						{
							"name": "Tags listing",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"/* Get response body and content type */",
											"var body = JSON.parse(responseBody);",
											"var contentType = postman.getResponseHeader(\"Content-Type\");",
											"",
											"/* Valid status codes for this resource */",
											"var statusCodes = [200, 400, 401, 403, 404, 422];",
											"",
											"/* JSON error response schema */",
											"var errorSchema = {",
											"    type: 'object',",
											"    required: ['status', 'message'],",
											"    properties: {",
											"        'status' : {",
											"            type: 'number'",
											"        },",
											"        'message' : {",
											"            type: 'string'",
											"        },",
											"        'errors' : {",
											"            type: 'object',",
											"            required: [\"code\", \"message\"],",
											"        }",
											"    }",
											"};",
											"",
											"/* Success JSON message schema */",
											"var successSchema = {",
											"    type: 'object',",
											"    required: ['id'],",
											"    properties: {",
											"        'id' : { type: 'integer' }",
											"    }",
											"};",
											"",
											"",
											"/*",
											" * Basic tests",
											" */",
											"",
											"tests[\"Response time is less than 300ms\"] = (",
											"    responseTime < 300);",
											"",
											"tests[\"Content-Type is 'application/json'\"] = (",
											"    !!contentType && contentType.has(\"application/json\"));",
											"",
											"tests[\"Status code is valid\"] = (",
											"    statusCodes.indexOf(responseCode.code) >= 0);",
											"",
											"",
											"/*",
											" * Validate JSON responses",
											" */",
											"",
											"tests[\"Response is a JSON object\"] = tv4.validate(",
											"    body, {type: 'object'});",
											"",
											"if (responseCode.code >= 400 && responseCode.code < 422) {",
											"    tests[\"Response is a valid error object\"] = tv4.validate(",
											"        body, errorSchema);",
											"}",
											"",
											"if (responseCode.code === 200 && request.method !== 'GET') {",
											"    tests[\"Response is a valid success object\"] = tv4.validate(",
											"        body, successSchema);",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{host}}/api/tags?limit={{limit}}&page={{page}}&sort[]={{sort}}&with[]={{with}}&search={{search}}",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"tags"
									],
									"query": [
										{
											"key": "limit",
											"value": "{{limit}}",
											"equals": true
										},
										{
											"key": "page",
											"value": "{{page}}",
											"equals": true
										},
										{
											"key": "sort[]",
											"value": "{{sort}}",
											"equals": true
										},
										{
											"key": "with[]",
											"value": "{{with}}",
											"equals": true
										},
										{
											"key": "search",
											"value": "{{search}}",
											"equals": true
										}
									]
								},
								"description": "Obtain a list of tags. Soft-deleted models are only retrieved if the user has administrator rights.\n\nAccess:\n\t\n\tAll users.\n\nParameters:\n\n    limit     Maximum number of results to fetch\n    page      Page of results to fetch\n    search    Restrict the results to the given search string\n    sort[]    Results order array\n    with[]    Array of related objects to fetch\n\nRelated objects that can be fetched:\n\n    synapse   Synapse object\n"
							},
							"response": []
						},
						{
							"name": "Retrieve a tag",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"/* Get response body and content type */",
											"var body = JSON.parse(responseBody);",
											"var contentType = postman.getResponseHeader(\"Content-Type\");",
											"",
											"/* Valid status codes for this resource */",
											"var statusCodes = [200, 400, 401, 403, 404, 422];",
											"",
											"/* JSON error response schema */",
											"var errorSchema = {",
											"    type: 'object',",
											"    required: ['status', 'message'],",
											"    properties: {",
											"        'status' : {",
											"            type: 'number'",
											"        },",
											"        'message' : {",
											"            type: 'string'",
											"        },",
											"        'errors' : {",
											"            type: 'object',",
											"            required: [\"code\", \"message\"],",
											"        }",
											"    }",
											"};",
											"",
											"/* Success JSON message schema */",
											"var successSchema = {",
											"    type: 'object',",
											"    required: ['id'],",
											"    properties: {",
											"        'id' : { type: 'integer' }",
											"    }",
											"};",
											"",
											"",
											"/*",
											" * Basic tests",
											" */",
											"",
											"tests[\"Response time is less than 300ms\"] = (",
											"    responseTime < 300);",
											"",
											"tests[\"Content-Type is 'application/json'\"] = (",
											"    !!contentType && contentType.has(\"application/json\"));",
											"",
											"tests[\"Status code is valid\"] = (",
											"    statusCodes.indexOf(responseCode.code) >= 0);",
											"",
											"",
											"/*",
											" * Validate JSON responses",
											" */",
											"",
											"tests[\"Response is a JSON object\"] = tv4.validate(",
											"    body, {type: 'object'});",
											"",
											"if (responseCode.code >= 400 && responseCode.code < 422) {",
											"    tests[\"Response is a valid error object\"] = tv4.validate(",
											"        body, errorSchema);",
											"}",
											"",
											"if (responseCode.code === 200 && request.method !== 'GET') {",
											"    tests[\"Response is a valid success object\"] = tv4.validate(",
											"        body, successSchema);",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{host}}/api/tags/:id",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"tags",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{id}}"
										}
									]
								},
								"description": "Retrieve a single tag object. Soft-deleted models are only retrieved if the user has administrator rights.\n\nAccess:\n\t\n\tAll users."
							},
							"response": []
						},
						{
							"name": "Restore a tag",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{host}}/api/tags/:id",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"tags",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{id}}"
										}
									]
								},
								"description": "Restore a soft-deleted tag object. This method will also restore any synapse belonging to the tag.\n\nAccess:\n\t\n\tAdministrators."
							},
							"response": []
						},
						{
							"name": "Remove a tag",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{host}}/api/tags/:id",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"tags",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{id}}"
										}
									]
								},
								"description": "Soft-delete a single tag. This method will also soft-delete any synapse belonging to the tag.\n\nAccess:\n\t\n\tAdministrators."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		}
	]
}
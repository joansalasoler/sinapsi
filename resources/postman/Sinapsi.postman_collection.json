{
	"info": {
		"name": "Sinapsi",
		"_postman_id": "5e6e1d96-97d4-275a-4362-4ede957b01e2",
		"description": "",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "AUTHENTICATION",
			"item": [
				{
					"name": "accounts",
					"item": [
						{
							"name": "Log out from the app",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a46e7b2b-d929-4707-8a04-7d6bf000cbd6",
										"type": "text/javascript",
										"exec": [
											"/* Get response body and content type */",
											"var body = JSON.parse(responseBody);",
											"var contentType = postman.getResponseHeader(\"Content-Type\");",
											"",
											"/* Valid status codes for this resource */",
											"var statusCodes = [200, 400, 401, 403, 404, 422];",
											"",
											"/* JSON error response schema */",
											"var errorSchema = {",
											"    type: 'object',",
											"    required: ['status', 'message'],",
											"    properties: {",
											"        'status' : {",
											"            type: 'number'",
											"        },",
											"        'message' : {",
											"            type: 'string'",
											"        },",
											"        'errors' : {",
											"            type: 'object',",
											"            required: [\"code\", \"message\"],",
											"        }",
											"    }",
											"};",
											"",
											"/* Success JSON message schema */",
											"var successSchema = {",
											"    type: 'object',",
											"    required: ['success'],",
											"    properties: {",
											"        'id' : { type: 'string' }",
											"    }",
											"};",
											"",
											"",
											"/*",
											" * Basic tests",
											" */",
											"",
											"tests[\"Response time is less than 300ms\"] = (",
											"    responseTime < 300);",
											"",
											"tests[\"Content-Type is 'application/json'\"] = (",
											"    !!contentType && contentType.has(\"application/json\"));",
											"",
											"tests[\"Status code is valid\"] = (",
											"    statusCodes.indexOf(responseCode.code) >= 0);",
											"",
											"",
											"/*",
											" * Validate JSON responses",
											" */",
											"",
											"tests[\"Response is a JSON object\"] = tv4.validate(",
											"    body, {type: 'object'});",
											"",
											"if (responseCode.code >= 400 && responseCode.code < 422) {",
											"    tests[\"Response is a valid error object\"] = tv4.validate(",
											"        body, errorSchema);",
											"}",
											"",
											"if (responseCode.code === 200 && request.method !== 'GET') {",
											"    tests[\"Response is a valid success object\"] = tv4.validate(",
											"        body, successSchema);",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {},
								"url": {
									"raw": "http://{{host}}/api/accounts/logout",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"accounts",
										"logout"
									]
								},
								"description": "Log out the authenticated user from the application.\n\nAccess:\n\t\n\tAuthenticated users."
							},
							"response": []
						},
						{
							"name": "Register a user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "12d6f674-efa9-4c86-950f-59f65ca862e1",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f7f14f36-89f6-4b8e-a3ed-7e8a884e4641",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "",
											"type": "string"
										},
										{
											"key": "tokenType",
											"value": "Bearer",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Host",
										"value": "{{host}}"
									},
									{
										"key": "",
										"value": "",
										"disabled": true
									}
								],
								"body": {},
								"url": {
									"raw": "http://{{host}}/accounts/register",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"accounts",
										"register"
									]
								},
								"description": "Register an account.\n\nThis is a web route only that redirects the user to the oAuth provider. You can use this route to generate an access token for subsequent API calls."
							},
							"response": []
						},
						{
							"name": "Authenticate a user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "085bae4a-7c5a-4fe8-9b64-1811698dad0b",
										"type": "text/javascript",
										"exec": [
											"/* Get response body and content type */",
											"var body = JSON.parse(responseBody);",
											"var contentType = postman.getResponseHeader(\"Content-Type\");",
											"",
											"/* Valid status codes for this resource */",
											"var statusCodes = [200, 400, 401, 403, 404, 422];",
											"",
											"/* JSON error response schema */",
											"var errorSchema = {",
											"    type: 'object',",
											"    required: ['status', 'message'],",
											"    properties: {",
											"        'status' : {",
											"            type: 'number'",
											"        },",
											"        'message' : {",
											"            type: 'string'",
											"        },",
											"        'errors' : {",
											"            type: 'object',",
											"            required: [\"code\", \"message\"],",
											"        }",
											"    }",
											"};",
											"",
											"/* Success JSON message schema */",
											"var successSchema = {",
											"    type: 'object',",
											"    required: ['id'],",
											"    properties: {",
											"        'id' : { type: 'integer' }",
											"    }",
											"};",
											"",
											"",
											"/*",
											" * Basic tests",
											" */",
											"",
											"tests[\"Response time is less than 500ms\"] = (",
											"    responseTime < 500);",
											"",
											"tests[\"Content-Type is 'application/json'\"] = (",
											"    !!contentType && contentType.has(\"application/json\"));",
											"",
											"tests[\"Status code is valid\"] = (",
											"    statusCodes.indexOf(responseCode.code) >= 0);",
											"",
											"",
											"/*",
											" * Validate JSON responses",
											" */",
											"",
											"tests[\"Response is a JSON object\"] = tv4.validate(",
											"    body, {type: 'object'});",
											"",
											"if (responseCode.code >= 400 && responseCode.code < 422) {",
											"    tests[\"Response is a valid error object\"] = tv4.validate(",
											"        body, errorSchema);",
											"}",
											"",
											"if (responseCode.code === 200 && request.method !== 'GET') {",
											"    tests[\"Response is a valid success object\"] = tv4.validate(",
											"        body, successSchema);",
											"}",
											"",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f7f14f36-89f6-4b8e-a3ed-7e8a884e4641",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{bearer_token}}"
									}
								],
								"body": {},
								"url": {
									"raw": "http://{{host}}/api/accounts/login",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"accounts",
										"login"
									]
								},
								"description": "Authenticate an account.\n\nThis route requires an access token. To get a new access token for an existing user or a new user use the /api/register route."
							},
							"response": []
						},
						{
							"name": "Retrieve the user profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"/* Get response body and content type */",
											"var body = JSON.parse(responseBody);",
											"var contentType = postman.getResponseHeader(\"Content-Type\");",
											"",
											"/* Valid status codes for this resource */",
											"var statusCodes = [200, 400, 401, 403, 404, 422];",
											"",
											"/* JSON error response schema */",
											"var errorSchema = {",
											"    type: 'object',",
											"    required: ['status', 'message'],",
											"    properties: {",
											"        'status' : {",
											"            type: 'number'",
											"        },",
											"        'message' : {",
											"            type: 'string'",
											"        },",
											"        'errors' : {",
											"            type: 'object',",
											"            required: [\"code\", \"message\"],",
											"        }",
											"    }",
											"};",
											"",
											"/* Success JSON message schema */",
											"var successSchema = {",
											"    type: 'object',",
											"    required: ['id'],",
											"    properties: {",
											"        'id' : { type: 'integer' }",
											"    }",
											"};",
											"",
											"",
											"/*",
											" * Basic tests",
											" */",
											"",
											"tests[\"Response time is less than 300ms\"] = (",
											"    responseTime < 300);",
											"",
											"tests[\"Content-Type is 'application/json'\"] = (",
											"    !!contentType && contentType.has(\"application/json\"));",
											"",
											"tests[\"Status code is valid\"] = (",
											"    statusCodes.indexOf(responseCode.code) >= 0);",
											"",
											"",
											"/*",
											" * Validate JSON responses",
											" */",
											"",
											"tests[\"Response is a JSON object\"] = tv4.validate(",
											"    body, {type: 'object'});",
											"",
											"if (responseCode.code >= 400 && responseCode.code < 422) {",
											"    tests[\"Response is a valid error object\"] = tv4.validate(",
											"        body, errorSchema);",
											"}",
											"",
											"if (responseCode.code === 200 && request.method !== 'GET') {",
											"    tests[\"Response is a valid success object\"] = tv4.validate(",
											"        body, successSchema);",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{host}}/api/accounts/profile",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"accounts",
										"profile"
									]
								},
								"description": "Retrieve the authenticated user object.\n\nAccess:\n\t\n\tAuthenticated users."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "AUTHORS",
			"item": [
				{
					"name": "authors",
					"description": "Author resource",
					"item": [
						{
							"name": "Authors listing",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1533e402-095d-4daa-9b1f-f6a53dbeac5b",
										"type": "text/javascript",
										"exec": [
											"/* Get response body and content type */",
											"var body = JSON.parse(responseBody);",
											"var contentType = postman.getResponseHeader(\"Content-Type\");",
											"",
											"/* Valid status codes for this resource */",
											"var statusCodes = [200, 400, 401, 403, 404, 422];",
											"",
											"/* JSON error response schema */",
											"var errorSchema = {",
											"    type: 'object',",
											"    required: ['status', 'message'],",
											"    properties: {",
											"        'status' : {",
											"            type: 'number'",
											"        },",
											"        'message' : {",
											"            type: 'string'",
											"        },",
											"        'errors' : {",
											"            type: 'object',",
											"            required: [\"code\", \"message\"],",
											"        }",
											"    }",
											"};",
											"",
											"/* Index JSON message schema */",
											"var collectionSchema = {",
											"    type: 'object',",
											"    required: [",
											"        'current_page',",
											"        'data',",
											"        'from',",
											"        'last_page',",
											"        'per_page',",
											"        'to',",
											"        'total'",
											"    ],",
											"    properties: {",
											"        'total' : { type: 'integer' },",
											"        'current_page' : { type: 'integer' },",
											"        'from' : { type: ['integer', 'null'] },",
											"        'to' : { type: ['integer', 'null'] },",
											"        'data' : {",
											"            type: 'array',",
											"            items: {",
											"              type: 'object',",
											"              required: ['id'],",
											"              properties: {",
											"                'id' : { type: 'integer' }",
											"              }",
											"            }",
											"        }",
											"    }",
											"};",
											"",
											"/*",
											" * Basic tests",
											" */",
											"",
											"tests[\"Response time is less than 300ms\"] = (",
											"    responseTime < 300);",
											"",
											"tests[\"Content-Type is 'application/json'\"] = (",
											"    !!contentType && contentType.has(\"application/json\"));",
											"",
											"tests[\"Status code is valid\"] = (",
											"    statusCodes.indexOf(responseCode.code) >= 0);",
											"",
											"",
											"/*",
											" * Validate JSON responses",
											" */",
											"",
											"tests[\"Response is a JSON object\"] = tv4.validate(",
											"    body, {type: 'object'});",
											"",
											"if (responseCode.code >= 400 && responseCode.code < 422) {",
											"    tests[\"Response is a valid error object\"] = tv4.validate(",
											"        body, errorSchema);",
											"}",
											"",
											"if (responseCode.code === 200) {",
											"    tests[\"Response is a valid collection object\"] = tv4.validate(",
											"        body, collectionSchema);",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {},
								"url": {
									"raw": "http://{{host}}/api/authors?limit={{limit}}&page={{page}}&sort[]={{sort}}&with[]={{with}}&search={{search}}",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"authors"
									],
									"query": [
										{
											"key": "limit",
											"value": "{{limit}}",
											"equals": true
										},
										{
											"key": "page",
											"value": "{{page}}",
											"equals": true
										},
										{
											"key": "sort[]",
											"value": "{{sort}}",
											"equals": true
										},
										{
											"key": "with[]",
											"value": "{{with}}",
											"equals": true
										},
										{
											"key": "search",
											"value": "{{search}}",
											"equals": true
										}
									]
								},
								"description": "Obtain a list of authors.\n\nAccess:\n\t\n    All users.\n\nParameters:\n\n    limit     Maximum number of results to fetch\n    page      Page of results to fetch\n    search    Restrict the results to the given search string\n    sort[]    Results order array\n    with[]    Array of related objects to fetch\n\nRelated objects that can be fetched:\n\n    municipality    Municipality object\n    project         Project object\n    school          School object\n    synapse         Synapse object\n    territory       Territory object\n    user            User object\n"
							},
							"response": []
						},
						{
							"name": "Retrieve an author",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "33e423fd-4202-4f11-9c6b-00be1b1c59f9",
										"type": "text/javascript",
										"exec": [
											"/* Get response body and content type */",
											"var body = JSON.parse(responseBody);",
											"var contentType = postman.getResponseHeader(\"Content-Type\");",
											"",
											"/* Valid status codes for this resource */",
											"var statusCodes = [200, 400, 401, 403, 404, 422];",
											"",
											"/* JSON error response schema */",
											"var errorSchema = {",
											"    type: 'object',",
											"    required: ['status', 'message'],",
											"    properties: {",
											"        'status' : {",
											"            type: 'number'",
											"        },",
											"        'message' : {",
											"            type: 'string'",
											"        },",
											"        'errors' : {",
											"            type: 'object',",
											"            required: [\"code\", \"message\"],",
											"        }",
											"    }",
											"};",
											"",
											"/* Model JSON message schema */",
											"var modelSchema = {",
											"    type: 'object',",
											"    required: ['id'],",
											"    properties: {",
											"        'id' : { type: 'integer' }",
											"    }",
											"};",
											"",
											"",
											"/*",
											" * Basic tests",
											" */",
											"",
											"tests[\"Response time is less than 300ms\"] = (",
											"    responseTime < 300);",
											"",
											"tests[\"Content-Type is 'application/json'\"] = (",
											"    !!contentType && contentType.has(\"application/json\"));",
											"",
											"tests[\"Status code is valid\"] = (",
											"    statusCodes.indexOf(responseCode.code) >= 0);",
											"",
											"",
											"/*",
											" * Validate JSON responses",
											" */",
											"",
											"tests[\"Response is a JSON object\"] = tv4.validate(",
											"    body, {type: 'object'});",
											"",
											"if (responseCode.code >= 400 && responseCode.code < 422) {",
											"    tests[\"Response is a valid error object\"] = tv4.validate(",
											"        body, errorSchema);",
											"}",
											"",
											"if (responseCode.code === 200) {",
											"    tests[\"Response is a valid model object\"] = tv4.validate(",
											"        body, modelSchema);",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {},
								"url": {
									"raw": "http://{{host}}/api/authors/:id",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"authors",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{id}}"
										}
									]
								},
								"description": "Retrieve a single author object.\n\nAccess:\n\t\n\tAll users.\n"
							},
							"response": []
						},
						{
							"name": "Update an author",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"/* Get response body and content type */",
											"var body = JSON.parse(responseBody);",
											"var contentType = postman.getResponseHeader(\"Content-Type\");",
											"",
											"/* Valid status codes for this resource */",
											"var statusCodes = [200, 400, 401, 403, 404, 422];",
											"",
											"/* JSON error response schema */",
											"var errorSchema = {",
											"    type: 'object',",
											"    required: ['status', 'message'],",
											"    properties: {",
											"        'status' : {",
											"            type: 'number'",
											"        },",
											"        'message' : {",
											"            type: 'string'",
											"        },",
											"        'errors' : {",
											"            type: 'object',",
											"            required: [\"code\", \"message\"],",
											"        }",
											"    }",
											"};",
											"",
											"/* Success JSON message schema */",
											"var successSchema = {",
											"    type: 'object',",
											"    required: ['id'],",
											"    properties: {",
											"        'id' : { type: 'integer' }",
											"    }",
											"};",
											"",
											"",
											"/*",
											" * Basic tests",
											" */",
											"",
											"tests[\"Response time is less than 300ms\"] = (",
											"    responseTime < 300);",
											"",
											"tests[\"Content-Type is 'application/json'\"] = (",
											"    !!contentType && contentType.has(\"application/json\"));",
											"",
											"tests[\"Status code is valid\"] = (",
											"    statusCodes.indexOf(responseCode.code) >= 0);",
											"",
											"",
											"/*",
											" * Validate JSON responses",
											" */",
											"",
											"tests[\"Response is a JSON object\"] = tv4.validate(",
											"    body, {type: 'object'});",
											"",
											"if (responseCode.code >= 400 && responseCode.code < 422) {",
											"    tests[\"Response is a valid error object\"] = tv4.validate(",
											"        body, errorSchema);",
											"}",
											"",
											"if (responseCode.code === 200 && request.method !== 'GET') {",
											"    tests[\"Response is a valid success object\"] = tv4.validate(",
											"        body, successSchema);",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{host}}/api/authors/:id",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"authors",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{id}}"
										}
									]
								},
								"description": "Update an existing author object.\n\nUpdatable attributes:\n\n    municipality_id\n    territory_id\n    school_id\n\nAccess:\n\t\n\tAuthenticated users. The author must belong to the\n\tauthenticated user.\n"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "projects",
					"description": "Project resource",
					"item": [
						{
							"name": "Projects listing",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b32ac2a7-eaa1-4948-ade4-b7e6b227057e",
										"type": "text/javascript",
										"exec": [
											"/* Get response body and content type */",
											"var body = JSON.parse(responseBody);",
											"var contentType = postman.getResponseHeader(\"Content-Type\");",
											"",
											"/* Valid status codes for this resource */",
											"var statusCodes = [200, 400, 401, 403, 404, 422];",
											"",
											"/* JSON error response schema */",
											"var errorSchema = {",
											"    type: 'object',",
											"    required: ['status', 'message'],",
											"    properties: {",
											"        'status' : {",
											"            type: 'number'",
											"        },",
											"        'message' : {",
											"            type: 'string'",
											"        },",
											"        'errors' : {",
											"            type: 'object',",
											"            required: [\"code\", \"message\"],",
											"        }",
											"    }",
											"};",
											"",
											"/* Index JSON message schema */",
											"var collectionSchema = {",
											"    type: 'object',",
											"    required: [",
											"        'current_page',",
											"        'data',",
											"        'from',",
											"        'last_page',",
											"        'per_page',",
											"        'to',",
											"        'total'",
											"    ],",
											"    properties: {",
											"        'total' : { type: 'integer' },",
											"        'current_page' : { type: 'integer' },",
											"        'from' : { type: ['integer', 'null'] },",
											"        'to' : { type: ['integer', 'null'] },",
											"        'data' : {",
											"            type: 'array',",
											"            items: {",
											"              type: 'object',",
											"              required: ['id'],",
											"              properties: {",
											"                'id' : { type: 'integer' }",
											"              }",
											"            }",
											"        }",
											"    }",
											"};",
											"",
											"/*",
											" * Basic tests",
											" */",
											"",
											"tests[\"Response time is less than 300ms\"] = (",
											"    responseTime < 300);",
											"",
											"tests[\"Content-Type is 'application/json'\"] = (",
											"    !!contentType && contentType.has(\"application/json\"));",
											"",
											"tests[\"Status code is valid\"] = (",
											"    statusCodes.indexOf(responseCode.code) >= 0);",
											"",
											"",
											"/*",
											" * Validate JSON responses",
											" */",
											"",
											"tests[\"Response is a JSON object\"] = tv4.validate(",
											"    body, {type: 'object'});",
											"",
											"if (responseCode.code >= 400 && responseCode.code < 422) {",
											"    tests[\"Response is a valid error object\"] = tv4.validate(",
											"        body, errorSchema);",
											"}",
											"",
											"if (responseCode.code === 200) {",
											"    tests[\"Response is a valid collection object\"] = tv4.validate(",
											"        body, collectionSchema);",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer undefined"
									}
								],
								"body": {},
								"url": {
									"raw": "http://{{host}}/api/projects?limit={{limit}}&page={{page}}&sort[]={{sort}}&with[]={{with}}&search={{search}}",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"projects"
									],
									"query": [
										{
											"key": "limit",
											"value": "{{limit}}",
											"equals": true
										},
										{
											"key": "page",
											"value": "{{page}}",
											"equals": true
										},
										{
											"key": "sort[]",
											"value": "{{sort}}",
											"equals": true
										},
										{
											"key": "with[]",
											"value": "{{with}}",
											"equals": true
										},
										{
											"key": "search",
											"value": "{{search}}",
											"equals": true
										}
									]
								},
								"description": "Obtain a list of projects.\n\nAccess:\n\t\n\tAll users.\n\nParameters:\n\n    limit     Maximum number of results to fetch\n    page      Page of results to fetch\n    search    Restrict the results to the given search string\n    sort[]    Results order array\n    with[]    Array of related objects to fetch\n\nRelated objects that can be fetched:\n\n"
							},
							"response": []
						},
						{
							"name": "Retrieve a project",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8090185b-15e6-4002-857d-b210b370d436",
										"type": "text/javascript",
										"exec": [
											"/* Get response body and content type */",
											"var body = JSON.parse(responseBody);",
											"var contentType = postman.getResponseHeader(\"Content-Type\");",
											"",
											"/* Valid status codes for this resource */",
											"var statusCodes = [200, 400, 401, 403, 404, 422];",
											"",
											"/* JSON error response schema */",
											"var errorSchema = {",
											"    type: 'object',",
											"    required: ['status', 'message'],",
											"    properties: {",
											"        'status' : {",
											"            type: 'number'",
											"        },",
											"        'message' : {",
											"            type: 'string'",
											"        },",
											"        'errors' : {",
											"            type: 'object',",
											"            required: [\"code\", \"message\"],",
											"        }",
											"    }",
											"};",
											"",
											"/* Model JSON message schema */",
											"var modelSchema = {",
											"    type: 'object',",
											"    required: ['id'],",
											"    properties: {",
											"        'id' : { type: 'integer' }",
											"    }",
											"};",
											"",
											"",
											"/*",
											" * Basic tests",
											" */",
											"",
											"tests[\"Response time is less than 300ms\"] = (",
											"    responseTime < 300);",
											"",
											"tests[\"Content-Type is 'application/json'\"] = (",
											"    !!contentType && contentType.has(\"application/json\"));",
											"",
											"tests[\"Status code is valid\"] = (",
											"    statusCodes.indexOf(responseCode.code) >= 0);",
											"",
											"",
											"/*",
											" * Validate JSON responses",
											" */",
											"",
											"tests[\"Response is a JSON object\"] = tv4.validate(",
											"    body, {type: 'object'});",
											"",
											"if (responseCode.code >= 400 && responseCode.code < 422) {",
											"    tests[\"Response is a valid error object\"] = tv4.validate(",
											"        body, errorSchema);",
											"}",
											"",
											"if (responseCode.code === 200) {",
											"    tests[\"Response is a valid model object\"] = tv4.validate(",
											"        body, modelSchema);",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {},
								"url": {
									"raw": "http://{{host}}/api/projects/:id",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"projects",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{id}}"
										}
									]
								},
								"description": "Retrieve a single project object.\n\nAccess:\n\t\n\tAll users."
							},
							"response": []
						},
						{
							"name": "Update a project",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"/* Get response body and content type */",
											"var body = JSON.parse(responseBody);",
											"var contentType = postman.getResponseHeader(\"Content-Type\");",
											"",
											"/* Valid status codes for this resource */",
											"var statusCodes = [200, 400, 401, 403, 404, 422];",
											"",
											"/* JSON error response schema */",
											"var errorSchema = {",
											"    type: 'object',",
											"    required: ['status', 'message'],",
											"    properties: {",
											"        'status' : {",
											"            type: 'number'",
											"        },",
											"        'message' : {",
											"            type: 'string'",
											"        },",
											"        'errors' : {",
											"            type: 'object',",
											"            required: [\"code\", \"message\"],",
											"        }",
											"    }",
											"};",
											"",
											"/* Success JSON message schema */",
											"var successSchema = {",
											"    type: 'object',",
											"    required: ['id'],",
											"    properties: {",
											"        'id' : { type: 'integer' }",
											"    }",
											"};",
											"",
											"",
											"/*",
											" * Basic tests",
											" */",
											"",
											"tests[\"Response time is less than 300ms\"] = (",
											"    responseTime < 300);",
											"",
											"tests[\"Content-Type is 'application/json'\"] = (",
											"    !!contentType && contentType.has(\"application/json\"));",
											"",
											"tests[\"Status code is valid\"] = (",
											"    statusCodes.indexOf(responseCode.code) >= 0);",
											"",
											"",
											"/*",
											" * Validate JSON responses",
											" */",
											"",
											"tests[\"Response is a JSON object\"] = tv4.validate(",
											"    body, {type: 'object'});",
											"",
											"if (responseCode.code >= 400 && responseCode.code < 422) {",
											"    tests[\"Response is a valid error object\"] = tv4.validate(",
											"        body, errorSchema);",
											"}",
											"",
											"if (responseCode.code === 200 && request.method !== 'GET') {",
											"    tests[\"Response is a valid success object\"] = tv4.validate(",
											"        body, successSchema);",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{host}}/api/projects/:id",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"projects",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{id}}"
										}
									]
								},
								"description": "Update an existing project object.\n\nAccess:\n\t\n\tAdministrators."
							},
							"response": []
						},
						{
							"name": "Store a new project",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"/* Get response body and content type */",
											"var body = JSON.parse(responseBody);",
											"var contentType = postman.getResponseHeader(\"Content-Type\");",
											"",
											"/* Valid status codes for this resource */",
											"var statusCodes = [200, 400, 401, 403, 404, 422];",
											"",
											"/* JSON error response schema */",
											"var errorSchema = {",
											"    type: 'object',",
											"    required: ['status', 'message'],",
											"    properties: {",
											"        'status' : {",
											"            type: 'number'",
											"        },",
											"        'message' : {",
											"            type: 'string'",
											"        },",
											"        'errors' : {",
											"            type: 'object',",
											"            required: [\"code\", \"message\"],",
											"        }",
											"    }",
											"};",
											"",
											"/* Success JSON message schema */",
											"var successSchema = {",
											"    type: 'object',",
											"    required: ['id'],",
											"    properties: {",
											"        'id' : { type: 'integer' }",
											"    }",
											"};",
											"",
											"",
											"/*",
											" * Basic tests",
											" */",
											"",
											"tests[\"Response time is less than 300ms\"] = (",
											"    responseTime < 300);",
											"",
											"tests[\"Content-Type is 'application/json'\"] = (",
											"    !!contentType && contentType.has(\"application/json\"));",
											"",
											"tests[\"Status code is valid\"] = (",
											"    statusCodes.indexOf(responseCode.code) >= 0);",
											"",
											"",
											"/*",
											" * Validate JSON responses",
											" */",
											"",
											"tests[\"Response is a JSON object\"] = tv4.validate(",
											"    body, {type: 'object'});",
											"",
											"if (responseCode.code >= 400 && responseCode.code < 422) {",
											"    tests[\"Response is a valid error object\"] = tv4.validate(",
											"        body, errorSchema);",
											"}",
											"",
											"if (responseCode.code === 200 && request.method !== 'GET') {",
											"    tests[\"Response is a valid success object\"] = tv4.validate(",
											"        body, successSchema);",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{host}}/api/projects",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"projects"
									]
								},
								"description": "Create a new project object.\n\nAccess:\n\n\tAdministrators."
							},
							"response": []
						},
						{
							"name": "Remove a project",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f0f37432-fab0-4d85-a2f6-03d018ae8b3b",
										"type": "text/javascript",
										"exec": [
											"/* Get response body and content type */",
											"var body = JSON.parse(responseBody);",
											"var contentType = postman.getResponseHeader(\"Content-Type\");",
											"",
											"/* Valid status codes for this resource */",
											"var statusCodes = [200, 400, 401, 403, 404, 422];",
											"",
											"/* JSON error response schema */",
											"var errorSchema = {",
											"    type: 'object',",
											"    required: ['status', 'message'],",
											"    properties: {",
											"        'status' : {",
											"            type: 'number'",
											"        },",
											"        'message' : {",
											"            type: 'string'",
											"        },",
											"        'errors' : {",
											"            type: 'object',",
											"            required: [\"code\", \"message\"],",
											"        }",
											"    }",
											"};",
											"",
											"/* Success JSON message schema */",
											"var successSchema = {",
											"    type: 'object',",
											"    required: ['id'],",
											"    properties: {",
											"        'id' : { type: 'integer' }",
											"    }",
											"};",
											"",
											"",
											"/*",
											" * Basic tests",
											" */",
											"",
											"tests[\"Response time is less than 300ms\"] = (",
											"    responseTime < 300);",
											"",
											"tests[\"Content-Type is 'application/json'\"] = (",
											"    !!contentType && contentType.has(\"application/json\"));",
											"",
											"tests[\"Status code is valid\"] = (",
											"    statusCodes.indexOf(responseCode.code) >= 0);",
											"",
											"",
											"/*",
											" * Validate JSON responses",
											" */",
											"",
											"tests[\"Response is a JSON object\"] = tv4.validate(",
											"    body, {type: 'object'});",
											"",
											"if (responseCode.code >= 400 && responseCode.code < 422) {",
											"    tests[\"Response is a valid error object\"] = tv4.validate(",
											"        body, errorSchema);",
											"}",
											"",
											"if (responseCode.code === 200 && request.method !== 'GET') {",
											"    tests[\"Response is a valid success object\"] = tv4.validate(",
											"        body, successSchema);",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {},
								"url": {
									"raw": "http://{{host}}/api/projects/:id",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"projects",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{id}}"
										}
									]
								},
								"description": "Delete a single project.\n\nAccess:\n\t\n\tAdministrators."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "schools",
					"description": "School resource",
					"item": [
						{
							"name": "Schools listing",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a7cbe789-6d30-47a7-b036-f0cbbe2c1cc1",
										"type": "text/javascript",
										"exec": [
											"/* Get response body and content type */",
											"var body = JSON.parse(responseBody);",
											"var contentType = postman.getResponseHeader(\"Content-Type\");",
											"",
											"/* Valid status codes for this resource */",
											"var statusCodes = [200, 400, 401, 403, 404, 422];",
											"",
											"/* JSON error response schema */",
											"var errorSchema = {",
											"    type: 'object',",
											"    required: ['status', 'message'],",
											"    properties: {",
											"        'status' : {",
											"            type: 'number'",
											"        },",
											"        'message' : {",
											"            type: 'string'",
											"        },",
											"        'errors' : {",
											"            type: 'object',",
											"            required: [\"code\", \"message\"],",
											"        }",
											"    }",
											"};",
											"",
											"/* Index JSON message schema */",
											"var collectionSchema = {",
											"    type: 'object',",
											"    required: [",
											"        'current_page',",
											"        'data',",
											"        'from',",
											"        'last_page',",
											"        'per_page',",
											"        'to',",
											"        'total'",
											"    ],",
											"    properties: {",
											"        'total' : { type: 'integer' },",
											"        'current_page' : { type: 'integer' },",
											"        'from' : { type: ['integer', 'null'] },",
											"        'to' : { type: ['integer', 'null'] },",
											"        'data' : {",
											"            type: 'array',",
											"            items: {",
											"              type: 'object',",
											"              required: ['id'],",
											"              properties: {",
											"                'id' : { type: 'integer' }",
											"              }",
											"            }",
											"        }",
											"    }",
											"};",
											"",
											"/*",
											" * Basic tests",
											" */",
											"",
											"tests[\"Response time is less than 300ms\"] = (",
											"    responseTime < 300);",
											"",
											"tests[\"Content-Type is 'application/json'\"] = (",
											"    !!contentType && contentType.has(\"application/json\"));",
											"",
											"tests[\"Status code is valid\"] = (",
											"    statusCodes.indexOf(responseCode.code) >= 0);",
											"",
											"",
											"/*",
											" * Validate JSON responses",
											" */",
											"",
											"tests[\"Response is a JSON object\"] = tv4.validate(",
											"    body, {type: 'object'});",
											"",
											"if (responseCode.code >= 400 && responseCode.code < 422) {",
											"    tests[\"Response is a valid error object\"] = tv4.validate(",
											"        body, errorSchema);",
											"}",
											"",
											"if (responseCode.code === 200) {",
											"    tests[\"Response is a valid collection object\"] = tv4.validate(",
											"        body, collectionSchema);",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {},
								"url": {
									"raw": "http://{{host}}/api/schools?limit={{limit}}&page={{page}}&sort[]={{sort}}&with[]={{with}}&search={{search}}",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"schools"
									],
									"query": [
										{
											"key": "limit",
											"value": "{{limit}}",
											"equals": true
										},
										{
											"key": "page",
											"value": "{{page}}",
											"equals": true
										},
										{
											"key": "sort[]",
											"value": "{{sort}}",
											"equals": true
										},
										{
											"key": "with[]",
											"value": "{{with}}",
											"equals": true
										},
										{
											"key": "search",
											"value": "{{search}}",
											"equals": true
										}
									]
								},
								"description": "Obtain a list of schools.\n\nAccess:\n\t\n\tAll users.\n\nParameters:\n\n    limit     Maximum number of results to fetch\n    page      Page of results to fetch\n    search    Restrict the results to the given search string\n    sort[]    Results order array\n    with[]    Array of related objects to fetch\n\nRelated objects that can be fetched:\n\n"
							},
							"response": []
						},
						{
							"name": "Retrieve a school",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d56c7fea-2fde-4cd0-8981-e17f6c29f112",
										"type": "text/javascript",
										"exec": [
											"/* Get response body and content type */",
											"var body = JSON.parse(responseBody);",
											"var contentType = postman.getResponseHeader(\"Content-Type\");",
											"",
											"/* Valid status codes for this resource */",
											"var statusCodes = [200, 400, 401, 403, 404, 422];",
											"",
											"/* JSON error response schema */",
											"var errorSchema = {",
											"    type: 'object',",
											"    required: ['status', 'message'],",
											"    properties: {",
											"        'status' : {",
											"            type: 'number'",
											"        },",
											"        'message' : {",
											"            type: 'string'",
											"        },",
											"        'errors' : {",
											"            type: 'object',",
											"            required: [\"code\", \"message\"],",
											"        }",
											"    }",
											"};",
											"",
											"/* Model JSON message schema */",
											"var modelSchema = {",
											"    type: 'object',",
											"    required: ['id'],",
											"    properties: {",
											"        'id' : { type: 'integer' }",
											"    }",
											"};",
											"",
											"",
											"/*",
											" * Basic tests",
											" */",
											"",
											"tests[\"Response time is less than 300ms\"] = (",
											"    responseTime < 300);",
											"",
											"tests[\"Content-Type is 'application/json'\"] = (",
											"    !!contentType && contentType.has(\"application/json\"));",
											"",
											"tests[\"Status code is valid\"] = (",
											"    statusCodes.indexOf(responseCode.code) >= 0);",
											"",
											"",
											"/*",
											" * Validate JSON responses",
											" */",
											"",
											"tests[\"Response is a JSON object\"] = tv4.validate(",
											"    body, {type: 'object'});",
											"",
											"if (responseCode.code >= 400 && responseCode.code < 422) {",
											"    tests[\"Response is a valid error object\"] = tv4.validate(",
											"        body, errorSchema);",
											"}",
											"",
											"if (responseCode.code === 200) {",
											"    tests[\"Response is a valid model object\"] = tv4.validate(",
											"        body, modelSchema);",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {},
								"url": {
									"raw": "http://{{host}}/api/schools/:id",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"schools",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{id}}"
										}
									]
								},
								"description": "Retrieve a single school object.\n\nAccess:\n\t\n\tAll users."
							},
							"response": []
						},
						{
							"name": "Update a school",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"/* Get response body and content type */",
											"var body = JSON.parse(responseBody);",
											"var contentType = postman.getResponseHeader(\"Content-Type\");",
											"",
											"/* Valid status codes for this resource */",
											"var statusCodes = [200, 400, 401, 403, 404, 422];",
											"",
											"/* JSON error response schema */",
											"var errorSchema = {",
											"    type: 'object',",
											"    required: ['status', 'message'],",
											"    properties: {",
											"        'status' : {",
											"            type: 'number'",
											"        },",
											"        'message' : {",
											"            type: 'string'",
											"        },",
											"        'errors' : {",
											"            type: 'object',",
											"            required: [\"code\", \"message\"],",
											"        }",
											"    }",
											"};",
											"",
											"/* Success JSON message schema */",
											"var successSchema = {",
											"    type: 'object',",
											"    required: ['id'],",
											"    properties: {",
											"        'id' : { type: 'integer' }",
											"    }",
											"};",
											"",
											"",
											"/*",
											" * Basic tests",
											" */",
											"",
											"tests[\"Response time is less than 300ms\"] = (",
											"    responseTime < 300);",
											"",
											"tests[\"Content-Type is 'application/json'\"] = (",
											"    !!contentType && contentType.has(\"application/json\"));",
											"",
											"tests[\"Status code is valid\"] = (",
											"    statusCodes.indexOf(responseCode.code) >= 0);",
											"",
											"",
											"/*",
											" * Validate JSON responses",
											" */",
											"",
											"tests[\"Response is a JSON object\"] = tv4.validate(",
											"    body, {type: 'object'});",
											"",
											"if (responseCode.code >= 400 && responseCode.code < 422) {",
											"    tests[\"Response is a valid error object\"] = tv4.validate(",
											"        body, errorSchema);",
											"}",
											"",
											"if (responseCode.code === 200 && request.method !== 'GET') {",
											"    tests[\"Response is a valid success object\"] = tv4.validate(",
											"        body, successSchema);",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{host}}/api/schools/:id",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"schools",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{id}}"
										}
									]
								},
								"description": "Update an existing school object.\n\nAccess:\n\t\n\tAdministrators."
							},
							"response": []
						},
						{
							"name": "Store a new school",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"/* Get response body and content type */",
											"var body = JSON.parse(responseBody);",
											"var contentType = postman.getResponseHeader(\"Content-Type\");",
											"",
											"/* Valid status codes for this resource */",
											"var statusCodes = [200, 400, 401, 403, 404, 422];",
											"",
											"/* JSON error response schema */",
											"var errorSchema = {",
											"    type: 'object',",
											"    required: ['status', 'message'],",
											"    properties: {",
											"        'status' : {",
											"            type: 'number'",
											"        },",
											"        'message' : {",
											"            type: 'string'",
											"        },",
											"        'errors' : {",
											"            type: 'object',",
											"            required: [\"code\", \"message\"],",
											"        }",
											"    }",
											"};",
											"",
											"/* Success JSON message schema */",
											"var successSchema = {",
											"    type: 'object',",
											"    required: ['id'],",
											"    properties: {",
											"        'id' : { type: 'integer' }",
											"    }",
											"};",
											"",
											"",
											"/*",
											" * Basic tests",
											" */",
											"",
											"tests[\"Response time is less than 300ms\"] = (",
											"    responseTime < 300);",
											"",
											"tests[\"Content-Type is 'application/json'\"] = (",
											"    !!contentType && contentType.has(\"application/json\"));",
											"",
											"tests[\"Status code is valid\"] = (",
											"    statusCodes.indexOf(responseCode.code) >= 0);",
											"",
											"",
											"/*",
											" * Validate JSON responses",
											" */",
											"",
											"tests[\"Response is a JSON object\"] = tv4.validate(",
											"    body, {type: 'object'});",
											"",
											"if (responseCode.code >= 400 && responseCode.code < 422) {",
											"    tests[\"Response is a valid error object\"] = tv4.validate(",
											"        body, errorSchema);",
											"}",
											"",
											"if (responseCode.code === 200 && request.method !== 'GET') {",
											"    tests[\"Response is a valid success object\"] = tv4.validate(",
											"        body, successSchema);",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{host}}/api/schools",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"schools"
									]
								},
								"description": "Create a new school object.\n\nAccess:\n\n\tAdministrators."
							},
							"response": []
						},
						{
							"name": "Remove a school",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "44c8cc30-8f78-4e89-93fe-252706c48fb4",
										"type": "text/javascript",
										"exec": [
											"/* Get response body and content type */",
											"var body = JSON.parse(responseBody);",
											"var contentType = postman.getResponseHeader(\"Content-Type\");",
											"",
											"/* Valid status codes for this resource */",
											"var statusCodes = [200, 400, 401, 403, 404, 422];",
											"",
											"/* JSON error response schema */",
											"var errorSchema = {",
											"    type: 'object',",
											"    required: ['status', 'message'],",
											"    properties: {",
											"        'status' : {",
											"            type: 'number'",
											"        },",
											"        'message' : {",
											"            type: 'string'",
											"        },",
											"        'errors' : {",
											"            type: 'object',",
											"            required: [\"code\", \"message\"],",
											"        }",
											"    }",
											"};",
											"",
											"/* Success JSON message schema */",
											"var successSchema = {",
											"    type: 'object',",
											"    required: ['id'],",
											"    properties: {",
											"        'id' : { type: 'integer' }",
											"    }",
											"};",
											"",
											"",
											"/*",
											" * Basic tests",
											" */",
											"",
											"tests[\"Response time is less than 300ms\"] = (",
											"    responseTime < 300);",
											"",
											"tests[\"Content-Type is 'application/json'\"] = (",
											"    !!contentType && contentType.has(\"application/json\"));",
											"",
											"tests[\"Status code is valid\"] = (",
											"    statusCodes.indexOf(responseCode.code) >= 0);",
											"",
											"",
											"/*",
											" * Validate JSON responses",
											" */",
											"",
											"tests[\"Response is a JSON object\"] = tv4.validate(",
											"    body, {type: 'object'});",
											"",
											"if (responseCode.code >= 400 && responseCode.code < 422) {",
											"    tests[\"Response is a valid error object\"] = tv4.validate(",
											"        body, errorSchema);",
											"}",
											"",
											"if (responseCode.code === 200 && request.method !== 'GET') {",
											"    tests[\"Response is a valid success object\"] = tv4.validate(",
											"        body, successSchema);",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {},
								"url": {
									"raw": "http://{{host}}/api/schools/:id",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"schools",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{id}}"
										}
									]
								},
								"description": "Delete a single school.\n\nAccess:\n\t\n\tAdministrators."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "users",
					"description": "User resource",
					"item": [
						{
							"name": "Users listing",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8843763b-8bd3-42c2-b4d8-0b2f9b46b26d",
										"type": "text/javascript",
										"exec": [
											"/* Get response body and content type */",
											"var body = JSON.parse(responseBody);",
											"var contentType = postman.getResponseHeader(\"Content-Type\");",
											"",
											"/* Valid status codes for this resource */",
											"var statusCodes = [200, 400, 401, 403, 404, 422];",
											"",
											"/* JSON error response schema */",
											"var errorSchema = {",
											"    type: 'object',",
											"    required: ['status', 'message'],",
											"    properties: {",
											"        'status' : {",
											"            type: 'number'",
											"        },",
											"        'message' : {",
											"            type: 'string'",
											"        },",
											"        'errors' : {",
											"            type: 'object',",
											"            required: [\"code\", \"message\"],",
											"        }",
											"    }",
											"};",
											"",
											"/* Index JSON message schema */",
											"var collectionSchema = {",
											"    type: 'object',",
											"    required: [",
											"        'current_page',",
											"        'data',",
											"        'from',",
											"        'last_page',",
											"        'per_page',",
											"        'to',",
											"        'total'",
											"    ],",
											"    properties: {",
											"        'total' : { type: 'integer' },",
											"        'current_page' : { type: 'integer' },",
											"        'from' : { type: ['integer', 'null'] },",
											"        'to' : { type: ['integer', 'null'] },",
											"        'data' : {",
											"            type: 'array',",
											"            items: {",
											"              type: 'object',",
											"              required: ['id'],",
											"              properties: {",
											"                'id' : { type: 'integer' }",
											"              }",
											"            }",
											"        }",
											"    }",
											"};",
											"",
											"/*",
											" * Basic tests",
											" */",
											"",
											"tests[\"Response time is less than 300ms\"] = (",
											"    responseTime < 300);",
											"",
											"tests[\"Content-Type is 'application/json'\"] = (",
											"    !!contentType && contentType.has(\"application/json\"));",
											"",
											"tests[\"Status code is valid\"] = (",
											"    statusCodes.indexOf(responseCode.code) >= 0);",
											"",
											"",
											"/*",
											" * Validate JSON responses",
											" */",
											"",
											"tests[\"Response is a JSON object\"] = tv4.validate(",
											"    body, {type: 'object'});",
											"",
											"if (responseCode.code >= 400 && responseCode.code < 422) {",
											"    tests[\"Response is a valid error object\"] = tv4.validate(",
											"        body, errorSchema);",
											"}",
											"",
											"if (responseCode.code === 200) {",
											"    tests[\"Response is a valid collection object\"] = tv4.validate(",
											"        body, collectionSchema);",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {},
								"url": {
									"raw": "http://{{host}}/api/users?limit={{limit}}&page={{page}}&sort[]={{sort}}&with[]={{with}}&search={{search}}",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"users"
									],
									"query": [
										{
											"key": "limit",
											"value": "{{limit}}",
											"equals": true
										},
										{
											"key": "page",
											"value": "{{page}}",
											"equals": true
										},
										{
											"key": "sort[]",
											"value": "{{sort}}",
											"equals": true
										},
										{
											"key": "with[]",
											"value": "{{with}}",
											"equals": true
										},
										{
											"key": "search",
											"value": "{{search}}",
											"equals": true
										}
									]
								},
								"description": "Obtain a list of users.\n\nAccess:\n\t\n\tAdministrators.\n\nParameters:\n\n    limit     Maximum number of results to fetch\n    page      Page of results to fetch\n    search    Restrict the results to the given search string\n    sort[]    Results order array\n    with[]    Array of related objects to fetch\n\nRelated objects that can be fetched:\n\n"
							},
							"response": []
						},
						{
							"name": "Retrieve a user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "59373a4c-8eac-485e-9865-6274d67c625b",
										"type": "text/javascript",
										"exec": [
											"/* Get response body and content type */",
											"var body = JSON.parse(responseBody);",
											"var contentType = postman.getResponseHeader(\"Content-Type\");",
											"",
											"/* Valid status codes for this resource */",
											"var statusCodes = [200, 400, 401, 403, 404, 422];",
											"",
											"/* JSON error response schema */",
											"var errorSchema = {",
											"    type: 'object',",
											"    required: ['status', 'message'],",
											"    properties: {",
											"        'status' : {",
											"            type: 'number'",
											"        },",
											"        'message' : {",
											"            type: 'string'",
											"        },",
											"        'errors' : {",
											"            type: 'object',",
											"            required: [\"code\", \"message\"],",
											"        }",
											"    }",
											"};",
											"",
											"/* Model JSON message schema */",
											"var modelSchema = {",
											"    type: 'object',",
											"    required: ['id'],",
											"    properties: {",
											"        'id' : { type: 'integer' }",
											"    }",
											"};",
											"",
											"",
											"/*",
											" * Basic tests",
											" */",
											"",
											"tests[\"Response time is less than 300ms\"] = (",
											"    responseTime < 300);",
											"",
											"tests[\"Content-Type is 'application/json'\"] = (",
											"    !!contentType && contentType.has(\"application/json\"));",
											"",
											"tests[\"Status code is valid\"] = (",
											"    statusCodes.indexOf(responseCode.code) >= 0);",
											"",
											"",
											"/*",
											" * Validate JSON responses",
											" */",
											"",
											"tests[\"Response is a JSON object\"] = tv4.validate(",
											"    body, {type: 'object'});",
											"",
											"if (responseCode.code >= 400 && responseCode.code < 422) {",
											"    tests[\"Response is a valid error object\"] = tv4.validate(",
											"        body, errorSchema);",
											"}",
											"",
											"if (responseCode.code === 200) {",
											"    tests[\"Response is a valid model object\"] = tv4.validate(",
											"        body, modelSchema);",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {},
								"url": {
									"raw": "http://{{host}}/api/users/:id",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"users",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{id}}"
										}
									]
								},
								"description": "Retrieve a single user object.\n\nAccess:\n\t\n\tAdministrators."
							},
							"response": []
						},
						{
							"name": "Re-enable a user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1b574f9a-30e8-44e7-b2b4-9f49d2a82f07",
										"type": "text/javascript",
										"exec": [
											"/* Get response body and content type */",
											"var body = JSON.parse(responseBody);",
											"var contentType = postman.getResponseHeader(\"Content-Type\");",
											"",
											"/* Valid status codes for this resource */",
											"var statusCodes = [200, 400, 401, 403, 404, 422];",
											"",
											"/* JSON error response schema */",
											"var errorSchema = {",
											"    type: 'object',",
											"    required: ['status', 'message'],",
											"    properties: {",
											"        'status' : {",
											"            type: 'number'",
											"        },",
											"        'message' : {",
											"            type: 'string'",
											"        },",
											"        'errors' : {",
											"            type: 'object',",
											"            required: [\"code\", \"message\"],",
											"        }",
											"    }",
											"};",
											"",
											"/* Success JSON message schema */",
											"var successSchema = {",
											"    type: 'object',",
											"    required: ['id'],",
											"    properties: {",
											"        'id' : { type: 'integer' }",
											"    }",
											"};",
											"",
											"",
											"/*",
											" * Basic tests",
											" */",
											"",
											"tests[\"Response time is less than 300ms\"] = (",
											"    responseTime < 300);",
											"",
											"tests[\"Content-Type is 'application/json'\"] = (",
											"    !!contentType && contentType.has(\"application/json\"));",
											"",
											"tests[\"Status code is valid\"] = (",
											"    statusCodes.indexOf(responseCode.code) >= 0);",
											"",
											"",
											"/*",
											" * Validate JSON responses",
											" */",
											"",
											"tests[\"Response is a JSON object\"] = tv4.validate(",
											"    body, {type: 'object'});",
											"",
											"if (responseCode.code >= 400 && responseCode.code < 422) {",
											"    tests[\"Response is a valid error object\"] = tv4.validate(",
											"        body, errorSchema);",
											"}",
											"",
											"if (responseCode.code === 200 && request.method !== 'GET') {",
											"    tests[\"Response is a valid success object\"] = tv4.validate(",
											"        body, successSchema);",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {},
								"url": {
									"raw": "http://{{host}}/api/users/:id",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"users",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{id}}"
										}
									]
								},
								"description": "Enable a disabled user object.\n\nAccess:\n\t\n\tAdministrators."
							},
							"response": []
						},
						{
							"name": "Disable a user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e9074fc4-b5a2-4b0b-add9-3ce4b4ba4dcc",
										"type": "text/javascript",
										"exec": [
											"/* Get response body and content type */",
											"var body = JSON.parse(responseBody);",
											"var contentType = postman.getResponseHeader(\"Content-Type\");",
											"",
											"/* Valid status codes for this resource */",
											"var statusCodes = [200, 400, 401, 403, 404, 422];",
											"",
											"/* JSON error response schema */",
											"var errorSchema = {",
											"    type: 'object',",
											"    required: ['status', 'message'],",
											"    properties: {",
											"        'status' : {",
											"            type: 'number'",
											"        },",
											"        'message' : {",
											"            type: 'string'",
											"        },",
											"        'errors' : {",
											"            type: 'object',",
											"            required: [\"code\", \"message\"],",
											"        }",
											"    }",
											"};",
											"",
											"/* Success JSON message schema */",
											"var successSchema = {",
											"    type: 'object',",
											"    required: ['id'],",
											"    properties: {",
											"        'id' : { type: 'integer' }",
											"    }",
											"};",
											"",
											"",
											"/*",
											" * Basic tests",
											" */",
											"",
											"tests[\"Response time is less than 300ms\"] = (",
											"    responseTime < 300);",
											"",
											"tests[\"Content-Type is 'application/json'\"] = (",
											"    !!contentType && contentType.has(\"application/json\"));",
											"",
											"tests[\"Status code is valid\"] = (",
											"    statusCodes.indexOf(responseCode.code) >= 0);",
											"",
											"",
											"/*",
											" * Validate JSON responses",
											" */",
											"",
											"tests[\"Response is a JSON object\"] = tv4.validate(",
											"    body, {type: 'object'});",
											"",
											"if (responseCode.code >= 400 && responseCode.code < 422) {",
											"    tests[\"Response is a valid error object\"] = tv4.validate(",
											"        body, errorSchema);",
											"}",
											"",
											"if (responseCode.code === 200 && request.method !== 'GET') {",
											"    tests[\"Response is a valid success object\"] = tv4.validate(",
											"        body, successSchema);",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {},
								"url": {
									"raw": "http://{{host}}/api/users/:id",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"users",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{id}}"
										}
									]
								},
								"description": "Disable a single user.\n\nAccess:\n\t\n\tAdministrators."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "POSTS",
			"item": [
				{
					"name": "comments",
					"description": "Comment resource",
					"item": [
						{
							"name": "Comments listing",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "17d08f2f-1bf3-4cf7-ac2d-875f95b850b0",
										"type": "text/javascript",
										"exec": [
											"/* Get response body and content type */",
											"var body = JSON.parse(responseBody);",
											"var contentType = postman.getResponseHeader(\"Content-Type\");",
											"",
											"/* Valid status codes for this resource */",
											"var statusCodes = [200, 400, 401, 403, 404, 422];",
											"",
											"/* JSON error response schema */",
											"var errorSchema = {",
											"    type: 'object',",
											"    required: ['status', 'message'],",
											"    properties: {",
											"        'status' : {",
											"            type: 'number'",
											"        },",
											"        'message' : {",
											"            type: 'string'",
											"        },",
											"        'errors' : {",
											"            type: 'object',",
											"            required: [\"code\", \"message\"],",
											"        }",
											"    }",
											"};",
											"",
											"/* Index JSON message schema */",
											"var collectionSchema = {",
											"    type: 'object',",
											"    required: [",
											"        'current_page',",
											"        'data',",
											"        'from',",
											"        'last_page',",
											"        'per_page',",
											"        'to',",
											"        'total'",
											"    ],",
											"    properties: {",
											"        'total' : { type: 'integer' },",
											"        'current_page' : { type: 'integer' },",
											"        'from' : { type: ['integer', 'null'] },",
											"        'to' : { type: ['integer', 'null'] },",
											"        'data' : {",
											"            type: 'array',",
											"            items: {",
											"              type: 'object',",
											"              required: ['id'],",
											"              properties: {",
											"                'id' : { type: 'integer' }",
											"              }",
											"            }",
											"        }",
											"    }",
											"};",
											"",
											"/*",
											" * Basic tests",
											" */",
											"",
											"tests[\"Response time is less than 300ms\"] = (",
											"    responseTime < 300);",
											"",
											"tests[\"Content-Type is 'application/json'\"] = (",
											"    !!contentType && contentType.has(\"application/json\"));",
											"",
											"tests[\"Status code is valid\"] = (",
											"    statusCodes.indexOf(responseCode.code) >= 0);",
											"",
											"",
											"/*",
											" * Validate JSON responses",
											" */",
											"",
											"tests[\"Response is a JSON object\"] = tv4.validate(",
											"    body, {type: 'object'});",
											"",
											"if (responseCode.code >= 400 && responseCode.code < 422) {",
											"    tests[\"Response is a valid error object\"] = tv4.validate(",
											"        body, errorSchema);",
											"}",
											"",
											"if (responseCode.code === 200) {",
											"    tests[\"Response is a valid collection object\"] = tv4.validate(",
											"        body, collectionSchema);",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {},
								"url": {
									"raw": "http://{{host}}/api/comments?limit={{limit}}&page={{page}}&sort[]={{sort}}&with[]={{with}}&search={{search}}",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"comments"
									],
									"query": [
										{
											"key": "limit",
											"value": "{{limit}}",
											"equals": true
										},
										{
											"key": "page",
											"value": "{{page}}",
											"equals": true
										},
										{
											"key": "sort[]",
											"value": "{{sort}}",
											"equals": true
										},
										{
											"key": "with[]",
											"value": "{{with}}",
											"equals": true
										},
										{
											"key": "search",
											"value": "{{search}}",
											"equals": true
										}
									]
								},
								"description": "Obtain a list of comments.\n\nAccess:\n\t\n\tAll users.\n\nParameters:\n\n    limit     Maximum number of results to fetch\n    page      Page of results to fetch\n    search    Restrict the results to the given search string\n    sort[]    Results order array\n    with[]    Array of related objects to fetch\n\nRelated objects that can be fetched:\n\n    post      Post object\n    user      User object\n"
							},
							"response": []
						},
						{
							"name": "Retrieve a comment",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bfa39915-f799-4d37-942c-156225044c0a",
										"type": "text/javascript",
										"exec": [
											"/* Get response body and content type */",
											"var body = JSON.parse(responseBody);",
											"var contentType = postman.getResponseHeader(\"Content-Type\");",
											"",
											"/* Valid status codes for this resource */",
											"var statusCodes = [200, 400, 401, 403, 404, 422];",
											"",
											"/* JSON error response schema */",
											"var errorSchema = {",
											"    type: 'object',",
											"    required: ['status', 'message'],",
											"    properties: {",
											"        'status' : {",
											"            type: 'number'",
											"        },",
											"        'message' : {",
											"            type: 'string'",
											"        },",
											"        'errors' : {",
											"            type: 'object',",
											"            required: [\"code\", \"message\"],",
											"        }",
											"    }",
											"};",
											"",
											"/* Model JSON message schema */",
											"var modelSchema = {",
											"    type: 'object',",
											"    required: ['id'],",
											"    properties: {",
											"        'id' : { type: 'integer' }",
											"    }",
											"};",
											"",
											"",
											"/*",
											" * Basic tests",
											" */",
											"",
											"tests[\"Response time is less than 300ms\"] = (",
											"    responseTime < 300);",
											"",
											"tests[\"Content-Type is 'application/json'\"] = (",
											"    !!contentType && contentType.has(\"application/json\"));",
											"",
											"tests[\"Status code is valid\"] = (",
											"    statusCodes.indexOf(responseCode.code) >= 0);",
											"",
											"",
											"/*",
											" * Validate JSON responses",
											" */",
											"",
											"tests[\"Response is a JSON object\"] = tv4.validate(",
											"    body, {type: 'object'});",
											"",
											"if (responseCode.code >= 400 && responseCode.code < 422) {",
											"    tests[\"Response is a valid error object\"] = tv4.validate(",
											"        body, errorSchema);",
											"}",
											"",
											"if (responseCode.code === 200) {",
											"    tests[\"Response is a valid model object\"] = tv4.validate(",
											"        body, modelSchema);",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {},
								"url": {
									"raw": "http://{{host}}/api/comments/:id",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"comments",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{id}}"
										}
									]
								},
								"description": "Retrieve a single comment object.\n\nAccess:\n\t\n\tAll users."
							},
							"response": []
						},
						{
							"name": "Store a new comment",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"/* Get response body and content type */",
											"var body = JSON.parse(responseBody);",
											"var contentType = postman.getResponseHeader(\"Content-Type\");",
											"",
											"/* Valid status codes for this resource */",
											"var statusCodes = [200, 400, 401, 403, 404, 422];",
											"",
											"/* JSON error response schema */",
											"var errorSchema = {",
											"    type: 'object',",
											"    required: ['status', 'message'],",
											"    properties: {",
											"        'status' : {",
											"            type: 'number'",
											"        },",
											"        'message' : {",
											"            type: 'string'",
											"        },",
											"        'errors' : {",
											"            type: 'object',",
											"            required: [\"code\", \"message\"],",
											"        }",
											"    }",
											"};",
											"",
											"/* Success JSON message schema */",
											"var successSchema = {",
											"    type: 'object',",
											"    required: ['id'],",
											"    properties: {",
											"        'id' : { type: 'integer' }",
											"    }",
											"};",
											"",
											"",
											"/*",
											" * Basic tests",
											" */",
											"",
											"tests[\"Response time is less than 300ms\"] = (",
											"    responseTime < 300);",
											"",
											"tests[\"Content-Type is 'application/json'\"] = (",
											"    !!contentType && contentType.has(\"application/json\"));",
											"",
											"tests[\"Status code is valid\"] = (",
											"    statusCodes.indexOf(responseCode.code) >= 0);",
											"",
											"",
											"/*",
											" * Validate JSON responses",
											" */",
											"",
											"tests[\"Response is a JSON object\"] = tv4.validate(",
											"    body, {type: 'object'});",
											"",
											"if (responseCode.code >= 400 && responseCode.code < 422) {",
											"    tests[\"Response is a valid error object\"] = tv4.validate(",
											"        body, errorSchema);",
											"}",
											"",
											"if (responseCode.code === 200 && request.method !== 'GET') {",
											"    tests[\"Response is a valid success object\"] = tv4.validate(",
											"        body, successSchema);",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{host}}/api/comments",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"comments"
									]
								},
								"description": "Create a new comment object.\n\nAccess:\n\t\n\tAuthenticated users. The stored comment will belong to\n\tthe authenticated user."
							},
							"response": []
						},
						{
							"name": "Remove a comment",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "df7f0016-7977-447f-80eb-b2a365f730cd",
										"type": "text/javascript",
										"exec": [
											"/* Get response body and content type */",
											"var body = JSON.parse(responseBody);",
											"var contentType = postman.getResponseHeader(\"Content-Type\");",
											"",
											"/* Valid status codes for this resource */",
											"var statusCodes = [200, 400, 401, 403, 404, 422];",
											"",
											"/* JSON error response schema */",
											"var errorSchema = {",
											"    type: 'object',",
											"    required: ['status', 'message'],",
											"    properties: {",
											"        'status' : {",
											"            type: 'number'",
											"        },",
											"        'message' : {",
											"            type: 'string'",
											"        },",
											"        'errors' : {",
											"            type: 'object',",
											"            required: [\"code\", \"message\"],",
											"        }",
											"    }",
											"};",
											"",
											"/* Success JSON message schema */",
											"var successSchema = {",
											"    type: 'object',",
											"    required: ['id'],",
											"    properties: {",
											"        'id' : { type: 'integer' }",
											"    }",
											"};",
											"",
											"",
											"/*",
											" * Basic tests",
											" */",
											"",
											"tests[\"Response time is less than 300ms\"] = (",
											"    responseTime < 300);",
											"",
											"tests[\"Content-Type is 'application/json'\"] = (",
											"    !!contentType && contentType.has(\"application/json\"));",
											"",
											"tests[\"Status code is valid\"] = (",
											"    statusCodes.indexOf(responseCode.code) >= 0);",
											"",
											"",
											"/*",
											" * Validate JSON responses",
											" */",
											"",
											"tests[\"Response is a JSON object\"] = tv4.validate(",
											"    body, {type: 'object'});",
											"",
											"if (responseCode.code >= 400 && responseCode.code < 422) {",
											"    tests[\"Response is a valid error object\"] = tv4.validate(",
											"        body, errorSchema);",
											"}",
											"",
											"if (responseCode.code === 200 && request.method !== 'GET') {",
											"    tests[\"Response is a valid success object\"] = tv4.validate(",
											"        body, successSchema);",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {},
								"url": {
									"raw": "http://{{host}}/api/comments/:id",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"comments",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{id}}"
										}
									]
								},
								"description": "Remove a single comment.\n\nAccess:\n\t\n\tAdministrators."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "posts",
					"description": "Post resource",
					"item": [
						{
							"name": "Posts listing",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6c9ae0f2-1f02-4028-8bf0-934bb2b9bb00",
										"type": "text/javascript",
										"exec": [
											"/* Get response body and content type */",
											"var body = JSON.parse(responseBody);",
											"var contentType = postman.getResponseHeader(\"Content-Type\");",
											"",
											"/* Valid status codes for this resource */",
											"var statusCodes = [200, 400, 401, 403, 404, 422];",
											"",
											"/* JSON error response schema */",
											"var errorSchema = {",
											"    type: 'object',",
											"    required: ['status', 'message'],",
											"    properties: {",
											"        'status' : {",
											"            type: 'number'",
											"        },",
											"        'message' : {",
											"            type: 'string'",
											"        },",
											"        'errors' : {",
											"            type: 'object',",
											"            required: [\"code\", \"message\"],",
											"        }",
											"    }",
											"};",
											"",
											"/* Index JSON message schema */",
											"var collectionSchema = {",
											"    type: 'object',",
											"    required: [",
											"        'current_page',",
											"        'data',",
											"        'from',",
											"        'last_page',",
											"        'per_page',",
											"        'to',",
											"        'total'",
											"    ],",
											"    properties: {",
											"        'total' : { type: 'integer' },",
											"        'current_page' : { type: 'integer' },",
											"        'from' : { type: ['integer', 'null'] },",
											"        'to' : { type: ['integer', 'null'] },",
											"        'data' : {",
											"            type: 'array',",
											"            items: {",
											"              type: 'object',",
											"              required: ['id'],",
											"              properties: {",
											"                'id' : { type: 'integer' }",
											"              }",
											"            }",
											"        }",
											"    }",
											"};",
											"",
											"/*",
											" * Basic tests",
											" */",
											"",
											"tests[\"Response time is less than 300ms\"] = (",
											"    responseTime < 300);",
											"",
											"tests[\"Content-Type is 'application/json'\"] = (",
											"    !!contentType && contentType.has(\"application/json\"));",
											"",
											"tests[\"Status code is valid\"] = (",
											"    statusCodes.indexOf(responseCode.code) >= 0);",
											"",
											"",
											"/*",
											" * Validate JSON responses",
											" */",
											"",
											"tests[\"Response is a JSON object\"] = tv4.validate(",
											"    body, {type: 'object'});",
											"",
											"if (responseCode.code >= 400 && responseCode.code < 422) {",
											"    tests[\"Response is a valid error object\"] = tv4.validate(",
											"        body, errorSchema);",
											"}",
											"",
											"if (responseCode.code === 200) {",
											"    tests[\"Response is a valid collection object\"] = tv4.validate(",
											"        body, collectionSchema);",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {},
								"url": {
									"raw": "http://{{host}}/api/posts?limit={{limit}}&page={{page}}&sort[]={{sort}}&with[]={{with}}&search={{search}}",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"posts"
									],
									"query": [
										{
											"key": "limit",
											"value": "{{limit}}",
											"equals": true
										},
										{
											"key": "page",
											"value": "{{page}}",
											"equals": true
										},
										{
											"key": "sort[]",
											"value": "{{sort}}",
											"equals": true
										},
										{
											"key": "with[]",
											"value": "{{with}}",
											"equals": true
										},
										{
											"key": "search",
											"value": "{{search}}",
											"equals": true
										}
									]
								},
								"description": "Obtain a list of posts. Soft-deleted models are only retrieved if the user has administrator rights.\n\nAccess:\n\t\n\tAll users.\n\nParameters:\n\n    limit     Maximum number of results to fetch\n    page      Page of results to fetch\n    search    Restrict the results to the given search string\n    sort[]    Results order array\n    with[]    Array of related objects to fetch\n\nSynapse filter:\n\n    synapse_id\t\t\tSynapse\n\nRelation filters:\n\n    municipality_id\t\tMunicipalities\n    project_id\t\t\tProjects\n    school_id\t\t\tSchools\n    territory_id\t\tTerritories\n    tag_id\t\t\t\tTags\n\nRelated objects that can be fetched:\n\n    author    Author object\n    feed      Feed object\n    reaction  Authenticated user reactions\n    tags\t  Post tags\n"
							},
							"response": []
						},
						{
							"name": "Retrieve a post",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b7bdbbda-886a-4f4d-b06b-22c98436c6b7",
										"type": "text/javascript",
										"exec": [
											"/* Get response body and content type */",
											"var body = JSON.parse(responseBody);",
											"var contentType = postman.getResponseHeader(\"Content-Type\");",
											"",
											"/* Valid status codes for this resource */",
											"var statusCodes = [200, 400, 401, 403, 404, 422];",
											"",
											"/* JSON error response schema */",
											"var errorSchema = {",
											"    type: 'object',",
											"    required: ['status', 'message'],",
											"    properties: {",
											"        'status' : {",
											"            type: 'number'",
											"        },",
											"        'message' : {",
											"            type: 'string'",
											"        },",
											"        'errors' : {",
											"            type: 'object',",
											"            required: [\"code\", \"message\"],",
											"        }",
											"    }",
											"};",
											"",
											"/* Model JSON message schema */",
											"var modelSchema = {",
											"    type: 'object',",
											"    required: ['id'],",
											"    properties: {",
											"        'id' : { type: 'integer' }",
											"    }",
											"};",
											"",
											"",
											"/*",
											" * Basic tests",
											" */",
											"",
											"tests[\"Response time is less than 300ms\"] = (",
											"    responseTime < 300);",
											"",
											"tests[\"Content-Type is 'application/json'\"] = (",
											"    !!contentType && contentType.has(\"application/json\"));",
											"",
											"tests[\"Status code is valid\"] = (",
											"    statusCodes.indexOf(responseCode.code) >= 0);",
											"",
											"",
											"/*",
											" * Validate JSON responses",
											" */",
											"",
											"tests[\"Response is a JSON object\"] = tv4.validate(",
											"    body, {type: 'object'});",
											"",
											"if (responseCode.code >= 400 && responseCode.code < 422) {",
											"    tests[\"Response is a valid error object\"] = tv4.validate(",
											"        body, errorSchema);",
											"}",
											"",
											"if (responseCode.code === 200) {",
											"    tests[\"Response is a valid model object\"] = tv4.validate(",
											"        body, modelSchema);",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {},
								"url": {
									"raw": "http://{{host}}/api/posts/:id",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"posts",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{id}}"
										}
									]
								},
								"description": "Retrieve a single post object. Soft-deleted models are only retrieved if the user has administrator rights.\n\nAccess:\n\t\n\tAll users."
							},
							"response": []
						},
						{
							"name": "Restore a post",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{host}}/api/posts/:id",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"posts",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{id}}"
										}
									]
								},
								"description": "Restore a soft-deleted post object.\n\nAccess:\n\t\n\tAdministrators."
							},
							"response": []
						},
						{
							"name": "Remove a post",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "921060aa-ab92-4866-b63f-c102953e7656",
										"type": "text/javascript",
										"exec": [
											"/* Get response body and content type */",
											"var body = JSON.parse(responseBody);",
											"var contentType = postman.getResponseHeader(\"Content-Type\");",
											"",
											"/* Valid status codes for this resource */",
											"var statusCodes = [200, 400, 401, 403, 404, 422];",
											"",
											"/* JSON error response schema */",
											"var errorSchema = {",
											"    type: 'object',",
											"    required: ['status', 'message'],",
											"    properties: {",
											"        'status' : {",
											"            type: 'number'",
											"        },",
											"        'message' : {",
											"            type: 'string'",
											"        },",
											"        'errors' : {",
											"            type: 'object',",
											"            required: [\"code\", \"message\"],",
											"        }",
											"    }",
											"};",
											"",
											"/* Success JSON message schema */",
											"var successSchema = {",
											"    type: 'object',",
											"    required: ['id'],",
											"    properties: {",
											"        'id' : { type: 'integer' }",
											"    }",
											"};",
											"",
											"",
											"/*",
											" * Basic tests",
											" */",
											"",
											"tests[\"Response time is less than 300ms\"] = (",
											"    responseTime < 300);",
											"",
											"tests[\"Content-Type is 'application/json'\"] = (",
											"    !!contentType && contentType.has(\"application/json\"));",
											"",
											"tests[\"Status code is valid\"] = (",
											"    statusCodes.indexOf(responseCode.code) >= 0);",
											"",
											"",
											"/*",
											" * Validate JSON responses",
											" */",
											"",
											"tests[\"Response is a JSON object\"] = tv4.validate(",
											"    body, {type: 'object'});",
											"",
											"if (responseCode.code >= 400 && responseCode.code < 422) {",
											"    tests[\"Response is a valid error object\"] = tv4.validate(",
											"        body, errorSchema);",
											"}",
											"",
											"if (responseCode.code === 200 && request.method !== 'GET') {",
											"    tests[\"Response is a valid success object\"] = tv4.validate(",
											"        body, successSchema);",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {},
								"url": {
									"raw": "http://{{host}}/api/posts/:id",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"posts",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{id}}"
										}
									]
								},
								"description": "Soft-delete a single post.\n\nAccess:\n\t\n\tAdministrators."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "reactions",
					"description": "User reactions resource",
					"item": [
						{
							"name": "Retrieve a post reaction",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"/* Get response body and content type */",
											"var body = JSON.parse(responseBody);",
											"var contentType = postman.getResponseHeader(\"Content-Type\");",
											"",
											"/* Valid status codes for this resource */",
											"var statusCodes = [200, 400, 401, 403, 404, 422];",
											"",
											"/* JSON error response schema */",
											"var errorSchema = {",
											"    type: 'object',",
											"    required: ['status', 'message'],",
											"    properties: {",
											"        'status' : {",
											"            type: 'number'",
											"        },",
											"        'message' : {",
											"            type: 'string'",
											"        },",
											"        'errors' : {",
											"            type: 'object',",
											"            required: [\"code\", \"message\"],",
											"        }",
											"    }",
											"};",
											"",
											"/* Success JSON message schema */",
											"var successSchema = {",
											"    type: 'object',",
											"    required: ['id'],",
											"    properties: {",
											"        'id' : { type: 'integer' }",
											"    }",
											"};",
											"",
											"",
											"/*",
											" * Basic tests",
											" */",
											"",
											"tests[\"Response time is less than 300ms\"] = (",
											"    responseTime < 300);",
											"",
											"tests[\"Content-Type is 'application/json'\"] = (",
											"    !!contentType && contentType.has(\"application/json\"));",
											"",
											"tests[\"Status code is valid\"] = (",
											"    statusCodes.indexOf(responseCode.code) >= 0);",
											"",
											"",
											"/*",
											" * Validate JSON responses",
											" */",
											"",
											"tests[\"Response is a JSON object\"] = tv4.validate(",
											"    body, {type: 'object'});",
											"",
											"if (responseCode.code >= 400 && responseCode.code < 422) {",
											"    tests[\"Response is a valid error object\"] = tv4.validate(",
											"        body, errorSchema);",
											"}",
											"",
											"if (responseCode.code === 200 && request.method !== 'GET') {",
											"    tests[\"Response is a valid success object\"] = tv4.validate(",
											"        body, successSchema);",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{host}}/api/posts/reactions/:post_id",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"posts",
										"reactions",
										":post_id"
									],
									"variable": [
										{
											"key": "post_id",
											"value": ""
										}
									]
								},
								"description": "Retrieve a single post reaction object.\n\nAccess:\n\t\n\tAuthenticated users."
							},
							"response": []
						},
						{
							"name": "Update a post reaction",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"/* Get response body and content type */",
											"var body = JSON.parse(responseBody);",
											"var contentType = postman.getResponseHeader(\"Content-Type\");",
											"",
											"/* Valid status codes for this resource */",
											"var statusCodes = [200, 400, 401, 403, 404, 422];",
											"",
											"/* JSON error response schema */",
											"var errorSchema = {",
											"    type: 'object',",
											"    required: ['status', 'message'],",
											"    properties: {",
											"        'status' : {",
											"            type: 'number'",
											"        },",
											"        'message' : {",
											"            type: 'string'",
											"        },",
											"        'errors' : {",
											"            type: 'object',",
											"            required: [\"code\", \"message\"],",
											"        }",
											"    }",
											"};",
											"",
											"/* Success JSON message schema */",
											"var successSchema = {",
											"    type: 'object',",
											"    required: ['id'],",
											"    properties: {",
											"        'id' : { type: 'integer' }",
											"    }",
											"};",
											"",
											"",
											"/*",
											" * Basic tests",
											" */",
											"",
											"tests[\"Response time is less than 300ms\"] = (",
											"    responseTime < 300);",
											"",
											"tests[\"Content-Type is 'application/json'\"] = (",
											"    !!contentType && contentType.has(\"application/json\"));",
											"",
											"tests[\"Status code is valid\"] = (",
											"    statusCodes.indexOf(responseCode.code) >= 0);",
											"",
											"",
											"/*",
											" * Validate JSON responses",
											" */",
											"",
											"tests[\"Response is a JSON object\"] = tv4.validate(",
											"    body, {type: 'object'});",
											"",
											"if (responseCode.code >= 400 && responseCode.code < 422) {",
											"    tests[\"Response is a valid error object\"] = tv4.validate(",
											"        body, errorSchema);",
											"}",
											"",
											"if (responseCode.code === 200 && request.method !== 'GET') {",
											"    tests[\"Response is a valid success object\"] = tv4.validate(",
											"        body, successSchema);",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{host}}/api/posts/reactions/:post_id",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"posts",
										"reactions",
										":post_id"
									],
									"variable": [
										{
											"key": "post_id",
											"value": "{{id}}"
										}
									]
								},
								"description": "Update the authenticated user reaction to a post.\n\nAccess:\n\t\n\tAuthenticated users.\n\nUpdatable fields:\n\n    liked           Like the post\n    favourited      Add the post to favourites\n"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "SOURCES",
			"item": [
				{
					"name": "feeds",
					"description": "Feed resource",
					"item": [
						{
							"name": "Feeds listing",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "02d681ab-aa1e-474c-a539-18e3cbb465f0",
										"type": "text/javascript",
										"exec": [
											"/* Get response body and content type */",
											"var body = JSON.parse(responseBody);",
											"var contentType = postman.getResponseHeader(\"Content-Type\");",
											"",
											"/* Valid status codes for this resource */",
											"var statusCodes = [200, 400, 401, 403, 404, 422];",
											"",
											"/* JSON error response schema */",
											"var errorSchema = {",
											"    type: 'object',",
											"    required: ['status', 'message'],",
											"    properties: {",
											"        'status' : {",
											"            type: 'number'",
											"        },",
											"        'message' : {",
											"            type: 'string'",
											"        },",
											"        'errors' : {",
											"            type: 'object',",
											"            required: [\"code\", \"message\"],",
											"        }",
											"    }",
											"};",
											"",
											"/* Index JSON message schema */",
											"var collectionSchema = {",
											"    type: 'object',",
											"    required: [",
											"        'current_page',",
											"        'data',",
											"        'from',",
											"        'last_page',",
											"        'per_page',",
											"        'to',",
											"        'total'",
											"    ],",
											"    properties: {",
											"        'total' : { type: 'integer' },",
											"        'current_page' : { type: 'integer' },",
											"        'from' : { type: ['integer', 'null'] },",
											"        'to' : { type: ['integer', 'null'] },",
											"        'data' : {",
											"            type: 'array',",
											"            items: {",
											"              type: 'object',",
											"              required: ['id'],",
											"              properties: {",
											"                'id' : { type: 'integer' }",
											"              }",
											"            }",
											"        }",
											"    }",
											"};",
											"",
											"/*",
											" * Basic tests",
											" */",
											"",
											"tests[\"Response time is less than 300ms\"] = (",
											"    responseTime < 300);",
											"",
											"tests[\"Content-Type is 'application/json'\"] = (",
											"    !!contentType && contentType.has(\"application/json\"));",
											"",
											"tests[\"Status code is valid\"] = (",
											"    statusCodes.indexOf(responseCode.code) >= 0);",
											"",
											"",
											"/*",
											" * Validate JSON responses",
											" */",
											"",
											"tests[\"Response is a JSON object\"] = tv4.validate(",
											"    body, {type: 'object'});",
											"",
											"if (responseCode.code >= 400 && responseCode.code < 422) {",
											"    tests[\"Response is a valid error object\"] = tv4.validate(",
											"        body, errorSchema);",
											"}",
											"",
											"if (responseCode.code === 200) {",
											"    tests[\"Response is a valid collection object\"] = tv4.validate(",
											"        body, collectionSchema);",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {},
								"url": {
									"raw": "http://{{host}}/api/feeds?limit={{limit}}&page={{page}}&sort[]={{sort}}&with[]={{with}}&search={{search}}",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"feeds"
									],
									"query": [
										{
											"key": "limit",
											"value": "{{limit}}",
											"equals": true
										},
										{
											"key": "page",
											"value": "{{page}}",
											"equals": true
										},
										{
											"key": "sort[]",
											"value": "{{sort}}",
											"equals": true
										},
										{
											"key": "with[]",
											"value": "{{with}}",
											"equals": true
										},
										{
											"key": "search",
											"value": "{{search}}",
											"equals": true
										}
									]
								},
								"description": "Obtain a list of feeds.\n\nAccess:\n\t\n\tAll users.\n\nParameters:\n\n    limit     Maximum number of results to fetch\n    page      Page of results to fetch\n    search    Restrict the results to the given search string\n    sort[]    Results order array\n    with[]    Array of related objects to fetch\n\nRelated objects that can be fetched:\n\n    author    Author object\n"
							},
							"response": []
						},
						{
							"name": "Retrieve a feed",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "40f57414-8c82-41d6-81af-b77da489f653",
										"type": "text/javascript",
										"exec": [
											"/* Get response body and content type */",
											"var body = JSON.parse(responseBody);",
											"var contentType = postman.getResponseHeader(\"Content-Type\");",
											"",
											"/* Valid status codes for this resource */",
											"var statusCodes = [200, 400, 401, 403, 404, 422];",
											"",
											"/* JSON error response schema */",
											"var errorSchema = {",
											"    type: 'object',",
											"    required: ['status', 'message'],",
											"    properties: {",
											"        'status' : {",
											"            type: 'number'",
											"        },",
											"        'message' : {",
											"            type: 'string'",
											"        },",
											"        'errors' : {",
											"            type: 'object',",
											"            required: [\"code\", \"message\"],",
											"        }",
											"    }",
											"};",
											"",
											"/* Model JSON message schema */",
											"var modelSchema = {",
											"    type: 'object',",
											"    required: ['id'],",
											"    properties: {",
											"        'id' : { type: 'integer' }",
											"    }",
											"};",
											"",
											"",
											"/*",
											" * Basic tests",
											" */",
											"",
											"tests[\"Response time is less than 300ms\"] = (",
											"    responseTime < 300);",
											"",
											"tests[\"Content-Type is 'application/json'\"] = (",
											"    !!contentType && contentType.has(\"application/json\"));",
											"",
											"tests[\"Status code is valid\"] = (",
											"    statusCodes.indexOf(responseCode.code) >= 0);",
											"",
											"",
											"/*",
											" * Validate JSON responses",
											" */",
											"",
											"tests[\"Response is a JSON object\"] = tv4.validate(",
											"    body, {type: 'object'});",
											"",
											"if (responseCode.code >= 400 && responseCode.code < 422) {",
											"    tests[\"Response is a valid error object\"] = tv4.validate(",
											"        body, errorSchema);",
											"}",
											"",
											"if (responseCode.code === 200) {",
											"    tests[\"Response is a valid model object\"] = tv4.validate(",
											"        body, modelSchema);",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {},
								"url": {
									"raw": "http://{{host}}/api/feeds/:id",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"feeds",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{id}}"
										}
									]
								},
								"description": "Retrieve a single feed object.\n\nAccess:\n\t\n\tAll users."
							},
							"response": []
						},
						{
							"name": "Store a new feed",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"/* Get response body and content type */",
											"var body = JSON.parse(responseBody);",
											"var contentType = postman.getResponseHeader(\"Content-Type\");",
											"",
											"/* Valid status codes for this resource */",
											"var statusCodes = [200, 400, 401, 403, 404, 422];",
											"",
											"/* JSON error response schema */",
											"var errorSchema = {",
											"    type: 'object',",
											"    required: ['status', 'message'],",
											"    properties: {",
											"        'status' : {",
											"            type: 'number'",
											"        },",
											"        'message' : {",
											"            type: 'string'",
											"        },",
											"        'errors' : {",
											"            type: 'object',",
											"            required: [\"code\", \"message\"],",
											"        }",
											"    }",
											"};",
											"",
											"/* Success JSON message schema */",
											"var successSchema = {",
											"    type: 'object',",
											"    required: ['id'],",
											"    properties: {",
											"        'id' : { type: 'integer' }",
											"    }",
											"};",
											"",
											"",
											"/*",
											" * Basic tests",
											" */",
											"",
											"tests[\"Response time is less than 300ms\"] = (",
											"    responseTime < 300);",
											"",
											"tests[\"Content-Type is 'application/json'\"] = (",
											"    !!contentType && contentType.has(\"application/json\"));",
											"",
											"tests[\"Status code is valid\"] = (",
											"    statusCodes.indexOf(responseCode.code) >= 0);",
											"",
											"",
											"/*",
											" * Validate JSON responses",
											" */",
											"",
											"tests[\"Response is a JSON object\"] = tv4.validate(",
											"    body, {type: 'object'});",
											"",
											"if (responseCode.code >= 400 && responseCode.code < 422) {",
											"    tests[\"Response is a valid error object\"] = tv4.validate(",
											"        body, errorSchema);",
											"}",
											"",
											"if (responseCode.code === 200 && request.method !== 'GET') {",
											"    tests[\"Response is a valid success object\"] = tv4.validate(",
											"        body, successSchema);",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{host}}/api/feeds",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"feeds"
									]
								},
								"description": "Create a new feed object.\n\nAccess:\n\t\n\tAuthenticated users. The author of the feed must\n\tbelong to the authenticated user."
							},
							"response": []
						},
						{
							"name": "Update a feed",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"/* Get response body and content type */",
											"var body = JSON.parse(responseBody);",
											"var contentType = postman.getResponseHeader(\"Content-Type\");",
											"",
											"/* Valid status codes for this resource */",
											"var statusCodes = [200, 400, 401, 403, 404, 422];",
											"",
											"/* JSON error response schema */",
											"var errorSchema = {",
											"    type: 'object',",
											"    required: ['status', 'message'],",
											"    properties: {",
											"        'status' : {",
											"            type: 'number'",
											"        },",
											"        'message' : {",
											"            type: 'string'",
											"        },",
											"        'errors' : {",
											"            type: 'object',",
											"            required: [\"code\", \"message\"],",
											"        }",
											"    }",
											"};",
											"",
											"/* Success JSON message schema */",
											"var successSchema = {",
											"    type: 'object',",
											"    required: ['id'],",
											"    properties: {",
											"        'id' : { type: 'integer' }",
											"    }",
											"};",
											"",
											"",
											"/*",
											" * Basic tests",
											" */",
											"",
											"tests[\"Response time is less than 300ms\"] = (",
											"    responseTime < 300);",
											"",
											"tests[\"Content-Type is 'application/json'\"] = (",
											"    !!contentType && contentType.has(\"application/json\"));",
											"",
											"tests[\"Status code is valid\"] = (",
											"    statusCodes.indexOf(responseCode.code) >= 0);",
											"",
											"",
											"/*",
											" * Validate JSON responses",
											" */",
											"",
											"tests[\"Response is a JSON object\"] = tv4.validate(",
											"    body, {type: 'object'});",
											"",
											"if (responseCode.code >= 400 && responseCode.code < 422) {",
											"    tests[\"Response is a valid error object\"] = tv4.validate(",
											"        body, errorSchema);",
											"}",
											"",
											"if (responseCode.code === 200 && request.method !== 'GET') {",
											"    tests[\"Response is a valid success object\"] = tv4.validate(",
											"        body, successSchema);",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{host}}/api/feeds/:id",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"feeds",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{id}}"
										}
									]
								},
								"description": "Update an existing feed object.\n\nAccess:\n\t\n\tAuthenticated users. The author of the feed must\n\tbelong to the authenticated user."
							},
							"response": []
						},
						{
							"name": "Remove a feed",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f49fb810-c428-4ed2-ad87-08615b1306c4",
										"type": "text/javascript",
										"exec": [
											"/* Get response body and content type */",
											"var body = JSON.parse(responseBody);",
											"var contentType = postman.getResponseHeader(\"Content-Type\");",
											"",
											"/* Valid status codes for this resource */",
											"var statusCodes = [200, 400, 401, 403, 404, 422];",
											"",
											"/* JSON error response schema */",
											"var errorSchema = {",
											"    type: 'object',",
											"    required: ['status', 'message'],",
											"    properties: {",
											"        'status' : {",
											"            type: 'number'",
											"        },",
											"        'message' : {",
											"            type: 'string'",
											"        },",
											"        'errors' : {",
											"            type: 'object',",
											"            required: [\"code\", \"message\"],",
											"        }",
											"    }",
											"};",
											"",
											"/* Success JSON message schema */",
											"var successSchema = {",
											"    type: 'object',",
											"    required: ['id'],",
											"    properties: {",
											"        'id' : { type: 'integer' }",
											"    }",
											"};",
											"",
											"",
											"/*",
											" * Basic tests",
											" */",
											"",
											"tests[\"Response time is less than 300ms\"] = (",
											"    responseTime < 300);",
											"",
											"tests[\"Content-Type is 'application/json'\"] = (",
											"    !!contentType && contentType.has(\"application/json\"));",
											"",
											"tests[\"Status code is valid\"] = (",
											"    statusCodes.indexOf(responseCode.code) >= 0);",
											"",
											"",
											"/*",
											" * Validate JSON responses",
											" */",
											"",
											"tests[\"Response is a JSON object\"] = tv4.validate(",
											"    body, {type: 'object'});",
											"",
											"if (responseCode.code >= 400 && responseCode.code < 422) {",
											"    tests[\"Response is a valid error object\"] = tv4.validate(",
											"        body, errorSchema);",
											"}",
											"",
											"if (responseCode.code === 200 && request.method !== 'GET') {",
											"    tests[\"Response is a valid success object\"] = tv4.validate(",
											"        body, successSchema);",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {},
								"url": {
									"raw": "http://{{host}}/api/feeds/:id",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"feeds",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{id}}"
										}
									]
								},
								"description": "Remove a single feed.\n\nAccess:\n\t\n\tAuthenticated users. The author of the feed must\n\tbelong to the authenticated user."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "municipalities",
					"description": "Municipality resource",
					"item": [
						{
							"name": "Municipalities listing",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "31b05204-0896-4ebe-815c-b6b17d68e5af",
										"type": "text/javascript",
										"exec": [
											"/* Get response body and content type */",
											"var body = JSON.parse(responseBody);",
											"var contentType = postman.getResponseHeader(\"Content-Type\");",
											"",
											"/* Valid status codes for this resource */",
											"var statusCodes = [200, 400, 401, 403, 404, 422];",
											"",
											"/* JSON error response schema */",
											"var errorSchema = {",
											"    type: 'object',",
											"    required: ['status', 'message'],",
											"    properties: {",
											"        'status' : {",
											"            type: 'number'",
											"        },",
											"        'message' : {",
											"            type: 'string'",
											"        },",
											"        'errors' : {",
											"            type: 'object',",
											"            required: [\"code\", \"message\"],",
											"        }",
											"    }",
											"};",
											"",
											"/* Index JSON message schema */",
											"var collectionSchema = {",
											"    type: 'object',",
											"    required: [",
											"        'current_page',",
											"        'data',",
											"        'from',",
											"        'last_page',",
											"        'per_page',",
											"        'to',",
											"        'total'",
											"    ],",
											"    properties: {",
											"        'total' : { type: 'integer' },",
											"        'current_page' : { type: 'integer' },",
											"        'from' : { type: ['integer', 'null'] },",
											"        'to' : { type: ['integer', 'null'] },",
											"        'data' : {",
											"            type: 'array',",
											"            items: {",
											"              type: 'object',",
											"              required: ['id'],",
											"              properties: {",
											"                'id' : { type: 'integer' }",
											"              }",
											"            }",
											"        }",
											"    }",
											"};",
											"",
											"/*",
											" * Basic tests",
											" */",
											"",
											"tests[\"Response time is less than 300ms\"] = (",
											"    responseTime < 300);",
											"",
											"tests[\"Content-Type is 'application/json'\"] = (",
											"    !!contentType && contentType.has(\"application/json\"));",
											"",
											"tests[\"Status code is valid\"] = (",
											"    statusCodes.indexOf(responseCode.code) >= 0);",
											"",
											"",
											"/*",
											" * Validate JSON responses",
											" */",
											"",
											"tests[\"Response is a JSON object\"] = tv4.validate(",
											"    body, {type: 'object'});",
											"",
											"if (responseCode.code >= 400 && responseCode.code < 422) {",
											"    tests[\"Response is a valid error object\"] = tv4.validate(",
											"        body, errorSchema);",
											"}",
											"",
											"if (responseCode.code === 200) {",
											"    tests[\"Response is a valid collection object\"] = tv4.validate(",
											"        body, collectionSchema);",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {},
								"url": {
									"raw": "http://{{host}}/api/municipalities?limit={{limit}}&page={{page}}&sort[]={{sort}}&with[]={{with}}&search={{search}}",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"municipalities"
									],
									"query": [
										{
											"key": "limit",
											"value": "{{limit}}",
											"equals": true
										},
										{
											"key": "page",
											"value": "{{page}}",
											"equals": true
										},
										{
											"key": "sort[]",
											"value": "{{sort}}",
											"equals": true
										},
										{
											"key": "with[]",
											"value": "{{with}}",
											"equals": true
										},
										{
											"key": "search",
											"value": "{{search}}",
											"equals": true
										}
									]
								},
								"description": "Obtain a list of municipalities.\n\nAccess:\n\t\n\tAll users.\n\nParameters:\n\n    limit     Maximum number of results to fetch\n    page      Page of results to fetch\n    search    Restrict the results to the given search string\n    sort[]    Results order array\n    with[]    Array of related objects to fetch\n\nRelated objects that can be fetched:\n\n"
							},
							"response": []
						},
						{
							"name": "Retrieve a municipality",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "100e4beb-5c66-496a-8aca-ad232465c565",
										"type": "text/javascript",
										"exec": [
											"/* Get response body and content type */",
											"var body = JSON.parse(responseBody);",
											"var contentType = postman.getResponseHeader(\"Content-Type\");",
											"",
											"/* Valid status codes for this resource */",
											"var statusCodes = [200, 400, 401, 403, 404, 422];",
											"",
											"/* JSON error response schema */",
											"var errorSchema = {",
											"    type: 'object',",
											"    required: ['status', 'message'],",
											"    properties: {",
											"        'status' : {",
											"            type: 'number'",
											"        },",
											"        'message' : {",
											"            type: 'string'",
											"        },",
											"        'errors' : {",
											"            type: 'object',",
											"            required: [\"code\", \"message\"],",
											"        }",
											"    }",
											"};",
											"",
											"/* Model JSON message schema */",
											"var modelSchema = {",
											"    type: 'object',",
											"    required: ['id'],",
											"    properties: {",
											"        'id' : { type: 'integer' }",
											"    }",
											"};",
											"",
											"",
											"/*",
											" * Basic tests",
											" */",
											"",
											"tests[\"Response time is less than 300ms\"] = (",
											"    responseTime < 300);",
											"",
											"tests[\"Content-Type is 'application/json'\"] = (",
											"    !!contentType && contentType.has(\"application/json\"));",
											"",
											"tests[\"Status code is valid\"] = (",
											"    statusCodes.indexOf(responseCode.code) >= 0);",
											"",
											"",
											"/*",
											" * Validate JSON responses",
											" */",
											"",
											"tests[\"Response is a JSON object\"] = tv4.validate(",
											"    body, {type: 'object'});",
											"",
											"if (responseCode.code >= 400 && responseCode.code < 422) {",
											"    tests[\"Response is a valid error object\"] = tv4.validate(",
											"        body, errorSchema);",
											"}",
											"",
											"if (responseCode.code === 200) {",
											"    tests[\"Response is a valid model object\"] = tv4.validate(",
											"        body, modelSchema);",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {},
								"url": {
									"raw": "http://{{host}}/api/municipalities/:id",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"municipalities",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{id}}"
										}
									]
								},
								"description": "Retrieve a single municipality object.\n\nAccess:\n\t\n\tAll users."
							},
							"response": []
						},
						{
							"name": "Store a new municipality",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"/* Get response body and content type */",
											"var body = JSON.parse(responseBody);",
											"var contentType = postman.getResponseHeader(\"Content-Type\");",
											"",
											"/* Valid status codes for this resource */",
											"var statusCodes = [200, 400, 401, 403, 404, 422];",
											"",
											"/* JSON error response schema */",
											"var errorSchema = {",
											"    type: 'object',",
											"    required: ['status', 'message'],",
											"    properties: {",
											"        'status' : {",
											"            type: 'number'",
											"        },",
											"        'message' : {",
											"            type: 'string'",
											"        },",
											"        'errors' : {",
											"            type: 'object',",
											"            required: [\"code\", \"message\"],",
											"        }",
											"    }",
											"};",
											"",
											"/* Success JSON message schema */",
											"var successSchema = {",
											"    type: 'object',",
											"    required: ['id'],",
											"    properties: {",
											"        'id' : { type: 'integer' }",
											"    }",
											"};",
											"",
											"",
											"/*",
											" * Basic tests",
											" */",
											"",
											"tests[\"Response time is less than 300ms\"] = (",
											"    responseTime < 300);",
											"",
											"tests[\"Content-Type is 'application/json'\"] = (",
											"    !!contentType && contentType.has(\"application/json\"));",
											"",
											"tests[\"Status code is valid\"] = (",
											"    statusCodes.indexOf(responseCode.code) >= 0);",
											"",
											"",
											"/*",
											" * Validate JSON responses",
											" */",
											"",
											"tests[\"Response is a JSON object\"] = tv4.validate(",
											"    body, {type: 'object'});",
											"",
											"if (responseCode.code >= 400 && responseCode.code < 422) {",
											"    tests[\"Response is a valid error object\"] = tv4.validate(",
											"        body, errorSchema);",
											"}",
											"",
											"if (responseCode.code === 200 && request.method !== 'GET') {",
											"    tests[\"Response is a valid success object\"] = tv4.validate(",
											"        body, successSchema);",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{host}}/api/municipalities",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"municipalities"
									]
								},
								"description": "Create a new municipality object.\n\nAccess:\n\t\n\tAdministrators."
							},
							"response": []
						},
						{
							"name": "Update a municipality",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"/* Get response body and content type */",
											"var body = JSON.parse(responseBody);",
											"var contentType = postman.getResponseHeader(\"Content-Type\");",
											"",
											"/* Valid status codes for this resource */",
											"var statusCodes = [200, 400, 401, 403, 404, 422];",
											"",
											"/* JSON error response schema */",
											"var errorSchema = {",
											"    type: 'object',",
											"    required: ['status', 'message'],",
											"    properties: {",
											"        'status' : {",
											"            type: 'number'",
											"        },",
											"        'message' : {",
											"            type: 'string'",
											"        },",
											"        'errors' : {",
											"            type: 'object',",
											"            required: [\"code\", \"message\"],",
											"        }",
											"    }",
											"};",
											"",
											"/* Success JSON message schema */",
											"var successSchema = {",
											"    type: 'object',",
											"    required: ['id'],",
											"    properties: {",
											"        'id' : { type: 'integer' }",
											"    }",
											"};",
											"",
											"",
											"/*",
											" * Basic tests",
											" */",
											"",
											"tests[\"Response time is less than 300ms\"] = (",
											"    responseTime < 300);",
											"",
											"tests[\"Content-Type is 'application/json'\"] = (",
											"    !!contentType && contentType.has(\"application/json\"));",
											"",
											"tests[\"Status code is valid\"] = (",
											"    statusCodes.indexOf(responseCode.code) >= 0);",
											"",
											"",
											"/*",
											" * Validate JSON responses",
											" */",
											"",
											"tests[\"Response is a JSON object\"] = tv4.validate(",
											"    body, {type: 'object'});",
											"",
											"if (responseCode.code >= 400 && responseCode.code < 422) {",
											"    tests[\"Response is a valid error object\"] = tv4.validate(",
											"        body, errorSchema);",
											"}",
											"",
											"if (responseCode.code === 200 && request.method !== 'GET') {",
											"    tests[\"Response is a valid success object\"] = tv4.validate(",
											"        body, successSchema);",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{host}}/api/municipalities/:id",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"municipalities",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{id}}"
										}
									]
								},
								"description": "Update an existing municipality object.\n\nAccess:\n\t\n\tAdministrators."
							},
							"response": []
						},
						{
							"name": "Remove a municipality",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {},
								"url": {
									"raw": "http://{{host}}/api/municipalities/:id",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"municipalities",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{id}}"
										}
									]
								},
								"description": "Remove a single municipality.\n\nAccess:\n\t\n\tAdministrators."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "territories",
					"description": "Territory resource",
					"item": [
						{
							"name": "Territories listing",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "76ac0e9e-bf78-4519-9cc5-3de7de6036e9",
										"type": "text/javascript",
										"exec": [
											"/* Get response body and content type */",
											"var body = JSON.parse(responseBody);",
											"var contentType = postman.getResponseHeader(\"Content-Type\");",
											"",
											"/* Valid status codes for this resource */",
											"var statusCodes = [200, 400, 401, 403, 404, 422];",
											"",
											"/* JSON error response schema */",
											"var errorSchema = {",
											"    type: 'object',",
											"    required: ['status', 'message'],",
											"    properties: {",
											"        'status' : {",
											"            type: 'number'",
											"        },",
											"        'message' : {",
											"            type: 'string'",
											"        },",
											"        'errors' : {",
											"            type: 'object',",
											"            required: [\"code\", \"message\"],",
											"        }",
											"    }",
											"};",
											"",
											"/* Index JSON message schema */",
											"var collectionSchema = {",
											"    type: 'object',",
											"    required: [",
											"        'current_page',",
											"        'data',",
											"        'from',",
											"        'last_page',",
											"        'per_page',",
											"        'to',",
											"        'total'",
											"    ],",
											"    properties: {",
											"        'total' : { type: 'integer' },",
											"        'current_page' : { type: 'integer' },",
											"        'from' : { type: ['integer', 'null'] },",
											"        'to' : { type: ['integer', 'null'] },",
											"        'data' : {",
											"            type: 'array',",
											"            items: {",
											"              type: 'object',",
											"              required: ['id'],",
											"              properties: {",
											"                'id' : { type: 'integer' }",
											"              }",
											"            }",
											"        }",
											"    }",
											"};",
											"",
											"/*",
											" * Basic tests",
											" */",
											"",
											"tests[\"Response time is less than 300ms\"] = (",
											"    responseTime < 300);",
											"",
											"tests[\"Content-Type is 'application/json'\"] = (",
											"    !!contentType && contentType.has(\"application/json\"));",
											"",
											"tests[\"Status code is valid\"] = (",
											"    statusCodes.indexOf(responseCode.code) >= 0);",
											"",
											"",
											"/*",
											" * Validate JSON responses",
											" */",
											"",
											"tests[\"Response is a JSON object\"] = tv4.validate(",
											"    body, {type: 'object'});",
											"",
											"if (responseCode.code >= 400 && responseCode.code < 422) {",
											"    tests[\"Response is a valid error object\"] = tv4.validate(",
											"        body, errorSchema);",
											"}",
											"",
											"if (responseCode.code === 200) {",
											"    tests[\"Response is a valid collection object\"] = tv4.validate(",
											"        body, collectionSchema);",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {},
								"url": {
									"raw": "http://{{host}}/api/territories?limit={{limit}}&page={{page}}&sort[]={{sort}}&with[]={{with}}&search={{search}}",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"territories"
									],
									"query": [
										{
											"key": "limit",
											"value": "{{limit}}",
											"equals": true
										},
										{
											"key": "page",
											"value": "{{page}}",
											"equals": true
										},
										{
											"key": "sort[]",
											"value": "{{sort}}",
											"equals": true
										},
										{
											"key": "with[]",
											"value": "{{with}}",
											"equals": true
										},
										{
											"key": "search",
											"value": "{{search}}",
											"equals": true
										}
									]
								},
								"description": "Obtain a list of territories.\n\nAccess:\n\t\n\tAll users.\n\nParameters:\n\n    limit     Maximum number of results to fetch\n    page      Page of results to fetch\n    search    Restrict the results to the given search string\n    sort[]    Results order array\n    with[]    Array of related objects to fetch\n\nRelated objects that can be fetched:\n\n"
							},
							"response": []
						},
						{
							"name": "Retrieve a territory",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5097a92d-c327-4b31-85fa-9a94d51d1593",
										"type": "text/javascript",
										"exec": [
											"/* Get response body and content type */",
											"var body = JSON.parse(responseBody);",
											"var contentType = postman.getResponseHeader(\"Content-Type\");",
											"",
											"/* Valid status codes for this resource */",
											"var statusCodes = [200, 400, 401, 403, 404, 422];",
											"",
											"/* JSON error response schema */",
											"var errorSchema = {",
											"    type: 'object',",
											"    required: ['status', 'message'],",
											"    properties: {",
											"        'status' : {",
											"            type: 'number'",
											"        },",
											"        'message' : {",
											"            type: 'string'",
											"        },",
											"        'errors' : {",
											"            type: 'object',",
											"            required: [\"code\", \"message\"],",
											"        }",
											"    }",
											"};",
											"",
											"/* Model JSON message schema */",
											"var modelSchema = {",
											"    type: 'object',",
											"    required: ['id'],",
											"    properties: {",
											"        'id' : { type: 'integer' }",
											"    }",
											"};",
											"",
											"",
											"/*",
											" * Basic tests",
											" */",
											"",
											"tests[\"Response time is less than 300ms\"] = (",
											"    responseTime < 300);",
											"",
											"tests[\"Content-Type is 'application/json'\"] = (",
											"    !!contentType && contentType.has(\"application/json\"));",
											"",
											"tests[\"Status code is valid\"] = (",
											"    statusCodes.indexOf(responseCode.code) >= 0);",
											"",
											"",
											"/*",
											" * Validate JSON responses",
											" */",
											"",
											"tests[\"Response is a JSON object\"] = tv4.validate(",
											"    body, {type: 'object'});",
											"",
											"if (responseCode.code >= 400 && responseCode.code < 422) {",
											"    tests[\"Response is a valid error object\"] = tv4.validate(",
											"        body, errorSchema);",
											"}",
											"",
											"if (responseCode.code === 200) {",
											"    tests[\"Response is a valid model object\"] = tv4.validate(",
											"        body, modelSchema);",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {},
								"url": {
									"raw": "http://{{host}}/api/territories/:id",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"territories",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{id}}"
										}
									]
								},
								"description": "Retrieve a single territory object.\n\nAccess:\n\t\n\tAll users."
							},
							"response": []
						},
						{
							"name": "Store a new territory",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"/* Get response body and content type */",
											"var body = JSON.parse(responseBody);",
											"var contentType = postman.getResponseHeader(\"Content-Type\");",
											"",
											"/* Valid status codes for this resource */",
											"var statusCodes = [200, 400, 401, 403, 404, 422];",
											"",
											"/* JSON error response schema */",
											"var errorSchema = {",
											"    type: 'object',",
											"    required: ['status', 'message'],",
											"    properties: {",
											"        'status' : {",
											"            type: 'number'",
											"        },",
											"        'message' : {",
											"            type: 'string'",
											"        },",
											"        'errors' : {",
											"            type: 'object',",
											"            required: [\"code\", \"message\"],",
											"        }",
											"    }",
											"};",
											"",
											"/* Success JSON message schema */",
											"var successSchema = {",
											"    type: 'object',",
											"    required: ['id'],",
											"    properties: {",
											"        'id' : { type: 'integer' }",
											"    }",
											"};",
											"",
											"",
											"/*",
											" * Basic tests",
											" */",
											"",
											"tests[\"Response time is less than 300ms\"] = (",
											"    responseTime < 300);",
											"",
											"tests[\"Content-Type is 'application/json'\"] = (",
											"    !!contentType && contentType.has(\"application/json\"));",
											"",
											"tests[\"Status code is valid\"] = (",
											"    statusCodes.indexOf(responseCode.code) >= 0);",
											"",
											"",
											"/*",
											" * Validate JSON responses",
											" */",
											"",
											"tests[\"Response is a JSON object\"] = tv4.validate(",
											"    body, {type: 'object'});",
											"",
											"if (responseCode.code >= 400 && responseCode.code < 422) {",
											"    tests[\"Response is a valid error object\"] = tv4.validate(",
											"        body, errorSchema);",
											"}",
											"",
											"if (responseCode.code === 200 && request.method !== 'GET') {",
											"    tests[\"Response is a valid success object\"] = tv4.validate(",
											"        body, successSchema);",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{host}}/api/territories",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"territories"
									]
								},
								"description": "Create a new territory object.\n\nAccess:\n\t\n\tAdministrators."
							},
							"response": []
						},
						{
							"name": "Update a territory",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"/* Get response body and content type */",
											"var body = JSON.parse(responseBody);",
											"var contentType = postman.getResponseHeader(\"Content-Type\");",
											"",
											"/* Valid status codes for this resource */",
											"var statusCodes = [200, 400, 401, 403, 404, 422];",
											"",
											"/* JSON error response schema */",
											"var errorSchema = {",
											"    type: 'object',",
											"    required: ['status', 'message'],",
											"    properties: {",
											"        'status' : {",
											"            type: 'number'",
											"        },",
											"        'message' : {",
											"            type: 'string'",
											"        },",
											"        'errors' : {",
											"            type: 'object',",
											"            required: [\"code\", \"message\"],",
											"        }",
											"    }",
											"};",
											"",
											"/* Success JSON message schema */",
											"var successSchema = {",
											"    type: 'object',",
											"    required: ['id'],",
											"    properties: {",
											"        'id' : { type: 'integer' }",
											"    }",
											"};",
											"",
											"",
											"/*",
											" * Basic tests",
											" */",
											"",
											"tests[\"Response time is less than 300ms\"] = (",
											"    responseTime < 300);",
											"",
											"tests[\"Content-Type is 'application/json'\"] = (",
											"    !!contentType && contentType.has(\"application/json\"));",
											"",
											"tests[\"Status code is valid\"] = (",
											"    statusCodes.indexOf(responseCode.code) >= 0);",
											"",
											"",
											"/*",
											" * Validate JSON responses",
											" */",
											"",
											"tests[\"Response is a JSON object\"] = tv4.validate(",
											"    body, {type: 'object'});",
											"",
											"if (responseCode.code >= 400 && responseCode.code < 422) {",
											"    tests[\"Response is a valid error object\"] = tv4.validate(",
											"        body, errorSchema);",
											"}",
											"",
											"if (responseCode.code === 200 && request.method !== 'GET') {",
											"    tests[\"Response is a valid success object\"] = tv4.validate(",
											"        body, successSchema);",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{host}}/api/territories/:id",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"territories",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{id}}"
										}
									]
								},
								"description": "Update an existing territory object.\n\nAccess:\n\t\n\tAdministrators."
							},
							"response": []
						},
						{
							"name": "Remove a territory",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5ca78c76-deaf-4929-a2f6-25c9068089c8",
										"type": "text/javascript",
										"exec": [
											"/* Get response body and content type */",
											"var body = JSON.parse(responseBody);",
											"var contentType = postman.getResponseHeader(\"Content-Type\");",
											"",
											"/* Valid status codes for this resource */",
											"var statusCodes = [200, 400, 401, 403, 404, 422];",
											"",
											"/* JSON error response schema */",
											"var errorSchema = {",
											"    type: 'object',",
											"    required: ['status', 'message'],",
											"    properties: {",
											"        'status' : {",
											"            type: 'number'",
											"        },",
											"        'message' : {",
											"            type: 'string'",
											"        },",
											"        'errors' : {",
											"            type: 'object',",
											"            required: [\"code\", \"message\"],",
											"        }",
											"    }",
											"};",
											"",
											"/* Success JSON message schema */",
											"var successSchema = {",
											"    type: 'object',",
											"    required: ['id'],",
											"    properties: {",
											"        'id' : { type: 'integer' }",
											"    }",
											"};",
											"",
											"",
											"/*",
											" * Basic tests",
											" */",
											"",
											"tests[\"Response time is less than 300ms\"] = (",
											"    responseTime < 300);",
											"",
											"tests[\"Content-Type is 'application/json'\"] = (",
											"    !!contentType && contentType.has(\"application/json\"));",
											"",
											"tests[\"Status code is valid\"] = (",
											"    statusCodes.indexOf(responseCode.code) >= 0);",
											"",
											"",
											"/*",
											" * Validate JSON responses",
											" */",
											"",
											"tests[\"Response is a JSON object\"] = tv4.validate(",
											"    body, {type: 'object'});",
											"",
											"if (responseCode.code >= 400 && responseCode.code < 422) {",
											"    tests[\"Response is a valid error object\"] = tv4.validate(",
											"        body, errorSchema);",
											"}",
											"",
											"if (responseCode.code === 200 && request.method !== 'GET') {",
											"    tests[\"Response is a valid success object\"] = tv4.validate(",
											"        body, successSchema);",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {},
								"url": {
									"raw": "http://{{host}}/api/territories/:id",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"territories",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{id}}"
										}
									]
								},
								"description": "Remove a single territory.\n\nAccess:\n\t\n\tAdministrators."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "SYNAPSES",
			"item": [
				{
					"name": "blocks",
					"description": "Block resource",
					"item": [
						{
							"name": "Blocks listing",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d5674142-523b-4104-861f-172416f953c3",
										"type": "text/javascript",
										"exec": [
											"/* Get response body and content type */",
											"var body = JSON.parse(responseBody);",
											"var contentType = postman.getResponseHeader(\"Content-Type\");",
											"",
											"/* Valid status codes for this resource */",
											"var statusCodes = [200, 400, 401, 403, 404, 422];",
											"",
											"/* JSON error response schema */",
											"var errorSchema = {",
											"    type: 'object',",
											"    required: ['status', 'message'],",
											"    properties: {",
											"        'status' : {",
											"            type: 'number'",
											"        },",
											"        'message' : {",
											"            type: 'string'",
											"        },",
											"        'errors' : {",
											"            type: 'object',",
											"            required: [\"code\", \"message\"],",
											"        }",
											"    }",
											"};",
											"",
											"/* Index JSON message schema */",
											"var collectionSchema = {",
											"    type: 'object',",
											"    required: [",
											"        'current_page',",
											"        'data',",
											"        'from',",
											"        'last_page',",
											"        'per_page',",
											"        'to',",
											"        'total'",
											"    ],",
											"    properties: {",
											"        'total' : { type: 'integer' },",
											"        'current_page' : { type: 'integer' },",
											"        'from' : { type: ['integer', 'null'] },",
											"        'to' : { type: ['integer', 'null'] },",
											"        'data' : {",
											"            type: 'array',",
											"            items: {",
											"              type: 'object',",
											"              required: ['id'],",
											"              properties: {",
											"                'id' : { type: 'integer' }",
											"              }",
											"            }",
											"        }",
											"    }",
											"};",
											"",
											"/*",
											" * Basic tests",
											" */",
											"",
											"tests[\"Response time is less than 300ms\"] = (",
											"    responseTime < 300);",
											"",
											"tests[\"Content-Type is 'application/json'\"] = (",
											"    !!contentType && contentType.has(\"application/json\"));",
											"",
											"tests[\"Status code is valid\"] = (",
											"    statusCodes.indexOf(responseCode.code) >= 0);",
											"",
											"",
											"/*",
											" * Validate JSON responses",
											" */",
											"",
											"tests[\"Response is a JSON object\"] = tv4.validate(",
											"    body, {type: 'object'});",
											"",
											"if (responseCode.code >= 400 && responseCode.code < 422) {",
											"    tests[\"Response is a valid error object\"] = tv4.validate(",
											"        body, errorSchema);",
											"}",
											"",
											"if (responseCode.code === 200) {",
											"    tests[\"Response is a valid collection object\"] = tv4.validate(",
											"        body, collectionSchema);",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {},
								"url": {
									"raw": "http://{{host}}/api/blocks?limit={{limit}}&page={{page}}&sort[]={{sort}}&with[]={{with}}&search={{search}}",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"blocks"
									],
									"query": [
										{
											"key": "limit",
											"value": "{{limit}}",
											"equals": true
										},
										{
											"key": "page",
											"value": "{{page}}",
											"equals": true
										},
										{
											"key": "sort[]",
											"value": "{{sort}}",
											"equals": true
										},
										{
											"key": "with[]",
											"value": "{{with}}",
											"equals": true
										},
										{
											"key": "search",
											"value": "{{search}}",
											"equals": true
										}
									]
								},
								"description": "Obtain a list of blocks.\n\nAccess:\n\t\n\tAll users.\n\nParameters:\n\n    limit     Maximum number of results to fetch\n    page      Page of results to fetch\n    search    Restrict the results to the given search string\n    sort[]    Results order array\n    with[]    Array of related objects to fetch\n\nRelated objects that can be fetched:\n\n    synapse   Synapse object\n"
							},
							"response": []
						},
						{
							"name": "Retrieve a block",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3b42c6a2-0630-4273-a667-b40240529dec",
										"type": "text/javascript",
										"exec": [
											"/* Get response body and content type */",
											"var body = JSON.parse(responseBody);",
											"var contentType = postman.getResponseHeader(\"Content-Type\");",
											"",
											"/* Valid status codes for this resource */",
											"var statusCodes = [200, 400, 401, 403, 404, 422];",
											"",
											"/* JSON error response schema */",
											"var errorSchema = {",
											"    type: 'object',",
											"    required: ['status', 'message'],",
											"    properties: {",
											"        'status' : {",
											"            type: 'number'",
											"        },",
											"        'message' : {",
											"            type: 'string'",
											"        },",
											"        'errors' : {",
											"            type: 'object',",
											"            required: [\"code\", \"message\"],",
											"        }",
											"    }",
											"};",
											"",
											"/* Model JSON message schema */",
											"var modelSchema = {",
											"    type: 'object',",
											"    required: ['id'],",
											"    properties: {",
											"        'id' : { type: 'integer' }",
											"    }",
											"};",
											"",
											"",
											"/*",
											" * Basic tests",
											" */",
											"",
											"tests[\"Response time is less than 300ms\"] = (",
											"    responseTime < 300);",
											"",
											"tests[\"Content-Type is 'application/json'\"] = (",
											"    !!contentType && contentType.has(\"application/json\"));",
											"",
											"tests[\"Status code is valid\"] = (",
											"    statusCodes.indexOf(responseCode.code) >= 0);",
											"",
											"",
											"/*",
											" * Validate JSON responses",
											" */",
											"",
											"tests[\"Response is a JSON object\"] = tv4.validate(",
											"    body, {type: 'object'});",
											"",
											"if (responseCode.code >= 400 && responseCode.code < 422) {",
											"    tests[\"Response is a valid error object\"] = tv4.validate(",
											"        body, errorSchema);",
											"}",
											"",
											"if (responseCode.code === 200) {",
											"    tests[\"Response is a valid model object\"] = tv4.validate(",
											"        body, modelSchema);",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {},
								"url": {
									"raw": "http://{{host}}/api/blocks/:id",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"blocks",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{id}}"
										}
									]
								},
								"description": "Retrieve a single block object.\n\nAccess:\n\t\n\tAll users.\n"
							},
							"response": []
						},
						{
							"name": "Store a new block",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"/* Get response body and content type */",
											"var body = JSON.parse(responseBody);",
											"var contentType = postman.getResponseHeader(\"Content-Type\");",
											"",
											"/* Valid status codes for this resource */",
											"var statusCodes = [200, 400, 401, 403, 404, 422];",
											"",
											"/* JSON error response schema */",
											"var errorSchema = {",
											"    type: 'object',",
											"    required: ['status', 'message'],",
											"    properties: {",
											"        'status' : {",
											"            type: 'number'",
											"        },",
											"        'message' : {",
											"            type: 'string'",
											"        },",
											"        'errors' : {",
											"            type: 'object',",
											"            required: [\"code\", \"message\"],",
											"        }",
											"    }",
											"};",
											"",
											"/* Success JSON message schema */",
											"var successSchema = {",
											"    type: 'object',",
											"    required: ['id'],",
											"    properties: {",
											"        'id' : { type: 'integer' }",
											"    }",
											"};",
											"",
											"",
											"/*",
											" * Basic tests",
											" */",
											"",
											"tests[\"Response time is less than 300ms\"] = (",
											"    responseTime < 300);",
											"",
											"tests[\"Content-Type is 'application/json'\"] = (",
											"    !!contentType && contentType.has(\"application/json\"));",
											"",
											"tests[\"Status code is valid\"] = (",
											"    statusCodes.indexOf(responseCode.code) >= 0);",
											"",
											"",
											"/*",
											" * Validate JSON responses",
											" */",
											"",
											"tests[\"Response is a JSON object\"] = tv4.validate(",
											"    body, {type: 'object'});",
											"",
											"if (responseCode.code >= 400 && responseCode.code < 422) {",
											"    tests[\"Response is a valid error object\"] = tv4.validate(",
											"        body, errorSchema);",
											"}",
											"",
											"if (responseCode.code === 200 && request.method !== 'GET') {",
											"    tests[\"Response is a valid success object\"] = tv4.validate(",
											"        body, successSchema);",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{host}}/api/blocks",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"blocks"
									]
								},
								"description": "Create a new block object.\n\nAccess:\n\t\n\tAuthenticated users. The authenticated user must have\n\teditor privileges over the synapse.\n"
							},
							"response": []
						},
						{
							"name": "Update a block",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"/* Get response body and content type */",
											"var body = JSON.parse(responseBody);",
											"var contentType = postman.getResponseHeader(\"Content-Type\");",
											"",
											"/* Valid status codes for this resource */",
											"var statusCodes = [200, 400, 401, 403, 404, 422];",
											"",
											"/* JSON error response schema */",
											"var errorSchema = {",
											"    type: 'object',",
											"    required: ['status', 'message'],",
											"    properties: {",
											"        'status' : {",
											"            type: 'number'",
											"        },",
											"        'message' : {",
											"            type: 'string'",
											"        },",
											"        'errors' : {",
											"            type: 'object',",
											"            required: [\"code\", \"message\"],",
											"        }",
											"    }",
											"};",
											"",
											"/* Success JSON message schema */",
											"var successSchema = {",
											"    type: 'object',",
											"    required: ['id'],",
											"    properties: {",
											"        'id' : { type: 'integer' }",
											"    }",
											"};",
											"",
											"",
											"/*",
											" * Basic tests",
											" */",
											"",
											"tests[\"Response time is less than 300ms\"] = (",
											"    responseTime < 300);",
											"",
											"tests[\"Content-Type is 'application/json'\"] = (",
											"    !!contentType && contentType.has(\"application/json\"));",
											"",
											"tests[\"Status code is valid\"] = (",
											"    statusCodes.indexOf(responseCode.code) >= 0);",
											"",
											"",
											"/*",
											" * Validate JSON responses",
											" */",
											"",
											"tests[\"Response is a JSON object\"] = tv4.validate(",
											"    body, {type: 'object'});",
											"",
											"if (responseCode.code >= 400 && responseCode.code < 422) {",
											"    tests[\"Response is a valid error object\"] = tv4.validate(",
											"        body, errorSchema);",
											"}",
											"",
											"if (responseCode.code === 200 && request.method !== 'GET') {",
											"    tests[\"Response is a valid success object\"] = tv4.validate(",
											"        body, successSchema);",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{host}}/api/blocks/:id",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"blocks",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{id}}"
										}
									]
								},
								"description": "Update an existing block object.\n\nAccess:\n\t\n\tAuthenticated users. The authenticated user must have\n\teditor privileges over the synapse."
							},
							"response": []
						},
						{
							"name": "Remove a block",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "63596ba1-59be-4e74-901e-afba4cb3a6a9",
										"type": "text/javascript",
										"exec": [
											"/* Get response body and content type */",
											"var body = JSON.parse(responseBody);",
											"var contentType = postman.getResponseHeader(\"Content-Type\");",
											"",
											"/* Valid status codes for this resource */",
											"var statusCodes = [200, 400, 401, 403, 404, 422];",
											"",
											"/* JSON error response schema */",
											"var errorSchema = {",
											"    type: 'object',",
											"    required: ['status', 'message'],",
											"    properties: {",
											"        'status' : {",
											"            type: 'number'",
											"        },",
											"        'message' : {",
											"            type: 'string'",
											"        },",
											"        'errors' : {",
											"            type: 'object',",
											"            required: [\"code\", \"message\"],",
											"        }",
											"    }",
											"};",
											"",
											"/* Success JSON message schema */",
											"var successSchema = {",
											"    type: 'object',",
											"    required: ['id'],",
											"    properties: {",
											"        'id' : { type: 'integer' }",
											"    }",
											"};",
											"",
											"",
											"/*",
											" * Basic tests",
											" */",
											"",
											"tests[\"Response time is less than 300ms\"] = (",
											"    responseTime < 300);",
											"",
											"tests[\"Content-Type is 'application/json'\"] = (",
											"    !!contentType && contentType.has(\"application/json\"));",
											"",
											"tests[\"Status code is valid\"] = (",
											"    statusCodes.indexOf(responseCode.code) >= 0);",
											"",
											"",
											"/*",
											" * Validate JSON responses",
											" */",
											"",
											"tests[\"Response is a JSON object\"] = tv4.validate(",
											"    body, {type: 'object'});",
											"",
											"if (responseCode.code >= 400 && responseCode.code < 422) {",
											"    tests[\"Response is a valid error object\"] = tv4.validate(",
											"        body, errorSchema);",
											"}",
											"",
											"if (responseCode.code === 200 && request.method !== 'GET') {",
											"    tests[\"Response is a valid success object\"] = tv4.validate(",
											"        body, successSchema);",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {},
								"url": {
									"raw": "http://{{host}}/api/blocks/:id",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"blocks",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{id}}"
										}
									]
								},
								"description": "Remove a single block.\n\nAccess:\n\t\n\tAuthenticated users. The authenticated user must have\n\teditor privileges over the synapse."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "bumps",
					"description": "Synapse post bumps resource",
					"item": [
						{
							"name": "Post bumps listing",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c90fecff-dbf3-49b8-848f-11880b12be5c",
										"type": "text/javascript",
										"exec": [
											"/* Get response body and content type */",
											"var body = JSON.parse(responseBody);",
											"var contentType = postman.getResponseHeader(\"Content-Type\");",
											"",
											"/* Valid status codes for this resource */",
											"var statusCodes = [200, 400, 401, 403, 404, 422];",
											"",
											"/* JSON error response schema */",
											"var errorSchema = {",
											"    type: 'object',",
											"    required: ['status', 'message'],",
											"    properties: {",
											"        'status' : {",
											"            type: 'number'",
											"        },",
											"        'message' : {",
											"            type: 'string'",
											"        },",
											"        'errors' : {",
											"            type: 'object',",
											"            required: [\"code\", \"message\"],",
											"        }",
											"    }",
											"};",
											"",
											"/* Index JSON message schema */",
											"var collectionSchema = {",
											"    type: 'object',",
											"    required: [",
											"        'current_page',",
											"        'data',",
											"        'from',",
											"        'last_page',",
											"        'per_page',",
											"        'to',",
											"        'total'",
											"    ],",
											"    properties: {",
											"        'total' : { type: 'integer' },",
											"        'current_page' : { type: 'integer' },",
											"        'from' : { type: ['integer', 'null'] },",
											"        'to' : { type: ['integer', 'null'] },",
											"        'data' : {",
											"            type: 'array',",
											"            items: {",
											"              type: 'object',",
											"              required: ['id'],",
											"              properties: {",
											"                'id' : { type: 'integer' }",
											"              }",
											"            }",
											"        }",
											"    }",
											"};",
											"",
											"/*",
											" * Basic tests",
											" */",
											"",
											"tests[\"Response time is less than 300ms\"] = (",
											"    responseTime < 300);",
											"",
											"tests[\"Content-Type is 'application/json'\"] = (",
											"    !!contentType && contentType.has(\"application/json\"));",
											"",
											"tests[\"Status code is valid\"] = (",
											"    statusCodes.indexOf(responseCode.code) >= 0);",
											"",
											"",
											"/*",
											" * Validate JSON responses",
											" */",
											"",
											"tests[\"Response is a JSON object\"] = tv4.validate(",
											"    body, {type: 'object'});",
											"",
											"if (responseCode.code >= 400 && responseCode.code < 422) {",
											"    tests[\"Response is a valid error object\"] = tv4.validate(",
											"        body, errorSchema);",
											"}",
											"",
											"if (responseCode.code === 200) {",
											"    tests[\"Response is a valid collection object\"] = tv4.validate(",
											"        body, collectionSchema);",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {},
								"url": {
									"raw": "http://{{host}}/api/synapses/bumps?limit={{limit}}&page={{page}}&sort[]={{sort}}&with[]={{with}}&search={{search}}",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"synapses",
										"bumps"
									],
									"query": [
										{
											"key": "limit",
											"value": "{{limit}}",
											"equals": true
										},
										{
											"key": "page",
											"value": "{{page}}",
											"equals": true
										},
										{
											"key": "sort[]",
											"value": "{{sort}}",
											"equals": true
										},
										{
											"key": "with[]",
											"value": "{{with}}",
											"equals": true
										},
										{
											"key": "search",
											"value": "{{search}}",
											"equals": true
										}
									]
								},
								"description": "Obtain a list of synapse post bumps.\n\nAccess:\n\t\n\tAuthenticated users.\n\nParameters:\n\n    limit     Maximum number of results to fetch\n    page      Page of results to fetch\n    search    Restrict the results to the given search string\n    sort[]    Results order array\n    with[]    Array of related objects to fetch\n\nRelated objects that can be fetched:\n\n    post      Post object\n    synapse   Synapse object\t"
							},
							"response": []
						},
						{
							"name": "Retrieve a post bump",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5103f763-3522-4c41-8f15-132dd44057d0",
										"type": "text/javascript",
										"exec": [
											"/* Get response body and content type */",
											"var body = JSON.parse(responseBody);",
											"var contentType = postman.getResponseHeader(\"Content-Type\");",
											"",
											"/* Valid status codes for this resource */",
											"var statusCodes = [200, 400, 401, 403, 404, 422];",
											"",
											"/* JSON error response schema */",
											"var errorSchema = {",
											"    type: 'object',",
											"    required: ['status', 'message'],",
											"    properties: {",
											"        'status' : {",
											"            type: 'number'",
											"        },",
											"        'message' : {",
											"            type: 'string'",
											"        },",
											"        'errors' : {",
											"            type: 'object',",
											"            required: [\"code\", \"message\"],",
											"        }",
											"    }",
											"};",
											"",
											"/* Model JSON message schema */",
											"var modelSchema = {",
											"    type: 'object',",
											"    required: ['id'],",
											"    properties: {",
											"        'id' : { type: 'integer' }",
											"    }",
											"};",
											"",
											"",
											"/*",
											" * Basic tests",
											" */",
											"",
											"tests[\"Response time is less than 300ms\"] = (",
											"    responseTime < 300);",
											"",
											"tests[\"Content-Type is 'application/json'\"] = (",
											"    !!contentType && contentType.has(\"application/json\"));",
											"",
											"tests[\"Status code is valid\"] = (",
											"    statusCodes.indexOf(responseCode.code) >= 0);",
											"",
											"",
											"/*",
											" * Validate JSON responses",
											" */",
											"",
											"tests[\"Response is a JSON object\"] = tv4.validate(",
											"    body, {type: 'object'});",
											"",
											"if (responseCode.code >= 400 && responseCode.code < 422) {",
											"    tests[\"Response is a valid error object\"] = tv4.validate(",
											"        body, errorSchema);",
											"}",
											"",
											"if (responseCode.code === 200) {",
											"    tests[\"Response is a valid model object\"] = tv4.validate(",
											"        body, modelSchema);",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {},
								"url": {
									"raw": "http://{{host}}/api/synapses/bumps/:id",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"synapses",
										"bumps",
										":id"
									],
									"variable": [
										{
											"value": "{{id}}",
											"id": "id"
										}
									]
								},
								"description": "Retrieve a single synapse post bump object.\n\nAccess:\n\t\n\tAuthenticated users."
							},
							"response": []
						},
						{
							"name": "Store a new post bump",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"/* Get response body and content type */",
											"var body = JSON.parse(responseBody);",
											"var contentType = postman.getResponseHeader(\"Content-Type\");",
											"",
											"/* Valid status codes for this resource */",
											"var statusCodes = [200, 400, 401, 403, 404, 422];",
											"",
											"/* JSON error response schema */",
											"var errorSchema = {",
											"    type: 'object',",
											"    required: ['status', 'message'],",
											"    properties: {",
											"        'status' : {",
											"            type: 'number'",
											"        },",
											"        'message' : {",
											"            type: 'string'",
											"        },",
											"        'errors' : {",
											"            type: 'object',",
											"            required: [\"code\", \"message\"],",
											"        }",
											"    }",
											"};",
											"",
											"/* Success JSON message schema */",
											"var successSchema = {",
											"    type: 'object',",
											"    required: ['id'],",
											"    properties: {",
											"        'id' : { type: 'integer' }",
											"    }",
											"};",
											"",
											"",
											"/*",
											" * Basic tests",
											" */",
											"",
											"tests[\"Response time is less than 300ms\"] = (",
											"    responseTime < 300);",
											"",
											"tests[\"Content-Type is 'application/json'\"] = (",
											"    !!contentType && contentType.has(\"application/json\"));",
											"",
											"tests[\"Status code is valid\"] = (",
											"    statusCodes.indexOf(responseCode.code) >= 0);",
											"",
											"",
											"/*",
											" * Validate JSON responses",
											" */",
											"",
											"tests[\"Response is a JSON object\"] = tv4.validate(",
											"    body, {type: 'object'});",
											"",
											"if (responseCode.code >= 400 && responseCode.code < 422) {",
											"    tests[\"Response is a valid error object\"] = tv4.validate(",
											"        body, errorSchema);",
											"}",
											"",
											"if (responseCode.code === 200 && request.method !== 'GET') {",
											"    tests[\"Response is a valid success object\"] = tv4.validate(",
											"        body, successSchema);",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{host}}/api/synapses/bumps",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"synapses",
										"bumps"
									]
								},
								"description": "Create a new synapse post bump object.\n\nAccess:\n\n\tAuthenticated users. The authenticated user must have\n\tedition privileges over the synapse."
							},
							"response": []
						},
						{
							"name": "Update a post bump",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"/* Get response body and content type */",
											"var body = JSON.parse(responseBody);",
											"var contentType = postman.getResponseHeader(\"Content-Type\");",
											"",
											"/* Valid status codes for this resource */",
											"var statusCodes = [200, 400, 401, 403, 404, 422];",
											"",
											"/* JSON error response schema */",
											"var errorSchema = {",
											"    type: 'object',",
											"    required: ['status', 'message'],",
											"    properties: {",
											"        'status' : {",
											"            type: 'number'",
											"        },",
											"        'message' : {",
											"            type: 'string'",
											"        },",
											"        'errors' : {",
											"            type: 'object',",
											"            required: [\"code\", \"message\"],",
											"        }",
											"    }",
											"};",
											"",
											"/* Success JSON message schema */",
											"var successSchema = {",
											"    type: 'object',",
											"    required: ['id'],",
											"    properties: {",
											"        'id' : { type: 'integer' }",
											"    }",
											"};",
											"",
											"",
											"/*",
											" * Basic tests",
											" */",
											"",
											"tests[\"Response time is less than 300ms\"] = (",
											"    responseTime < 300);",
											"",
											"tests[\"Content-Type is 'application/json'\"] = (",
											"    !!contentType && contentType.has(\"application/json\"));",
											"",
											"tests[\"Status code is valid\"] = (",
											"    statusCodes.indexOf(responseCode.code) >= 0);",
											"",
											"",
											"/*",
											" * Validate JSON responses",
											" */",
											"",
											"tests[\"Response is a JSON object\"] = tv4.validate(",
											"    body, {type: 'object'});",
											"",
											"if (responseCode.code >= 400 && responseCode.code < 422) {",
											"    tests[\"Response is a valid error object\"] = tv4.validate(",
											"        body, errorSchema);",
											"}",
											"",
											"if (responseCode.code === 200 && request.method !== 'GET') {",
											"    tests[\"Response is a valid success object\"] = tv4.validate(",
											"        body, successSchema);",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{host}}/api/synapses/bumps/:id",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"synapses",
										"bumps",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{id}}"
										}
									]
								},
								"description": "Update an existing synapse post bump object.\n\nAccess:\n\n\tAuthenticated users. The authenticated user must have\n\tedition privileges over the synapse."
							},
							"response": []
						},
						{
							"name": "Remove a post bump",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "78e7529f-9733-46fe-b5c5-2fe987957346",
										"type": "text/javascript",
										"exec": [
											"/* Get response body and content type */",
											"var body = JSON.parse(responseBody);",
											"var contentType = postman.getResponseHeader(\"Content-Type\");",
											"",
											"/* Valid status codes for this resource */",
											"var statusCodes = [200, 400, 401, 403, 404, 422];",
											"",
											"/* JSON error response schema */",
											"var errorSchema = {",
											"    type: 'object',",
											"    required: ['status', 'message'],",
											"    properties: {",
											"        'status' : {",
											"            type: 'number'",
											"        },",
											"        'message' : {",
											"            type: 'string'",
											"        },",
											"        'errors' : {",
											"            type: 'object',",
											"            required: [\"code\", \"message\"],",
											"        }",
											"    }",
											"};",
											"",
											"/* Success JSON message schema */",
											"var successSchema = {",
											"    type: 'object',",
											"    required: ['id'],",
											"    properties: {",
											"        'id' : { type: 'integer' }",
											"    }",
											"};",
											"",
											"",
											"/*",
											" * Basic tests",
											" */",
											"",
											"tests[\"Response time is less than 300ms\"] = (",
											"    responseTime < 300);",
											"",
											"tests[\"Content-Type is 'application/json'\"] = (",
											"    !!contentType && contentType.has(\"application/json\"));",
											"",
											"tests[\"Status code is valid\"] = (",
											"    statusCodes.indexOf(responseCode.code) >= 0);",
											"",
											"",
											"/*",
											" * Validate JSON responses",
											" */",
											"",
											"tests[\"Response is a JSON object\"] = tv4.validate(",
											"    body, {type: 'object'});",
											"",
											"if (responseCode.code >= 400 && responseCode.code < 422) {",
											"    tests[\"Response is a valid error object\"] = tv4.validate(",
											"        body, errorSchema);",
											"}",
											"",
											"if (responseCode.code === 200 && request.method !== 'GET') {",
											"    tests[\"Response is a valid success object\"] = tv4.validate(",
											"        body, successSchema);",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {},
								"url": {
									"raw": "http://{{host}}/api/synapses/bumps/:id",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"synapses",
										"bumps",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{id}}"
										}
									]
								},
								"description": "Remove a single synapse post bump.\n\nAccess:\n\n\tAuthenticated users. The authenticated user must have\n\tedition privileges over the synapse."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "nodes",
					"item": [
						{
							"name": "Synapse roots",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "461db74d-4ea7-4247-86a9-e0ff145a6513",
										"type": "text/javascript",
										"exec": [
											"/* Get response body and content type */",
											"var body = JSON.parse(responseBody);",
											"var contentType = postman.getResponseHeader(\"Content-Type\");",
											"",
											"/* Valid status codes for this resource */",
											"var statusCodes = [200, 400, 401, 403, 404, 422];",
											"",
											"/* JSON error response schema */",
											"var errorSchema = {",
											"    type: 'object',",
											"    required: ['status', 'message'],",
											"    properties: {",
											"        'status' : {",
											"            type: 'number'",
											"        },",
											"        'message' : {",
											"            type: 'string'",
											"        },",
											"        'errors' : {",
											"            type: 'object',",
											"            required: [\"code\", \"message\"],",
											"        }",
											"    }",
											"};",
											"",
											"/* Index JSON message schema */",
											"var collectionSchema = {",
											"    type: 'object',",
											"    required: [",
											"        'current_page',",
											"        'data',",
											"        'from',",
											"        'last_page',",
											"        'per_page',",
											"        'to',",
											"        'total'",
											"    ],",
											"    properties: {",
											"        'total' : { type: 'integer' },",
											"        'current_page' : { type: 'integer' },",
											"        'from' : { type: ['integer', 'null'] },",
											"        'to' : { type: ['integer', 'null'] },",
											"        'data' : {",
											"            type: 'array',",
											"            items: {",
											"              type: 'object',",
											"              required: ['id'],",
											"              properties: {",
											"                'id' : { type: 'integer' }",
											"              }",
											"            }",
											"        }",
											"    }",
											"};",
											"",
											"/*",
											" * Basic tests",
											" */",
											"",
											"tests[\"Response time is less than 300ms\"] = (",
											"    responseTime < 300);",
											"",
											"tests[\"Content-Type is 'application/json'\"] = (",
											"    !!contentType && contentType.has(\"application/json\"));",
											"",
											"tests[\"Status code is valid\"] = (",
											"    statusCodes.indexOf(responseCode.code) >= 0);",
											"",
											"",
											"/*",
											" * Validate JSON responses",
											" */",
											"",
											"tests[\"Response is a JSON object\"] = tv4.validate(",
											"    body, {type: 'object'});",
											"",
											"if (responseCode.code >= 400 && responseCode.code < 422) {",
											"    tests[\"Response is a valid error object\"] = tv4.validate(",
											"        body, errorSchema);",
											"}",
											"",
											"if (responseCode.code === 200) {",
											"    tests[\"Response is a valid collection object\"] = tv4.validate(",
											"        body, collectionSchema);",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {},
								"url": {
									"raw": "http://{{host}}/api/synapses/nodes?limit={{limit}}&page={{page}}&sort[]={{sort}}&with[]={{with}}&search={{search}}",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"synapses",
										"nodes"
									],
									"query": [
										{
											"key": "limit",
											"value": "{{limit}}",
											"equals": true
										},
										{
											"key": "page",
											"value": "{{page}}",
											"equals": true
										},
										{
											"key": "sort[]",
											"value": "{{sort}}",
											"equals": true
										},
										{
											"key": "with[]",
											"value": "{{with}}",
											"equals": true
										},
										{
											"key": "search",
											"value": "{{search}}",
											"equals": true
										}
									]
								},
								"description": "Obtain a list of synapse nodes. If included, children nodes are sorted in the same way as the root nodes. When the 'search' parameter is not provided, only roots synapses are returned.\n\n\nAccess:\n\t\n\tAll users.\n\nParameters:\n\n    limit     Maximum number of results to fetch\n    page      Page of results to fetch\n    search    Restrict the results to the given search string\n    sort[]    Results order array\n    with[]    Array of related objects to fetch\n\nRelated objects that can be fetched:\n\n    childs    Child synapses"
							},
							"response": []
						},
						{
							"name": "Synapse children",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d05a5434-69e6-4cc2-82bf-7767940eea5a",
										"type": "text/javascript",
										"exec": [
											"/* Get response body and content type */",
											"var body = JSON.parse(responseBody);",
											"var contentType = postman.getResponseHeader(\"Content-Type\");",
											"",
											"/* Valid status codes for this resource */",
											"var statusCodes = [200, 400, 401, 403, 404, 422];",
											"",
											"/* JSON error response schema */",
											"var errorSchema = {",
											"    type: 'object',",
											"    required: ['status', 'message'],",
											"    properties: {",
											"        'status' : {",
											"            type: 'number'",
											"        },",
											"        'message' : {",
											"            type: 'string'",
											"        },",
											"        'errors' : {",
											"            type: 'object',",
											"            required: [\"code\", \"message\"],",
											"        }",
											"    }",
											"};",
											"",
											"/* Index JSON message schema */",
											"var collectionSchema = {",
											"    type: 'object',",
											"    required: [",
											"        'current_page',",
											"        'data',",
											"        'from',",
											"        'last_page',",
											"        'per_page',",
											"        'to',",
											"        'total'",
											"    ],",
											"    properties: {",
											"        'total' : { type: 'integer' },",
											"        'current_page' : { type: 'integer' },",
											"        'from' : { type: ['integer', 'null'] },",
											"        'to' : { type: ['integer', 'null'] },",
											"        'data' : {",
											"            type: 'array',",
											"            items: {",
											"              type: 'object',",
											"              required: ['id'],",
											"              properties: {",
											"                'id' : { type: 'integer' }",
											"              }",
											"            }",
											"        }",
											"    }",
											"};",
											"",
											"/*",
											" * Basic tests",
											" */",
											"",
											"tests[\"Response time is less than 300ms\"] = (",
											"    responseTime < 300);",
											"",
											"tests[\"Content-Type is 'application/json'\"] = (",
											"    !!contentType && contentType.has(\"application/json\"));",
											"",
											"tests[\"Status code is valid\"] = (",
											"    statusCodes.indexOf(responseCode.code) >= 0);",
											"",
											"",
											"/*",
											" * Validate JSON responses",
											" */",
											"",
											"tests[\"Response is a JSON object\"] = tv4.validate(",
											"    body, {type: 'object'});",
											"",
											"if (responseCode.code >= 400 && responseCode.code < 422) {",
											"    tests[\"Response is a valid error object\"] = tv4.validate(",
											"        body, errorSchema);",
											"}",
											"",
											"if (responseCode.code === 200) {",
											"    tests[\"Response is a valid collection object\"] = tv4.validate(",
											"        body, collectionSchema);",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {},
								"url": {
									"raw": "http://{{host}}/api/synapses/nodes/:id?limit={{limit}}&page={{page}}&sort[]={{sort}}&with[]={{with}}&search={{search}}",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"synapses",
										"nodes",
										":id"
									],
									"query": [
										{
											"key": "limit",
											"value": "{{limit}}",
											"equals": true
										},
										{
											"key": "page",
											"value": "{{page}}",
											"equals": true
										},
										{
											"key": "sort[]",
											"value": "{{sort}}",
											"equals": true
										},
										{
											"key": "with[]",
											"value": "{{with}}",
											"equals": true
										},
										{
											"key": "search",
											"value": "{{search}}",
											"equals": true
										}
									],
									"variable": [
										{
											"key": "id",
											"value": ""
										}
									]
								},
								"description": "Obtain a list of child synapses. If included, children nodes are sorted in the same way as the root nodes.\n\nAccess:\n\t\n\tAll users.\n\nParameters:\n\n    limit     Maximum number of results to fetch\n    page      Page of results to fetch\n    search    Restrict the results to the given search string\n    sort[]    Results order array\n    with[]    Array of related objects to fetch\n\nRelated objects that can be fetched:\n\n    childs    Child synapses"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "privileges",
					"description": "Synapse privileges resource",
					"item": [
						{
							"name": "Privileges listing",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "071c0bd3-de88-454c-8ef5-d6cbe73b600e",
										"type": "text/javascript",
										"exec": [
											"/* Get response body and content type */",
											"var body = JSON.parse(responseBody);",
											"var contentType = postman.getResponseHeader(\"Content-Type\");",
											"",
											"/* Valid status codes for this resource */",
											"var statusCodes = [200, 400, 401, 403, 404, 422];",
											"",
											"/* JSON error response schema */",
											"var errorSchema = {",
											"    type: 'object',",
											"    required: ['status', 'message'],",
											"    properties: {",
											"        'status' : {",
											"            type: 'number'",
											"        },",
											"        'message' : {",
											"            type: 'string'",
											"        },",
											"        'errors' : {",
											"            type: 'object',",
											"            required: [\"code\", \"message\"],",
											"        }",
											"    }",
											"};",
											"",
											"/* Index JSON message schema */",
											"var collectionSchema = {",
											"    type: 'object',",
											"    required: [",
											"        'current_page',",
											"        'data',",
											"        'from',",
											"        'last_page',",
											"        'per_page',",
											"        'to',",
											"        'total'",
											"    ],",
											"    properties: {",
											"        'total' : { type: 'integer' },",
											"        'current_page' : { type: 'integer' },",
											"        'from' : { type: ['integer', 'null'] },",
											"        'to' : { type: ['integer', 'null'] },",
											"        'data' : {",
											"            type: 'array',",
											"            items: {",
											"              type: 'object',",
											"              required: ['id'],",
											"              properties: {",
											"                'id' : { type: 'integer' }",
											"              }",
											"            }",
											"        }",
											"    }",
											"};",
											"",
											"/*",
											" * Basic tests",
											" */",
											"",
											"tests[\"Response time is less than 300ms\"] = (",
											"    responseTime < 300);",
											"",
											"tests[\"Content-Type is 'application/json'\"] = (",
											"    !!contentType && contentType.has(\"application/json\"));",
											"",
											"tests[\"Status code is valid\"] = (",
											"    statusCodes.indexOf(responseCode.code) >= 0);",
											"",
											"",
											"/*",
											" * Validate JSON responses",
											" */",
											"",
											"tests[\"Response is a JSON object\"] = tv4.validate(",
											"    body, {type: 'object'});",
											"",
											"if (responseCode.code >= 400 && responseCode.code < 422) {",
											"    tests[\"Response is a valid error object\"] = tv4.validate(",
											"        body, errorSchema);",
											"}",
											"",
											"if (responseCode.code === 200) {",
											"    tests[\"Response is a valid collection object\"] = tv4.validate(",
											"        body, collectionSchema);",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {},
								"url": {
									"raw": "http://{{host}}/api/synapses/privileges?limit={{limit}}&page={{page}}&sort[]={{sort}}&with[]={{with}}&search={{search}}",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"synapses",
										"privileges"
									],
									"query": [
										{
											"key": "limit",
											"value": "{{limit}}",
											"equals": true
										},
										{
											"key": "page",
											"value": "{{page}}",
											"equals": true
										},
										{
											"key": "sort[]",
											"value": "{{sort}}",
											"equals": true
										},
										{
											"key": "with[]",
											"value": "{{with}}",
											"equals": true
										},
										{
											"key": "search",
											"value": "{{search}}",
											"equals": true
										}
									]
								},
								"description": "Obtain a list of synapse privileges.\n\nAccess:\n\t\n\tAuthenticated users. Only the privileges for the synapes\n\twhere the authenticated user is manager will be listed.\n\nParameters:\n\n    limit     Maximum number of results to fetch\n    page      Page of results to fetch\n    search    Restrict the results to the given search string\n    sort[]    Results order array\n    with[]    Array of related objects to fetch\n\nRelated objects that can be fetched:\n\n    synapse   Synapse object\n    user      User object"
							},
							"response": []
						},
						{
							"name": "Retrieve a privilege",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "eb50984f-6232-4456-b4a0-ceac99c6bc1c",
										"type": "text/javascript",
										"exec": [
											"/* Get response body and content type */",
											"var body = JSON.parse(responseBody);",
											"var contentType = postman.getResponseHeader(\"Content-Type\");",
											"",
											"/* Valid status codes for this resource */",
											"var statusCodes = [200, 400, 401, 403, 404, 422];",
											"",
											"/* JSON error response schema */",
											"var errorSchema = {",
											"    type: 'object',",
											"    required: ['status', 'message'],",
											"    properties: {",
											"        'status' : {",
											"            type: 'number'",
											"        },",
											"        'message' : {",
											"            type: 'string'",
											"        },",
											"        'errors' : {",
											"            type: 'object',",
											"            required: [\"code\", \"message\"],",
											"        }",
											"    }",
											"};",
											"",
											"/* Model JSON message schema */",
											"var modelSchema = {",
											"    type: 'object',",
											"    required: ['id'],",
											"    properties: {",
											"        'id' : { type: 'integer' }",
											"    }",
											"};",
											"",
											"",
											"/*",
											" * Basic tests",
											" */",
											"",
											"tests[\"Response time is less than 300ms\"] = (",
											"    responseTime < 300);",
											"",
											"tests[\"Content-Type is 'application/json'\"] = (",
											"    !!contentType && contentType.has(\"application/json\"));",
											"",
											"tests[\"Status code is valid\"] = (",
											"    statusCodes.indexOf(responseCode.code) >= 0);",
											"",
											"",
											"/*",
											" * Validate JSON responses",
											" */",
											"",
											"tests[\"Response is a JSON object\"] = tv4.validate(",
											"    body, {type: 'object'});",
											"",
											"if (responseCode.code >= 400 && responseCode.code < 422) {",
											"    tests[\"Response is a valid error object\"] = tv4.validate(",
											"        body, errorSchema);",
											"}",
											"",
											"if (responseCode.code === 200) {",
											"    tests[\"Response is a valid model object\"] = tv4.validate(",
											"        body, modelSchema);",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {},
								"url": {
									"raw": "http://{{host}}/api/synapses/privileges/:id",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"synapses",
										"privileges",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{id}}"
										}
									]
								},
								"description": "Retrieve a single synapse privilege object.\n\nAccess:\n\t\n\tAuthenticated users. The authenticated user must have\n\tmanagement privileges over the synapse."
							},
							"response": []
						},
						{
							"name": "Store a new privilege",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"/* Get response body and content type */",
											"var body = JSON.parse(responseBody);",
											"var contentType = postman.getResponseHeader(\"Content-Type\");",
											"",
											"/* Valid status codes for this resource */",
											"var statusCodes = [200, 400, 401, 403, 404, 422];",
											"",
											"/* JSON error response schema */",
											"var errorSchema = {",
											"    type: 'object',",
											"    required: ['status', 'message'],",
											"    properties: {",
											"        'status' : {",
											"            type: 'number'",
											"        },",
											"        'message' : {",
											"            type: 'string'",
											"        },",
											"        'errors' : {",
											"            type: 'object',",
											"            required: [\"code\", \"message\"],",
											"        }",
											"    }",
											"};",
											"",
											"/* Success JSON message schema */",
											"var successSchema = {",
											"    type: 'object',",
											"    required: ['id'],",
											"    properties: {",
											"        'id' : { type: 'integer' }",
											"    }",
											"};",
											"",
											"",
											"/*",
											" * Basic tests",
											" */",
											"",
											"tests[\"Response time is less than 300ms\"] = (",
											"    responseTime < 300);",
											"",
											"tests[\"Content-Type is 'application/json'\"] = (",
											"    !!contentType && contentType.has(\"application/json\"));",
											"",
											"tests[\"Status code is valid\"] = (",
											"    statusCodes.indexOf(responseCode.code) >= 0);",
											"",
											"",
											"/*",
											" * Validate JSON responses",
											" */",
											"",
											"tests[\"Response is a JSON object\"] = tv4.validate(",
											"    body, {type: 'object'});",
											"",
											"if (responseCode.code >= 400 && responseCode.code < 422) {",
											"    tests[\"Response is a valid error object\"] = tv4.validate(",
											"        body, errorSchema);",
											"}",
											"",
											"if (responseCode.code === 200 && request.method !== 'GET') {",
											"    tests[\"Response is a valid success object\"] = tv4.validate(",
											"        body, successSchema);",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{host}}/api/synapses/privileges",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"synapses",
										"privileges"
									]
								},
								"description": "Create a new synapse privilege object.\n\nAccess:\n\n\tAuthenticated users. The authenticated user must have\n\tmanagement privileges over the synapse."
							},
							"response": []
						},
						{
							"name": "Update a privilege",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"/* Get response body and content type */",
											"var body = JSON.parse(responseBody);",
											"var contentType = postman.getResponseHeader(\"Content-Type\");",
											"",
											"/* Valid status codes for this resource */",
											"var statusCodes = [200, 400, 401, 403, 404, 422];",
											"",
											"/* JSON error response schema */",
											"var errorSchema = {",
											"    type: 'object',",
											"    required: ['status', 'message'],",
											"    properties: {",
											"        'status' : {",
											"            type: 'number'",
											"        },",
											"        'message' : {",
											"            type: 'string'",
											"        },",
											"        'errors' : {",
											"            type: 'object',",
											"            required: [\"code\", \"message\"],",
											"        }",
											"    }",
											"};",
											"",
											"/* Success JSON message schema */",
											"var successSchema = {",
											"    type: 'object',",
											"    required: ['id'],",
											"    properties: {",
											"        'id' : { type: 'integer' }",
											"    }",
											"};",
											"",
											"",
											"/*",
											" * Basic tests",
											" */",
											"",
											"tests[\"Response time is less than 300ms\"] = (",
											"    responseTime < 300);",
											"",
											"tests[\"Content-Type is 'application/json'\"] = (",
											"    !!contentType && contentType.has(\"application/json\"));",
											"",
											"tests[\"Status code is valid\"] = (",
											"    statusCodes.indexOf(responseCode.code) >= 0);",
											"",
											"",
											"/*",
											" * Validate JSON responses",
											" */",
											"",
											"tests[\"Response is a JSON object\"] = tv4.validate(",
											"    body, {type: 'object'});",
											"",
											"if (responseCode.code >= 400 && responseCode.code < 422) {",
											"    tests[\"Response is a valid error object\"] = tv4.validate(",
											"        body, errorSchema);",
											"}",
											"",
											"if (responseCode.code === 200 && request.method !== 'GET') {",
											"    tests[\"Response is a valid success object\"] = tv4.validate(",
											"        body, successSchema);",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{host}}/api/synapses/privileges/:id",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"synapses",
										"privileges",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{id}}"
										}
									]
								},
								"description": "Update an existing synapse privilege object.\n\nAccess:\n\n\tAuthenticated users. The authenticated user must have\n\tmanagement privileges over the synapse."
							},
							"response": []
						},
						{
							"name": "Remove a privilege",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "357f5924-195f-4d5f-ae7f-6780e6222b7d",
										"type": "text/javascript",
										"exec": [
											"/* Get response body and content type */",
											"var body = JSON.parse(responseBody);",
											"var contentType = postman.getResponseHeader(\"Content-Type\");",
											"",
											"/* Valid status codes for this resource */",
											"var statusCodes = [200, 400, 401, 403, 404, 422];",
											"",
											"/* JSON error response schema */",
											"var errorSchema = {",
											"    type: 'object',",
											"    required: ['status', 'message'],",
											"    properties: {",
											"        'status' : {",
											"            type: 'number'",
											"        },",
											"        'message' : {",
											"            type: 'string'",
											"        },",
											"        'errors' : {",
											"            type: 'object',",
											"            required: [\"code\", \"message\"],",
											"        }",
											"    }",
											"};",
											"",
											"/* Success JSON message schema */",
											"var successSchema = {",
											"    type: 'object',",
											"    required: ['id'],",
											"    properties: {",
											"        'id' : { type: 'integer' }",
											"    }",
											"};",
											"",
											"",
											"/*",
											" * Basic tests",
											" */",
											"",
											"tests[\"Response time is less than 300ms\"] = (",
											"    responseTime < 300);",
											"",
											"tests[\"Content-Type is 'application/json'\"] = (",
											"    !!contentType && contentType.has(\"application/json\"));",
											"",
											"tests[\"Status code is valid\"] = (",
											"    statusCodes.indexOf(responseCode.code) >= 0);",
											"",
											"",
											"/*",
											" * Validate JSON responses",
											" */",
											"",
											"tests[\"Response is a JSON object\"] = tv4.validate(",
											"    body, {type: 'object'});",
											"",
											"if (responseCode.code >= 400 && responseCode.code < 422) {",
											"    tests[\"Response is a valid error object\"] = tv4.validate(",
											"        body, errorSchema);",
											"}",
											"",
											"if (responseCode.code === 200 && request.method !== 'GET') {",
											"    tests[\"Response is a valid success object\"] = tv4.validate(",
											"        body, successSchema);",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {},
								"url": {
									"raw": "http://{{host}}/api/synapses/privileges/:id",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"synapses",
										"privileges",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{id}}"
										}
									]
								},
								"description": "Remove a single synapse privilege.\n\nAccess:\n\n\tAuthenticated users. The authenticated user must have\n\tmanagement privileges over the synapse."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "synapses",
					"description": "Synapse resource",
					"item": [
						{
							"name": "Synapses listing",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "059d2fbc-95f3-4cc5-ad7c-26cdccd55d60",
										"type": "text/javascript",
										"exec": [
											"/* Get response body and content type */",
											"var body = JSON.parse(responseBody);",
											"var contentType = postman.getResponseHeader(\"Content-Type\");",
											"",
											"/* Valid status codes for this resource */",
											"var statusCodes = [200, 400, 401, 403, 404, 422];",
											"",
											"/* JSON error response schema */",
											"var errorSchema = {",
											"    type: 'object',",
											"    required: ['status', 'message'],",
											"    properties: {",
											"        'status' : {",
											"            type: 'number'",
											"        },",
											"        'message' : {",
											"            type: 'string'",
											"        },",
											"        'errors' : {",
											"            type: 'object',",
											"            required: [\"code\", \"message\"],",
											"        }",
											"    }",
											"};",
											"",
											"/* Index JSON message schema */",
											"var collectionSchema = {",
											"    type: 'object',",
											"    required: [",
											"        'current_page',",
											"        'data',",
											"        'from',",
											"        'last_page',",
											"        'per_page',",
											"        'to',",
											"        'total'",
											"    ],",
											"    properties: {",
											"        'total' : { type: 'integer' },",
											"        'current_page' : { type: 'integer' },",
											"        'from' : { type: ['integer', 'null'] },",
											"        'to' : { type: ['integer', 'null'] },",
											"        'data' : {",
											"            type: 'array',",
											"            items: {",
											"              type: 'object',",
											"              required: ['id'],",
											"              properties: {",
											"                'id' : { type: 'integer' }",
											"              }",
											"            }",
											"        }",
											"    }",
											"};",
											"",
											"/*",
											" * Basic tests",
											" */",
											"",
											"tests[\"Response time is less than 300ms\"] = (",
											"    responseTime < 300);",
											"",
											"tests[\"Content-Type is 'application/json'\"] = (",
											"    !!contentType && contentType.has(\"application/json\"));",
											"",
											"tests[\"Status code is valid\"] = (",
											"    statusCodes.indexOf(responseCode.code) >= 0);",
											"",
											"",
											"/*",
											" * Validate JSON responses",
											" */",
											"",
											"tests[\"Response is a JSON object\"] = tv4.validate(",
											"    body, {type: 'object'});",
											"",
											"if (responseCode.code >= 400 && responseCode.code < 422) {",
											"    tests[\"Response is a valid error object\"] = tv4.validate(",
											"        body, errorSchema);",
											"}",
											"",
											"if (responseCode.code === 200) {",
											"    tests[\"Response is a valid collection object\"] = tv4.validate(",
											"        body, collectionSchema);",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {},
								"url": {
									"raw": "http://{{host}}/api/synapses?limit={{limit}}&page={{page}}&sort[]={{sort}}&with[]={{with}}&search={{search}}",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"synapses"
									],
									"query": [
										{
											"key": "limit",
											"value": "{{limit}}",
											"equals": true
										},
										{
											"key": "page",
											"value": "{{page}}",
											"equals": true
										},
										{
											"key": "sort[]",
											"value": "{{sort}}",
											"equals": true
										},
										{
											"key": "with[]",
											"value": "{{with}}",
											"equals": true
										},
										{
											"key": "search",
											"value": "{{search}}",
											"equals": true
										}
									]
								},
								"description": "Obtain a list of synapses.\n\nAccess:\n\t\n\tAll users.\n\nParameters:\n\n    limit     Maximum number of results to fetch\n    page      Page of results to fetch\n    search    Restrict the results to the given search string\n    sort[]    Results order array\n    with[]    Array of related objects to fetch\n\nRelated objects that can be fetched:\n\n    privilege    Authenticated user privileges"
							},
							"response": []
						},
						{
							"name": "Retrieve a synapse",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "eee6bf1b-f185-4b9c-b48f-f0a10f00449f",
										"type": "text/javascript",
										"exec": [
											"/* Get response body and content type */",
											"var body = JSON.parse(responseBody);",
											"var contentType = postman.getResponseHeader(\"Content-Type\");",
											"",
											"/* Valid status codes for this resource */",
											"var statusCodes = [200, 400, 401, 403, 404, 422];",
											"",
											"/* JSON error response schema */",
											"var errorSchema = {",
											"    type: 'object',",
											"    required: ['status', 'message'],",
											"    properties: {",
											"        'status' : {",
											"            type: 'number'",
											"        },",
											"        'message' : {",
											"            type: 'string'",
											"        },",
											"        'errors' : {",
											"            type: 'object',",
											"            required: [\"code\", \"message\"],",
											"        }",
											"    }",
											"};",
											"",
											"/* Model JSON message schema */",
											"var modelSchema = {",
											"    type: 'object',",
											"    required: ['id'],",
											"    properties: {",
											"        'id' : { type: 'integer' }",
											"    }",
											"};",
											"",
											"",
											"/*",
											" * Basic tests",
											" */",
											"",
											"tests[\"Response time is less than 300ms\"] = (",
											"    responseTime < 300);",
											"",
											"tests[\"Content-Type is 'application/json'\"] = (",
											"    !!contentType && contentType.has(\"application/json\"));",
											"",
											"tests[\"Status code is valid\"] = (",
											"    statusCodes.indexOf(responseCode.code) >= 0);",
											"",
											"",
											"/*",
											" * Validate JSON responses",
											" */",
											"",
											"tests[\"Response is a JSON object\"] = tv4.validate(",
											"    body, {type: 'object'});",
											"",
											"if (responseCode.code >= 400 && responseCode.code < 422) {",
											"    tests[\"Response is a valid error object\"] = tv4.validate(",
											"        body, errorSchema);",
											"}",
											"",
											"if (responseCode.code === 200) {",
											"    tests[\"Response is a valid model object\"] = tv4.validate(",
											"        body, modelSchema);",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {},
								"url": {
									"raw": "http://{{host}}/api/synapses/:id",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"synapses",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{id}}"
										}
									]
								},
								"description": "Retrieve a single synapse object.\n\nAccess:\n\t\n\tAll users."
							},
							"response": []
						},
						{
							"name": "Store a new synapse",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"/* Get response body and content type */",
											"var body = JSON.parse(responseBody);",
											"var contentType = postman.getResponseHeader(\"Content-Type\");",
											"",
											"/* Valid status codes for this resource */",
											"var statusCodes = [200, 400, 401, 403, 404, 422];",
											"",
											"/* JSON error response schema */",
											"var errorSchema = {",
											"    type: 'object',",
											"    required: ['status', 'message'],",
											"    properties: {",
											"        'status' : {",
											"            type: 'number'",
											"        },",
											"        'message' : {",
											"            type: 'string'",
											"        },",
											"        'errors' : {",
											"            type: 'object',",
											"            required: [\"code\", \"message\"],",
											"        }",
											"    }",
											"};",
											"",
											"/* Success JSON message schema */",
											"var successSchema = {",
											"    type: 'object',",
											"    required: ['id'],",
											"    properties: {",
											"        'id' : { type: 'integer' }",
											"    }",
											"};",
											"",
											"",
											"/*",
											" * Basic tests",
											" */",
											"",
											"tests[\"Response time is less than 300ms\"] = (",
											"    responseTime < 300);",
											"",
											"tests[\"Content-Type is 'application/json'\"] = (",
											"    !!contentType && contentType.has(\"application/json\"));",
											"",
											"tests[\"Status code is valid\"] = (",
											"    statusCodes.indexOf(responseCode.code) >= 0);",
											"",
											"",
											"/*",
											" * Validate JSON responses",
											" */",
											"",
											"tests[\"Response is a JSON object\"] = tv4.validate(",
											"    body, {type: 'object'});",
											"",
											"if (responseCode.code >= 400 && responseCode.code < 422) {",
											"    tests[\"Response is a valid error object\"] = tv4.validate(",
											"        body, errorSchema);",
											"}",
											"",
											"if (responseCode.code === 200 && request.method !== 'GET') {",
											"    tests[\"Response is a valid success object\"] = tv4.validate(",
											"        body, successSchema);",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{host}}/api/synapses",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"synapses"
									]
								},
								"description": "Create a new synapse object.\n\nAccess:\n\n\tAdministrators."
							},
							"response": []
						},
						{
							"name": "Create synapse for tag",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "31fdd9dc-4cc0-4a3d-9e8d-4ab0ba340d80",
										"type": "text/javascript",
										"exec": [
											"/* Get response body and content type */",
											"var body = JSON.parse(responseBody);",
											"var contentType = postman.getResponseHeader(\"Content-Type\");",
											"",
											"/* Valid status codes for this resource */",
											"var statusCodes = [200, 400, 401, 403, 404, 422];",
											"",
											"/* JSON error response schema */",
											"var errorSchema = {",
											"    type: 'object',",
											"    required: ['status', 'message'],",
											"    properties: {",
											"        'status' : {",
											"            type: 'number'",
											"        },",
											"        'message' : {",
											"            type: 'string'",
											"        },",
											"        'errors' : {",
											"            type: 'object',",
											"            required: [\"code\", \"message\"],",
											"        }",
											"    }",
											"};",
											"",
											"/* Success JSON message schema */",
											"var successSchema = {",
											"    type: 'object',",
											"    required: ['id'],",
											"    properties: {",
											"        'id' : { type: 'integer' }",
											"    }",
											"};",
											"",
											"",
											"/*",
											" * Basic tests",
											" */",
											"",
											"tests[\"Response time is less than 300ms\"] = (",
											"    responseTime < 300);",
											"",
											"tests[\"Content-Type is 'application/json'\"] = (",
											"    !!contentType && contentType.has(\"application/json\"));",
											"",
											"tests[\"Status code is valid\"] = (",
											"    statusCodes.indexOf(responseCode.code) >= 0);",
											"",
											"",
											"/*",
											" * Validate JSON responses",
											" */",
											"",
											"tests[\"Response is a JSON object\"] = tv4.validate(",
											"    body, {type: 'object'});",
											"",
											"if (responseCode.code >= 400 && responseCode.code < 422) {",
											"    tests[\"Response is a valid error object\"] = tv4.validate(",
											"        body, errorSchema);",
											"}",
											"",
											"if (responseCode.code === 200 && request.method !== 'GET') {",
											"    tests[\"Response is a valid success object\"] = tv4.validate(",
											"        body, successSchema);",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {},
								"url": {
									"raw": "http://{{host}}/api/synapses/tags/:id",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"synapses",
										"tags",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{id}}"
										}
									]
								},
								"description": "Create a new synapse object for the given tag.\n\nAccess:\n\t\n\tAdministrators."
							},
							"response": []
						},
						{
							"name": "Update a synapse",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"/* Get response body and content type */",
											"var body = JSON.parse(responseBody);",
											"var contentType = postman.getResponseHeader(\"Content-Type\");",
											"",
											"/* Valid status codes for this resource */",
											"var statusCodes = [200, 400, 401, 403, 404, 422];",
											"",
											"/* JSON error response schema */",
											"var errorSchema = {",
											"    type: 'object',",
											"    required: ['status', 'message'],",
											"    properties: {",
											"        'status' : {",
											"            type: 'number'",
											"        },",
											"        'message' : {",
											"            type: 'string'",
											"        },",
											"        'errors' : {",
											"            type: 'object',",
											"            required: [\"code\", \"message\"],",
											"        }",
											"    }",
											"};",
											"",
											"/* Success JSON message schema */",
											"var successSchema = {",
											"    type: 'object',",
											"    required: ['id'],",
											"    properties: {",
											"        'id' : { type: 'integer' }",
											"    }",
											"};",
											"",
											"",
											"/*",
											" * Basic tests",
											" */",
											"",
											"tests[\"Response time is less than 300ms\"] = (",
											"    responseTime < 300);",
											"",
											"tests[\"Content-Type is 'application/json'\"] = (",
											"    !!contentType && contentType.has(\"application/json\"));",
											"",
											"tests[\"Status code is valid\"] = (",
											"    statusCodes.indexOf(responseCode.code) >= 0);",
											"",
											"",
											"/*",
											" * Validate JSON responses",
											" */",
											"",
											"tests[\"Response is a JSON object\"] = tv4.validate(",
											"    body, {type: 'object'});",
											"",
											"if (responseCode.code >= 400 && responseCode.code < 422) {",
											"    tests[\"Response is a valid error object\"] = tv4.validate(",
											"        body, errorSchema);",
											"}",
											"",
											"if (responseCode.code === 200 && request.method !== 'GET') {",
											"    tests[\"Response is a valid success object\"] = tv4.validate(",
											"        body, successSchema);",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{host}}/api/synapses/:id",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"synapses",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{id}}"
										}
									]
								},
								"description": "Update an existing synapse object.\n\nAccess:\n\n\tAuthenticated users. The authenticated user must have\n\tedition privileges over the synapse."
							},
							"response": []
						},
						{
							"name": "Remove a synapse",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e48f40df-315b-4c99-ad5a-1d8413735889",
										"type": "text/javascript",
										"exec": [
											"/* Get response body and content type */",
											"var body = JSON.parse(responseBody);",
											"var contentType = postman.getResponseHeader(\"Content-Type\");",
											"",
											"/* Valid status codes for this resource */",
											"var statusCodes = [200, 400, 401, 403, 404, 422];",
											"",
											"/* JSON error response schema */",
											"var errorSchema = {",
											"    type: 'object',",
											"    required: ['status', 'message'],",
											"    properties: {",
											"        'status' : {",
											"            type: 'number'",
											"        },",
											"        'message' : {",
											"            type: 'string'",
											"        },",
											"        'errors' : {",
											"            type: 'object',",
											"            required: [\"code\", \"message\"],",
											"        }",
											"    }",
											"};",
											"",
											"/* Success JSON message schema */",
											"var successSchema = {",
											"    type: 'object',",
											"    required: ['id'],",
											"    properties: {",
											"        'id' : { type: 'integer' }",
											"    }",
											"};",
											"",
											"",
											"/*",
											" * Basic tests",
											" */",
											"",
											"tests[\"Response time is less than 300ms\"] = (",
											"    responseTime < 300);",
											"",
											"tests[\"Content-Type is 'application/json'\"] = (",
											"    !!contentType && contentType.has(\"application/json\"));",
											"",
											"tests[\"Status code is valid\"] = (",
											"    statusCodes.indexOf(responseCode.code) >= 0);",
											"",
											"",
											"/*",
											" * Validate JSON responses",
											" */",
											"",
											"tests[\"Response is a JSON object\"] = tv4.validate(",
											"    body, {type: 'object'});",
											"",
											"if (responseCode.code >= 400 && responseCode.code < 422) {",
											"    tests[\"Response is a valid error object\"] = tv4.validate(",
											"        body, errorSchema);",
											"}",
											"",
											"if (responseCode.code === 200 && request.method !== 'GET') {",
											"    tests[\"Response is a valid success object\"] = tv4.validate(",
											"        body, successSchema);",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {},
								"url": {
									"raw": "http://{{host}}/api/synapses/:id",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"synapses",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{id}}"
										}
									]
								},
								"description": "Remove a single synapse.\n\nAccess:\n\n\tAdministrators."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "TAGS",
			"description": "",
			"item": [
				{
					"name": "tags",
					"description": "Tag resource",
					"item": [
						{
							"name": "Tags listing",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "70760ce0-fbbe-49b7-a825-9c4c7bf510bc",
										"type": "text/javascript",
										"exec": [
											"/* Get response body and content type */",
											"var body = JSON.parse(responseBody);",
											"var contentType = postman.getResponseHeader(\"Content-Type\");",
											"",
											"/* Valid status codes for this resource */",
											"var statusCodes = [200, 400, 401, 403, 404, 422];",
											"",
											"/* JSON error response schema */",
											"var errorSchema = {",
											"    type: 'object',",
											"    required: ['status', 'message'],",
											"    properties: {",
											"        'status' : {",
											"            type: 'number'",
											"        },",
											"        'message' : {",
											"            type: 'string'",
											"        },",
											"        'errors' : {",
											"            type: 'object',",
											"            required: [\"code\", \"message\"],",
											"        }",
											"    }",
											"};",
											"",
											"/* Index JSON message schema */",
											"var collectionSchema = {",
											"    type: 'object',",
											"    required: [",
											"        'current_page',",
											"        'data',",
											"        'from',",
											"        'last_page',",
											"        'per_page',",
											"        'to',",
											"        'total'",
											"    ],",
											"    properties: {",
											"        'total' : { type: 'integer' },",
											"        'current_page' : { type: 'integer' },",
											"        'from' : { type: ['integer', 'null'] },",
											"        'to' : { type: ['integer', 'null'] },",
											"        'data' : {",
											"            type: 'array',",
											"            items: {",
											"              type: 'object',",
											"              required: ['id'],",
											"              properties: {",
											"                'id' : { type: 'integer' }",
											"              }",
											"            }",
											"        }",
											"    }",
											"};",
											"",
											"/*",
											" * Basic tests",
											" */",
											"",
											"tests[\"Response time is less than 300ms\"] = (",
											"    responseTime < 300);",
											"",
											"tests[\"Content-Type is 'application/json'\"] = (",
											"    !!contentType && contentType.has(\"application/json\"));",
											"",
											"tests[\"Status code is valid\"] = (",
											"    statusCodes.indexOf(responseCode.code) >= 0);",
											"",
											"",
											"/*",
											" * Validate JSON responses",
											" */",
											"",
											"tests[\"Response is a JSON object\"] = tv4.validate(",
											"    body, {type: 'object'});",
											"",
											"if (responseCode.code >= 400 && responseCode.code < 422) {",
											"    tests[\"Response is a valid error object\"] = tv4.validate(",
											"        body, errorSchema);",
											"}",
											"",
											"if (responseCode.code === 200) {",
											"    tests[\"Response is a valid collection object\"] = tv4.validate(",
											"        body, collectionSchema);",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {},
								"url": {
									"raw": "http://{{host}}/api/tags?limit={{limit}}&page={{page}}&sort[]={{sort}}&with[]={{with}}&search={{search}}",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"tags"
									],
									"query": [
										{
											"key": "limit",
											"value": "{{limit}}",
											"equals": true
										},
										{
											"key": "page",
											"value": "{{page}}",
											"equals": true
										},
										{
											"key": "sort[]",
											"value": "{{sort}}",
											"equals": true
										},
										{
											"key": "with[]",
											"value": "{{with}}",
											"equals": true
										},
										{
											"key": "search",
											"value": "{{search}}",
											"equals": true
										}
									]
								},
								"description": "Obtain a list of tags. Soft-deleted models are only retrieved if the user has administrator rights.\n\nAccess:\n\t\n\tAll users.\n\nParameters:\n\n    limit     Maximum number of results to fetch\n    page      Page of results to fetch\n    search    Restrict the results to the given search string\n    sort[]    Results order array\n    with[]    Array of related objects to fetch\n\nRelated objects that can be fetched:\n\n    synapse   Synapse object\n"
							},
							"response": []
						},
						{
							"name": "Retrieve a tag",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ed98f5bc-06bf-4b9d-b002-f5b38164ee42",
										"type": "text/javascript",
										"exec": [
											"/* Get response body and content type */",
											"var body = JSON.parse(responseBody);",
											"var contentType = postman.getResponseHeader(\"Content-Type\");",
											"",
											"/* Valid status codes for this resource */",
											"var statusCodes = [200, 400, 401, 403, 404, 422];",
											"",
											"/* JSON error response schema */",
											"var errorSchema = {",
											"    type: 'object',",
											"    required: ['status', 'message'],",
											"    properties: {",
											"        'status' : {",
											"            type: 'number'",
											"        },",
											"        'message' : {",
											"            type: 'string'",
											"        },",
											"        'errors' : {",
											"            type: 'object',",
											"            required: [\"code\", \"message\"],",
											"        }",
											"    }",
											"};",
											"",
											"/* Model JSON message schema */",
											"var modelSchema = {",
											"    type: 'object',",
											"    required: ['id'],",
											"    properties: {",
											"        'id' : { type: 'integer' }",
											"    }",
											"};",
											"",
											"",
											"/*",
											" * Basic tests",
											" */",
											"",
											"tests[\"Response time is less than 300ms\"] = (",
											"    responseTime < 300);",
											"",
											"tests[\"Content-Type is 'application/json'\"] = (",
											"    !!contentType && contentType.has(\"application/json\"));",
											"",
											"tests[\"Status code is valid\"] = (",
											"    statusCodes.indexOf(responseCode.code) >= 0);",
											"",
											"",
											"/*",
											" * Validate JSON responses",
											" */",
											"",
											"tests[\"Response is a JSON object\"] = tv4.validate(",
											"    body, {type: 'object'});",
											"",
											"if (responseCode.code >= 400 && responseCode.code < 422) {",
											"    tests[\"Response is a valid error object\"] = tv4.validate(",
											"        body, errorSchema);",
											"}",
											"",
											"if (responseCode.code === 200) {",
											"    tests[\"Response is a valid model object\"] = tv4.validate(",
											"        body, modelSchema);",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {},
								"url": {
									"raw": "http://{{host}}/api/tags/:id",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"tags",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{id}}"
										}
									]
								},
								"description": "Retrieve a single tag object. Soft-deleted models are only retrieved if the user has administrator rights.\n\nAccess:\n\t\n\tAll users."
							},
							"response": []
						},
						{
							"name": "Restore a tag",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "99629fb3-591c-4fd3-b505-89600e901b1d",
										"type": "text/javascript",
										"exec": [
											"/* Get response body and content type */",
											"var body = JSON.parse(responseBody);",
											"var contentType = postman.getResponseHeader(\"Content-Type\");",
											"",
											"/* Valid status codes for this resource */",
											"var statusCodes = [200, 400, 401, 403, 404, 422];",
											"",
											"/* JSON error response schema */",
											"var errorSchema = {",
											"    type: 'object',",
											"    required: ['status', 'message'],",
											"    properties: {",
											"        'status' : {",
											"            type: 'number'",
											"        },",
											"        'message' : {",
											"            type: 'string'",
											"        },",
											"        'errors' : {",
											"            type: 'object',",
											"            required: [\"code\", \"message\"],",
											"        }",
											"    }",
											"};",
											"",
											"/* Success JSON message schema */",
											"var successSchema = {",
											"    type: 'object',",
											"    required: ['id'],",
											"    properties: {",
											"        'id' : { type: 'integer' }",
											"    }",
											"};",
											"",
											"",
											"/*",
											" * Basic tests",
											" */",
											"",
											"tests[\"Response time is less than 300ms\"] = (",
											"    responseTime < 300);",
											"",
											"tests[\"Content-Type is 'application/json'\"] = (",
											"    !!contentType && contentType.has(\"application/json\"));",
											"",
											"tests[\"Status code is valid\"] = (",
											"    statusCodes.indexOf(responseCode.code) >= 0);",
											"",
											"",
											"/*",
											" * Validate JSON responses",
											" */",
											"",
											"tests[\"Response is a JSON object\"] = tv4.validate(",
											"    body, {type: 'object'});",
											"",
											"if (responseCode.code >= 400 && responseCode.code < 422) {",
											"    tests[\"Response is a valid error object\"] = tv4.validate(",
											"        body, errorSchema);",
											"}",
											"",
											"if (responseCode.code === 200 && request.method !== 'GET') {",
											"    tests[\"Response is a valid success object\"] = tv4.validate(",
											"        body, successSchema);",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {},
								"url": {
									"raw": "http://{{host}}/api/tags/:id",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"tags",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{id}}"
										}
									]
								},
								"description": "Restore a soft-deleted tag object. This method will also restore any synapse belonging to the tag.\n\nAccess:\n\t\n\tAdministrators."
							},
							"response": []
						},
						{
							"name": "Remove a tag",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2fbe8737-94cc-4222-8c53-d9df526a5b07",
										"type": "text/javascript",
										"exec": [
											"/* Get response body and content type */",
											"var body = JSON.parse(responseBody);",
											"var contentType = postman.getResponseHeader(\"Content-Type\");",
											"",
											"/* Valid status codes for this resource */",
											"var statusCodes = [200, 400, 401, 403, 404, 422];",
											"",
											"/* JSON error response schema */",
											"var errorSchema = {",
											"    type: 'object',",
											"    required: ['status', 'message'],",
											"    properties: {",
											"        'status' : {",
											"            type: 'number'",
											"        },",
											"        'message' : {",
											"            type: 'string'",
											"        },",
											"        'errors' : {",
											"            type: 'object',",
											"            required: [\"code\", \"message\"],",
											"        }",
											"    }",
											"};",
											"",
											"/* Success JSON message schema */",
											"var successSchema = {",
											"    type: 'object',",
											"    required: ['id'],",
											"    properties: {",
											"        'id' : { type: 'integer' }",
											"    }",
											"};",
											"",
											"",
											"/*",
											" * Basic tests",
											" */",
											"",
											"tests[\"Response time is less than 300ms\"] = (",
											"    responseTime < 300);",
											"",
											"tests[\"Content-Type is 'application/json'\"] = (",
											"    !!contentType && contentType.has(\"application/json\"));",
											"",
											"tests[\"Status code is valid\"] = (",
											"    statusCodes.indexOf(responseCode.code) >= 0);",
											"",
											"",
											"/*",
											" * Validate JSON responses",
											" */",
											"",
											"tests[\"Response is a JSON object\"] = tv4.validate(",
											"    body, {type: 'object'});",
											"",
											"if (responseCode.code >= 400 && responseCode.code < 422) {",
											"    tests[\"Response is a valid error object\"] = tv4.validate(",
											"        body, errorSchema);",
											"}",
											"",
											"if (responseCode.code === 200 && request.method !== 'GET') {",
											"    tests[\"Response is a valid success object\"] = tv4.validate(",
											"        body, successSchema);",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {},
								"url": {
									"raw": "http://{{host}}/api/tags/:id",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"tags",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{id}}"
										}
									]
								},
								"description": "Soft-delete a single tag. This method will also soft-delete any synapse belonging to the tag.\n\nAccess:\n\t\n\tAdministrators."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "ATOM",
			"description": "Generate atom feeds.",
			"item": [
				{
					"name": "feeds",
					"description": "",
					"item": [
						{
							"name": "Obtain a feed for a synapse",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0f835f5b-fd32-42e3-81cd-0e8f11f95936",
										"type": "text/javascript",
										"exec": [
											"/* Get response body and content type */",
											"var contentType = postman.getResponseHeader(\"Content-Type\");",
											"",
											"/* Valid status codes for this resource */",
											"var statusCodes = [200, 400, 401, 403, 404, 422];",
											"",
											"",
											"/*",
											" * Basic tests",
											" */",
											"",
											"tests[\"Response time is less than 300ms\"] = (",
											"    responseTime < 300);",
											"",
											"tests[\"Content-Type is 'text/xml'\"] = (",
											"    !!contentType && contentType.has(\"text/xml\"));",
											"",
											"tests[\"Status code is valid\"] = (",
											"    statusCodes.indexOf(responseCode.code) >= 0);",
											"",
											"",
											"/*",
											" * Validate XML responses",
											" */",
											"",
											"if (responseCode.code === 200) {",
											"    tests[\"Response is a valid XML object\"] = (",
											"        cheerio(responseBody));",
											"}",
											"",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/atom+xml"
									}
								],
								"body": {},
								"url": {
									"raw": "http://{{host}}/feeds/synapses/:slug",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"feeds",
										"synapses",
										":slug"
									],
									"variable": [
										{
											"key": "slug",
											"value": "{{slug}}",
											"description": "Synapse slug"
										}
									]
								},
								"description": "Returns the most recent posts for the given synapse."
							},
							"response": []
						},
						{
							"name": "Obtain a feed for a tag",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "31d819cf-6e5e-4109-8598-98c65fc94d2c",
										"type": "text/javascript",
										"exec": [
											"/* Get response body and content type */",
											"var contentType = postman.getResponseHeader(\"Content-Type\");",
											"",
											"/* Valid status codes for this resource */",
											"var statusCodes = [200, 400, 401, 403, 404, 422];",
											"",
											"",
											"/*",
											" * Basic tests",
											" */",
											"",
											"tests[\"Response time is less than 300ms\"] = (",
											"    responseTime < 300);",
											"",
											"tests[\"Content-Type is 'text/xml'\"] = (",
											"    !!contentType && contentType.has(\"text/xml\"));",
											"",
											"tests[\"Status code is valid\"] = (",
											"    statusCodes.indexOf(responseCode.code) >= 0);",
											"",
											"",
											"/*",
											" * Validate XML responses",
											" */",
											"",
											"if (responseCode.code === 200) {",
											"    tests[\"Response is a valid XML object\"] = (",
											"        cheerio(responseBody));",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/atom+xml"
									}
								],
								"body": {},
								"url": {
									"raw": "http://{{host}}/feeds/tags/:slug",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"feeds",
										"tags",
										":slug"
									],
									"variable": [
										{
											"key": "slug",
											"value": "{{slug}}",
											"description": "Tag slug"
										}
									]
								},
								"description": "Returns the most recent posts for the given tag."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "BATCH",
			"description": "Batch processing of requests.",
			"item": [
				{
					"name": "Batch process requests",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f46e086f-86e0-4507-b908-7e3fde595425",
								"type": "text/javascript",
								"exec": [
									"/* Get response body and content type */",
									"var body = JSON.parse(responseBody);",
									"var contentType = postman.getResponseHeader(\"Content-Type\");",
									"",
									"/* Valid status codes for this resource */",
									"var statusCodes = [200, 400, 401, 403, 404, 422];",
									"",
									"/* JSON error response schema */",
									"var errorSchema = {",
									"    type: 'object',",
									"    required: ['status', 'message'],",
									"    properties: {",
									"        'status' : {",
									"            type: 'number'",
									"        },",
									"        'message' : {",
									"            type: 'string'",
									"        },",
									"        'errors' : {",
									"            type: 'object',",
									"            required: [\"code\", \"message\"],",
									"        }",
									"    }",
									"};",
									"",
									"/* Success JSON message schema */",
									"var successSchema = {",
									"    type: 'array'",
									"};",
									"",
									"",
									"/*",
									" * Basic tests",
									" */",
									"",
									"tests[\"Response time is less than 300ms\"] = (",
									"    responseTime < 300);",
									"",
									"tests[\"Content-Type is 'application/json'\"] = (",
									"    !!contentType && contentType.has(\"application/json\"));",
									"",
									"tests[\"Status code is valid\"] = (",
									"    statusCodes.indexOf(responseCode.code) >= 0);",
									"",
									"",
									"/*",
									" * Validate JSON responses",
									" */",
									"",
									"tests[\"Response is a JSON object\"] = tv4.validate(",
									"    body, {type: 'object'});",
									"",
									"if (responseCode.code >= 400 && responseCode.code < 422) {",
									"    tests[\"Response is a valid error object\"] = tv4.validate(",
									"        body, errorSchema);",
									"}",
									"",
									"if (responseCode.code === 200 && request.method !== 'GET') {",
									"    tests[\"Response is a valid success object\"] = tv4.validate(",
									"        body, successSchema);",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {},
						"url": {
							"raw": "http://{{host}}/api/$batch",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"$batch"
							]
						},
						"description": "Batch processes multiple requests and returns an array with the individual responses.\n\nObservations:\n\n    * The requests are run on a single transaction.\n    * The transaction will be rolled back if one of the requests fails.\n    * A maximum of 100 requests can be processed on a single batch.\n\nAccess:\n\t\n\tAll users. Individual request access permission apply\n\tfor\teach processed request.\n\nParameters:\n\n    entries[]    Array of request entries\n\nRequest entry parameters:\n\n    path         Relative API path for the request.\n    method       Request method (get, post, put, etc).\n    params[]\t Array of request parameters.\n"
					},
					"response": []
				}
			]
		}
	]
}